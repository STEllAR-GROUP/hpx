Index: boost/lockfree/detail/freelist.hpp
===================================================================
--- boost/lockfree/detail/freelist.hpp	(revision 80904)
+++ boost/lockfree/detail/freelist.hpp	(working copy)
@@ -159,6 +159,15 @@
             return allocate_impl_unsafe<Bounded>();
     }
 
+    template <bool ThreadSafe>
+    void deallocate (T * n)
+    {
+        if (ThreadSafe)
+            deallocate_impl(n);
+        else
+            deallocate_impl_unsafe(n);
+    }
+
 private:
     template <bool Bounded>
     T * allocate_impl (void)
@@ -203,15 +212,6 @@
         return reinterpret_cast<T*>(ptr);
     }
 
-    template <bool ThreadSafe>
-    void deallocate (T * n)
-    {
-        if (ThreadSafe)
-            deallocate_impl(n);
-        else
-            deallocate_impl_unsafe(n);
-    }
-
     void deallocate_impl (T * n)
     {
         void * node = n;
Index: boost/functional/hash/detail/hash_float.hpp
===================================================================
--- boost/functional/hash/detail/hash_float.hpp	(revision 80904)
+++ boost/functional/hash/detail/hash_float.hpp	(working copy)
@@ -211,7 +211,7 @@
         inline std::size_t float_hash_value(T v)
         {
             using namespace std;
-            switch (fpclassify(v)) {
+            switch (std::fpclassify(v)) {
             case FP_ZERO:
                 return 0;
             case FP_INFINITE:
Index: boost/functional/hash/extensions.hpp
===================================================================
--- boost/functional/hash/extensions.hpp	(revision 80904)
+++ boost/functional/hash/extensions.hpp	(working copy)
@@ -254,6 +254,7 @@
 #if !defined(BOOST_NO_FUNCTION_TEMPLATE_ORDERING)
         std::size_t operator()(T const& val) const
         {
+            using boost::hash_value;
             return hash_value(val);
         }
 #else
Index: libs/filesystem/src/operations.cpp
===================================================================
--- libs/filesystem/src/operations.cpp	(revision 80904)
+++ libs/filesystem/src/operations.cpp	(working copy)
@@ -73,13 +73,15 @@
     const fs::path dot_dot_path("..");
 #   include <sys/types.h>
 #   include <sys/stat.h>
-#   if !defined(__APPLE__) && !defined(__OpenBSD__)
+#   if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__ANDROID__) && !defined(ANDROID)
 #     include <sys/statvfs.h>
 #     define BOOST_STATVFS statvfs
 #     define BOOST_STATVFS_F_FRSIZE vfs.f_frsize
 #   else
 #     ifdef __OpenBSD__
 #     include <sys/param.h>
+#     elif defined(__ANDROID__) || defined(ANDROID)
+#     include <sys/vfs.h>
 #     endif
 #     include <sys/mount.h>
 #     define BOOST_STATVFS statfs
@@ -819,6 +821,7 @@
 
         if (is_sym)
         {
+          path tmp;
           path link(detail::read_symlink(result, ec));
           if (ec && *ec)
             return path();
@@ -827,8 +830,11 @@
           if (link.is_absolute())
           {
             for (++itr; itr != source.end(); ++itr)
+            {
               link /= *itr;
-            source = link;
+            }
+
+            tmp = link;
           }
           else // link is relative
           {
@@ -836,8 +842,9 @@
             new_source /= link;
             for (++itr; itr != source.end(); ++itr)
               new_source /= *itr;
-            source = new_source;
+            tmp = new_source;
           }
+          source = tmp;
           scan = true;  // symlink causes scan to be restarted
           break;
         }
