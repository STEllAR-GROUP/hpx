<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (c) 2016-2017 Hartmut Kaiser                                 -->

<!-- Use, modification and distribution are subject to the Boost Software   -->
<!-- License, Version 1.0. (See accompanying file LICENSE_1_0.txt           -->
<!-- or copy at http://www.boost.org/LICENSE_1_0.txt)                       -->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="hpx::future&lt;void&gt;" Priority="High">
        <DisplayString Condition="shared_state_.px->state_ == 0">empty</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 3">ready(value)</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 5">ready(exception)</DisplayString>
        <Expand>
            <Item Name="[value]" Condition="shared_state_.px->state_ == 5">*((std::exception_ptr*)(shared_state_.px->storage_._Pad))</Item>
        </Expand>
    </Type>

    <Type Name="hpx::future&lt;*&gt;">
        <DisplayString Condition="shared_state_.px->state_ == 0">empty</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 3">ready(value)</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 5">ready(exception)</DisplayString>
        <Expand>
            <Item Name="[value]" Condition="shared_state_.px->state_ == 3">*(($T1 *)(shared_state_.px->storage_._Pad))</Item>
            <Item Name="[exception]" Condition="shared_state_.px->state_ == 5">*((std::exception_ptr*)(shared_state_.px->storage_._Pad))</Item>
        </Expand>
    </Type>

    <Type Name="hpx::shared_future&lt;void&gt;" Priority="High">
        <DisplayString Condition="shared_state_.px->state_ == 0">empty</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 3">ready(value)</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 5">ready(exception)</DisplayString>
        <Expand>
            <Item Name="[value]" Condition="shared_state_.px->state_ == 5">*((std::exception_ptr*)(shared_state_.px->storage_._Pad))</Item>
        </Expand>
    </Type>

    <Type Name="hpx::shared_future&lt;*&gt;">
        <DisplayString Condition="shared_state_.px->state_ == 0">empty</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 3">ready(value)</DisplayString>
        <DisplayString Condition="shared_state_.px->state_ == 5">ready(exception)</DisplayString>
        <Expand>
            <Item Name="[value]" Condition="shared_state_.px->state_ == 3">*(($T1 *)(shared_state_.px->storage_._Pad))</Item>
            <Item Name="[exception]" Condition="shared_state_.px->state_ == 5">*((std::exception_ptr*)(shared_state_.px->storage_._Pad))</Item>
        </Expand>
    </Type>

</AutoVisualizer>
