# Copyright (c) 2007-2014 Hartmut Kaiser
# Copyright (c) 2011-2012 Thomas Heller
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

################################################################################
# Automatic Preprocessing. Used to preprocess C++ macro iterations
################################################################################

# add headers to preprocessing
set(function_argument_limit_preprocessing_files
  "hpx/util/detail/basic_function.hpp"
  "hpx/util/detail/define_bind_action_function_operators.hpp"
  "hpx/util/detail/define_bind_function_operators.hpp"
  "hpx/util/detail/empty_function.hpp"
  "hpx/util/detail/vtable/callable_vtable.hpp"
  "hpx/util/bind.hpp"
  "hpx/util/bind_action.hpp"
  "hpx/util/deferred_call.hpp"
  "hpx/util/invoke.hpp"
  "hpx/util/invoke_fused.hpp"
  "hpx/util/unwrapped.hpp"
  "hpx/lcos/local/detail/invoke_when_ready.hpp")
foreach(file ${function_argument_limit_preprocessing_files})
  hpx_partial_preprocess_header(${file} LIMIT HPX_LIMIT)
endforeach()

set(tuple_argument_limit_preprocessing_files
  "hpx/util/tuple.hpp"
  "hpx/util/zip_iterator.hpp")
foreach(file ${tuple_argument_limit_preprocessing_files})
  hpx_partial_preprocess_header(${file} LIMIT HPX_LIMIT)
endforeach()

set(lock_argument_limit_preprocessing_files
  "hpx/util/locking_helpers.hpp")
foreach(file ${lock_argument_limit_preprocessing_files})
  hpx_partial_preprocess_header(${file} LIMIT HPX_LIMIT)
endforeach()

set(action_argument_limit_preprocessing_files
  "hpx/apply.hpp"
  "hpx/async.hpp"
  "hpx/lcos/async.hpp"
  "hpx/lcos/async_fwd.hpp"
  "hpx/lcos/async_continue.hpp"
  "hpx/lcos/async_continue_fwd.hpp"
  "hpx/lcos/async_colocated.hpp"
  "hpx/lcos/async_colocated_fwd.hpp"
  "hpx/lcos/broadcast.hpp"
  "hpx/lcos/packaged_action_constructors.hpp"
  "hpx/lcos/packaged_action_constructors_direct.hpp"
  "hpx/lcos/reduce.hpp"
  "hpx/lcos/local/dataflow.hpp"
  "hpx/lcos/local/packaged_task.hpp"
  "hpx/runtime/actions/component_action_implementations.hpp"
  "hpx/runtime/actions/gcc44/component_action_implementations.hpp"
  "hpx/runtime/actions/component_const_action_implementations.hpp"
  "hpx/runtime/actions/component_non_const_action_implementations.hpp"
  "hpx/runtime/actions/construct_continuation_function_objects.hpp"
  "hpx/runtime/actions/construct_continuation_functions.hpp"
  "hpx/runtime/actions/define_function_operators.hpp"
  "hpx/runtime/actions/plain_action_implementations.hpp"
  "hpx/runtime/applier/apply_implementations.hpp"
  "hpx/runtime/applier/apply_implementations_callback.hpp"
  "hpx/runtime/applier/apply_continue.hpp"
  "hpx/runtime/applier/apply_continue_callback.hpp"
  "hpx/runtime/applier/apply_colocated.hpp"
  "hpx/runtime/applier/apply_colocated_callback.hpp"
  "hpx/runtime/components/new.hpp"
  "hpx/runtime/components/server/runtime_support_implementations.hpp"
  "hpx/runtime/components/server/gcc44/runtime_support_implementations.hpp"
  "hpx/runtime/components/server/create_component_with_args.hpp"
  "hpx/runtime/components/server/runtime_support_create_component_decl.hpp")
if(HPX_HAVE_SECURITY)
set(action_argument_limit_preprocessing_files ${action_argument_limit_preprocessing_files}
  "hpx/runtime/components/server/runtime_support_create_component_capabilities.hpp")
endif()
foreach(file ${action_argument_limit_preprocessing_files})
  hpx_partial_preprocess_header(${file} LIMIT HPX_LIMIT)
endforeach()

set(wait_argument_limit_preprocessing_files
  "hpx/lcos/wait_all.hpp"
  "hpx/lcos/wait_some.hpp"
  "hpx/lcos/wait_any.hpp"
  "hpx/lcos/wait_each.hpp"
  "hpx/lcos/when_all.hpp"
  "hpx/lcos/when_some.hpp"
  "hpx/lcos/when_any.hpp"
  "hpx/lcos/when_each.hpp"
  "hpx/runtime/components/memory_block.hpp")
foreach(file ${wait_argument_limit_preprocessing_files})
  hpx_partial_preprocess_header(${file} LIMIT HPX_LIMIT)
endforeach()

# invoke preprocessing routines
hpx_setup_partial_preprocess_headers()


