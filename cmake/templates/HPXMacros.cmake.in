# Copyright (c) 2014 Thomas Heller
# Copyright (c) 2015 Andreas Sch√§fer
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "@HPX_CMAKE_MODULE_PATH@")
include(HPX_Utils)

function(hpx_check_compiler_compatibility)
  if(HPX_IGNORE_COMPILER_COMPATIBILITY)
    return()
  endif()

  if(NOT (${CMAKE_CXX_COMPILER_ID} STREQUAL ${HPX_CXX_COMPILER_ID} 
     AND ${CMAKE_CXX_COMPILER_VERSION} STREQUAL ${HPX_CXX_COMPILER_VERSION}))
    set(MESSAGE "Compilers do not match. In order to compile HPX application it is"
        " recommended to use the same compiler as you did for HPX. "
        "HPX_CXX_COMPILER=${HPX_CXX_COMPILER}, "
        "CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}. "
        "HPX_CXX_COMPILER_ID=${HPX_CXX_COMPILER_ID}, "
        "CMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID}. "
        "To disable this message set HPX_IGNORE_COMPILER_COMPATIBILITY to On."
        )
    if (HPX_FIND_REQUIRED)
      hpx_error("${MESSAGE}")
    else()
      hpx_warn("${MESSAGE}")
      set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "${MESSAGE}" PARENT_SCOPE)
      set(${CMAKE_FIND_PACKAGE_NAME}_FOUND False PARENT_SCOPE)
    endif()
  endif()
endfunction()

function(hpx_check_boost_compatibility)
  if(HPX_IGNORE_BOOST_COMPATIBILITY)
    return()
  endif()
  if(NOT DEFINED BOOST_ROOT)
    return()
  endif()

  # make sure paths are tested even if not string identical
  get_filename_component(PATH1 ${HPX_BOOST_ROOT} ABSOLUTE)
  get_filename_component(PATH2 ${BOOST_ROOT} ABSOLUTE)

  if(NOT PATH1 STREQUAL PATH2)
    hpx_error("The specified BOOST_ROOT differs from what has been used when"
              " configuring and building HPX. Please use the same Boost "
              "versions. HPX boost is ${HPX_BOOST_ROOT} and users is ${BOOST_ROOT}. "
              "To disable this message set HPX_IGNORE_BOOST_COMPATIBILITY On."
    )
  endif()
endfunction()

function(hpx_setup_allocator)
  if(HPX_DISABLE_CUSTOM_ALLOCATOR)
    return()
  endif()
  if(DEFINED HPX_WITH_MALLOC)
    string(TOUPPER "${HPX_WITH_MALLOC}" HPX_MALLOC_UPPER)
    string(TOUPPER "${HPX_WITH_MALLOC_DEFAULT}" HPX_MALLOC_DEFAULT_UPPER)
    if(NOT HPX_MALLOC_UPPER STREQUAL HPX_MALLOC_DEFAULT_UPPER)
      hpx_error("The specified allocators do not match. This Project is configured with ${HPX_WITH_MALLOC} and HPX was configured with ${HPX_WITH_MALLOC_DEFAULT}.")
    endif()
  endif()
  set(HPX_WITH_MALLOC ${HPX_WITH_MALLOC_DEFAULT} CACHE STRING "Define which allocator should be linked in. Options are: system, tcmalloc, jemalloc, tbbmalloc, and custom (default is: tcmalloc)")
  include(HPX_SetupAllocator)
endfunction()
