//  Copyright (c) 2007-2020 Hartmut Kaiser
//  Copyright (c)      2011 Bryce Lelbach
//  Copyright (c)      2013 Adrian Serio
//
//  SPDX-License-Identifier: BSL-1.0
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// Do not edit this file! It has been generated by the cmake configuration step.

// Make HPX inspect tool happy: hpxinspect:nounnamed

#pragma once

#include <hpx/local/config.hpp>
#include <hpx/local/config/export_definitions.hpp>
#include <hpx/preprocessor/cat.hpp>

#include <boost/version.hpp>

/// Evaluates to the major version of HPX
#define HPX_LOCAL_VERSION_MAJOR @HPXLocal_VERSION_MAJOR@
/// Evaluates to the minor version of HPX
#define HPX_LOCAL_VERSION_MINOR @HPXLocal_VERSION_MINOR@
/// Evaluates to the subminor version of HPX
#define HPX_LOCAL_VERSION_SUBMINOR @HPXLocal_VERSION_SUBMINOR@

/// Evaluates to the HPX version:
/// ``HPX_LOCAL_VERSION_FULL & 0xFF0000 == HPX_LOCAL_VERSION_MAJOR``
/// ``HPX_LOCAL_VERSION_FULL & 0x00FF00 == HPX_LOCAL_VERSION_MINOR``
/// ``HPX_LOCAL_VERSION_FULL & 0x0000FF == HPX_LOCAL_VERSION_SUBMINOR``
#define HPX_LOCAL_VERSION_FULL                                                 \
    ((HPX_LOCAL_VERSION_MAJOR << 16) | (HPX_LOCAL_VERSION_MINOR << 8) |        \
        HPX_LOCAL_VERSION_SUBMINOR)

/// Evaluates to the release date of this HPX version in the format YYYYMMDD.
#define HPX_LOCAL_VERSION_DATE @HPXLocal_VERSION_DATE@

/// Evaluates to the version tag (empty for releases, ``-trunk`` on the
/// development branch, ``-rcX`` on a release candidate.
#define HPX_LOCAL_VERSION_TAG "@HPXLocal_VERSION_TAG@"

#if !defined(HPX_LOCAL_HAVE_GIT_COMMIT)
#define HPX_LOCAL_HAVE_GIT_COMMIT "unknown"
#endif

///////////////////////////////////////////////////////////////////////////////
// The version check enforces the major and minor version numbers to match for
// every compilation unit to be compiled.
#define HPX_LOCAL_CHECK_VERSION                                                \
    HPX_PP_CAT(hpx_local_check_version_,                                       \
        HPX_PP_CAT(                                                            \
            HPX_LOCAL_VERSION_MAJOR, HPX_PP_CAT(_, HPX_LOCAL_VERSION_MINOR)))  \
    /**/

// The version check enforces the major and minor version numbers to match for
// every compilation unit to be compiled.
#define HPX_LOCAL_CHECK_BOOST_VERSION                                          \
    HPX_PP_CAT(hpx_local_check_boost_version_, BOOST_VERSION)                  \
    /**/

///////////////////////////////////////////////////////////////////////////////
namespace hpx::local {
    // Helper data structures allowing to automatically detect version problems
    // between applications and the core libraries.
    HPX_LOCAL_EXPORT extern char const HPX_LOCAL_CHECK_VERSION[];
    HPX_LOCAL_EXPORT extern char const HPX_LOCAL_CHECK_BOOST_VERSION[];
}    // namespace hpx::local

///////////////////////////////////////////////////////////////////////////////
#if !defined(HPX_LOCAL_EXPORTS) && !defined(HPX_LOCAL_NO_VERSION_CHECK)

// This is instantiated for each translation unit outside of the HPX core
// library, forcing to resolve the variable HPX_LOCAL_CHECK_VERSION.
namespace {
    // Note: this function is never executed.
#if defined(__GNUG__)
    __attribute__((unused))
#endif
    char const*
    check_hpx_local_version()
    {
        char const* versions[] = {
            hpx::local::HPX_LOCAL_CHECK_VERSION, hpx::local::HPX_LOCAL_CHECK_BOOST_VERSION};
        return versions[0];
    }
}    // namespace
#endif
