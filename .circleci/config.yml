#  Copyright (c) 2017-2018 Thomas Heller
#  Copyright (c) 2015 Martin Stumpf
#
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

defaults: &defaults
    working_directory: /hpx/build
    docker:
      - image: stellargroup/build_env:ubuntu

convert_xml: &convert_xml
    name: Converting XML
    when: always
    command: |
        mkdir -p ${CIRCLE_JOB}
        xsltproc \
          /hpx/conv.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml \
          > ${CIRCLE_JOB}/Test.xml

move_core_dump: &move_core_dump
    name: Moving core dumps
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        # Ignore errors if there are no core dumps
        cp core.* ${CIRCLE_JOB} || true

move_debug_log: &move_debug_log
    name: Moving debug logs
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        cp debug-log.txt ${CIRCLE_JOB} || true

gh_pages_filter: &gh_pages_filter
    filters:
      branches:
        ignore: gh-pages
      tags:
        only: /.*/

docs_push_filter: &docs_push_filter
    filters:
      branches:
        only:
          - master
          - release
      tags:
        only: /.*/

core_dependency: &core_dependency
    requires:
      - core
    <<: *gh_pages_filter

add_github_to_known_hosts: &add_github_to_known_hosts
    run:
        name: Add Github's key(s) to known_hosts
        command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >>~/.ssh/known_hosts
configure_local_git: &configure_local_git
    run:
        name: Configure local Git
        command: |
            git config --global user.name "StellarBot"
            git config --global user.email "stellar@cct.lsu.edu"


version: 2

jobs:
  checkout_code:
    docker:
      - image: stellargroup/build_env:ubuntu
    working_directory: /hpx
    steps:
      - checkout:
          path: /hpx/source-full
      # Make a shallow clone of the current commit so that we don't have to copy
      # the whole repository between work steps.
      - run:
          name: Creating shallow clone
          command: |
              git clone --depth=1 file:///hpx/source-full source
      - run:
          name: Downloading CTest XML to Junit XML
          command: |
              curl \
                https://raw.githubusercontent.com/Kitware/CDash/master/tests/circle/conv.xsl \
                -o /hpx/conv.xsl
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./source
            - ./conv.xsl

  configure:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running CMake
          command: |
            cmake --version
            if [ -z "$CIRCLE_PR_NUMBER" ] && \
                ( [ "$CIRCLE_BRANCH" == "master" ] || \
                  [ "$CIRCLE_BRANCH" == "release" ] || \
                  [ -n "$CIRCLE_TAG" ] ); then
                DOCUMENTATION_OUTPUT_FORMATS="html;singlehtml;latexpdf"
            else
                DOCUMENTATION_OUTPUT_FORMATS="html"
            fi
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Debug \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_GIT_COMMIT=${CIRCLE_SHA1} \
                -DHPX_WITH_GIT_BRANCH="${CIRCLE_BRANCH}" \
                -DHPX_WITH_GIT_TAG="${CIRCLE_TAG}" \
                -DHPX_WITH_TOOLS=On \
                -DCMAKE_CXX_FLAGS="-fcolor-diagnostics" \
                -DHPX_WITH_TESTS_HEADERS=On \
                -DHPX_WITH_COMPILER_WARNINGS=On \
                -DHPX_WITH_COMPILER_WARNINGS_AS_ERRORS=On \
                -DHPX_WITH_DEPRECATION_WARNINGS=On \
                -DCMAKE_CXX_CLANG_TIDY=clang-tidy \
                -DHPX_WITH_THREAD_LOCAL_STORAGE=On \
                -DHPX_WITH_TESTS_DEBUG_LOG=On \
                -DHPX_WITH_TESTS_DEBUG_LOG_DESTINATION=/hpx/build/debug-log.txt \
                -DHPX_WITH_SPINLOCK_DEADLOCK_DETECTION=On \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                -DHPX_WITH_DOCUMENTATION=On \
                -DHPX_WITH_DOCUMENTATION_OUTPUT_FORMATS="${DOCUMENTATION_OUTPUT_FORMATS}"
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  configure_test_combinations:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running CMake with tests on and examples off
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_TESTS=On \
                -DHPX_WITH_EXAMPLES=Off
            rm -rf *
      - run:
          name: Running CMake with tests off and examples on
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_TESTS=Off \
                -DHPX_WITH_EXAMPLES=On
            rm -rf *
      - run:
          name: Running CMake with APEX on
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_APEX=On \
                -DHPX_WITH_TESTS=On \
                -DHPX_WITH_EXAMPLES=On
            rm -rf *
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  inspect:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Inspect Tool
          command: |
              ninja -j2 tools.inspect
      - run:
          name: Running Inspect Tool
          command: |
              ./bin/inspect --all --output=./hpx_inspect_report.html /hpx/source
      - run:
          name: Convert inspect HTML output to XML
          command: |
              mkdir -p /report
              /hpx/source/tools/inspect/inspect_to_junit.py \
                  ./hpx_inspect_report.html \
                  /report/hpx_inspect.xml
          when: always
      - store_artifacts:
          path: hpx_inspect_report.html
          destination: hpx_inspect_report.html
      - store_test_results:
          path: /report
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build/bin/inspect

  docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Sphinx Documentation
          command: |
              ninja -j1 docs
          no_output_timeout: 2h
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  docs_push:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - <<: *add_github_to_known_hosts
      - <<: *configure_local_git
      - run:
          name: Pushing Sphinx Documentation
          command: |
              ninja -j1 git_docs

  core:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Core
          command: |
              ninja -j2 core
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  tests.examples:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              # NOTE: transpose_block_numa is disabled because
              # hwloc_get_area_membind_nodeset (which is used by the
              # numa_allocator) fails with EPERM.
              ctest -T test --no-compress-output --output-on-failure \
                  -R tests.examples \
                  -E tests.examples.transpose.transpose_block_numa
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.examples
      - store_artifacts:
          path: tests.examples

  tests.unit.actions:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.actions
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.actions
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.actions
      - store_artifacts:
          path: tests.unit.actions

  tests.unit.agas:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.agas
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.agas
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.agas
      - store_artifacts:
          path: tests.unit.agas

  tests.unit.build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Installing HPX for build unit tests
          command: |
              # Disable documentation just for this step
              cmake -DHPX_WITH_DOCUMENTATION=OFF .
              ninja -j1 install
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.build
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.build
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.build
      - store_artifacts:
          path: tests.unit.build

  tests.unit.component:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.component tests.unit.components
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.component
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.component
      - store_artifacts:
          path: tests.unit.component

  tests.unit.computeapi:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.computeapi
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.computeapi
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.computeabi
      - store_artifacts:
          path: tests.unit.computeabi

  tests.unit.diagnostics:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.diagnostics
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.diagnostics
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.diagnostics
      - store_artifacts:
          path: tests.unit.diagnostics

  tests.unit.lcos:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.lcos
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.lcos
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.lcos
      - store_artifacts:
          path: tests.unit.lcos

  tests.unit.parallel.block:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.block
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.block
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.parallel.block
      - store_artifacts:
          path: tests.unit.parallel.block

  tests.unit.parallel.datapar_algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.datapar_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.datapar_algorithms
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.parallel.datapar_algorithms
      - store_artifacts:
          path: tests.unit.parallel.datapar_algorithms

  tests.unit.parallel.executors:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.executors
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.executors
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.parallel.executors
      - store_artifacts:
          path: tests.unit.parallel.executors

  tests.unit.parallel.segmented_algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          # We need to compile some tests serially because they eat too much
          # memory
          command: |
              ninja -j1 -k 0 tests.unit.parallel.segmented_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.segmented_algorithms
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.parallel.segmented_algorithms
      - store_artifacts:
          path: tests.unit.parallel.segmented_algorithms

  tests.unit.parcelset:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parcelset
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parcelset
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.parcelset
      - store_artifacts:
          path: tests.unit.parcelset

  tests.unit.performance_counter:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.performance_counter
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.performance_counter
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.performance_counter
      - store_artifacts:
          path: tests.unit.performance_counter

  tests.unit.resource:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.resource
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.resource
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.resource
      - store_artifacts:
          path: tests.unit.resource

  tests.unit.serialization:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.serialization
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.serialization
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.serialization
      - store_artifacts:
          path: tests.unit.serialization

  tests.unit.threads:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.threads
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.threads
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.threads
      - store_artifacts:
          path: tests.unit.threads

  tests.unit.topology:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.topology
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure \
                  -R tests.unit.topology \
                  -E tests.unit.topology.numa_allocator
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.topology
      - store_artifacts:
          path: tests.unit.topology

  tests.unit.traits:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.traits
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.traits
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.traits
      - store_artifacts:
          path: tests.unit.traits

  tests.unit.util:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.util
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.util
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.util
      - store_artifacts:
          path: tests.unit.util

  tests.unit.modules:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Module Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.modules.allocator_support
              ninja -j2 -k 0 tests.unit.modules.assertion
              ninja -j2 -k 0 tests.unit.modules.cache
              ninja -j2 -k 0 tests.unit.modules.collectives
              ninja -j2 -k 0 tests.unit.modules.concepts
              ninja -j2 -k 0 tests.unit.modules.config
              ninja -j2 -k 0 tests.unit.modules.datastructures
              ninja -j2 -k 0 tests.unit.modules.format
              ninja -j2 -k 0 tests.unit.modules.hardware
              ninja -j2 -k 0 tests.unit.modules.hashing
              ninja -j2 -k 0 tests.unit.modules.iterator_support
              ninja -j2 -k 0 tests.unit.modules.logging
              ninja -j2 -k 0 tests.unit.modules.preprocessor
              ninja -j2 -k 0 tests.unit.modules.statistics
              ninja -j2 -k 0 tests.unit.modules.testing
              ninja -j2 -k 0 tests.unit.modules.thread_support
              ninja -j2 -k 0 tests.unit.modules.type_support
              ninja -j2 -k 0 tests.unit.modules.util
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.allocator_support
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.assertion
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.cache
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.collectives
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.concepts
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.config
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.datastructures
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.format
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.hardware
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.hashing
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.iterator_support
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.logging
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.preprocessor
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.statistics
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.testing
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.thread_support
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.type_support
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.util
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.modules
      - store_artifacts:
          path: tests.unit.modules

  tests.unit.modules.algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.modules.algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.modules.algorithms
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit.modules.algorithms
      - store_artifacts:
          path: tests.unit.modules.algorithms

  tests.regressions:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Regressions Tests
          command: |
              ninja -j2 -k 0 tests.regressions
      - run:
          name: Running Regressions Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.regressions
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.regressions
      - store_artifacts:
          path: tests.regressions

  tests.headers:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers
      - store_artifacts:
          path: tests.headers

  tests.performance:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Performance Tests
          command: |
              ninja -j2 tests.performance

  examples:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Examples
          command: |
              ninja -j2 examples
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  install:
    docker:
      - image: stellargroup/build_env:ubuntu
    environment:
      TARGET_IMAGE_NAME: stellargroup/hpx:dev
    steps:
      - attach_workspace:
          at: /hpx
      - setup_remote_docker
      - run:
          name: Installing
          command: |
              ./bin/hello_world_distributed --hpx:bind=none
              ninja -j2 install
          working_directory: /hpx/build
          when: always
      - run:
          name: Testing installed HPX
          command: |
              hello_world_distributed --hpx:bind=none
              ldconfig
              hpxcxx --exe=hello_world_distributed_test_build ../source/examples/quickstart/hello_world_distributed.cpp -g -lhpx_iostreamsd
              ./hello_world_distributed_test_build --hpx:bind=none
              hpxrun.py -l 2 -t 1 ./hello_world_distributed_test_build -- --hpx:bind=none
          working_directory: /hpx/build
          when: always
      - run:
          name: Create Docker Image
          command: |
              cp /hpx/source/tools/docker/Dockerfile .
              VER="18.03.0-ce"
              curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
              tar -xz -C /tmp -f /tmp/docker-$VER.tgz
              mv /tmp/docker/* /usr/bin
              docker build -t ${TARGET_IMAGE_NAME} .
          working_directory: /usr/local
      - run:
          name: Test Docker Image
          command: |
              docker run ${TARGET_IMAGE_NAME} hello_world_distributed --hpx:bind=none
              docker create -v /hpx --name sources stellargroup/hpx:dev /bin/true
              docker cp ./source/examples/quickstart/hello_world_distributed.cpp sources:/hpx
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxcxx --exe=hello_world_distributed_test_build              \
                hello_world_distributed.cpp -g -lhpx_iostreamsd
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                ./hello_world_distributed_test_build --hpx:bind=none
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxrun.py -l 2 -t 2 ./hello_world_distributed_test_build -- --hpx:bind=none
          working_directory: /hpx
      - <<: *add_github_to_known_hosts
      - <<: *configure_local_git
      - run:
          name: Push Docker Image
          command: |
              if [[ -z "$CIRCLE_PR_NUMBER" ]] && [[ "$CIRCLE_BRANCH" == "master" ]]; then
                  docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                  docker push ${TARGET_IMAGE_NAME}
                  # Tag the commmit
                  cd /hpx/source
                  git remote set-url origin git@github.com:STEllAR-GROUP/hpx.git
                  git tag -f stable
                  ##########################################################
                  # NOTE: Dependency on the Docker push is so that users who
                  # use the Docker image would not be confused. Do not change
                  # the order before considering every use case.
                  ##########################################################
                  # Remove the old tag
                  git push origin :refs/tags/stable
                  # Push the new stable commit tag
                  git push origin stable
              else
                  echo "Not on the master branch. the image will not be pushed and the commit will not be tagged."
              fi

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout_code:
          <<: *gh_pages_filter
      - configure:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - configure_test_combinations:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - inspect:
          requires:
            - configure
          <<: *gh_pages_filter
      - docs:
          requires:
            - configure
            # Force docs to be built after examples so that workspace doesn't
            # have conflicts
            - examples
          <<: *gh_pages_filter
      - docs_push:
          requires:
            - docs
          <<: *docs_push_filter
      - core:
          requires:
            - configure
          <<: *gh_pages_filter
      - tests.examples:
          requires:
            - examples
          <<: *gh_pages_filter
      - tests.unit.actions:
          <<: *core_dependency
      - tests.unit.agas:
          <<: *core_dependency
      - tests.unit.component:
          <<: *core_dependency
      - tests.unit.computeapi:
          <<: *core_dependency
      - tests.unit.diagnostics:
          <<: *core_dependency
      - tests.unit.lcos:
          <<: *core_dependency
      - tests.unit.parallel.block:
          <<: *core_dependency
      - tests.unit.parallel.datapar_algorithms:
          <<: *core_dependency
      - tests.unit.parallel.executors:
          <<: *core_dependency
      - tests.unit.parallel.segmented_algorithms:
          <<: *core_dependency
      - tests.unit.parcelset:
          <<: *core_dependency
      - tests.unit.performance_counter:
          <<: *core_dependency
      - tests.unit.resource:
          <<: *core_dependency
      - tests.unit.serialization:
          <<: *core_dependency
      - tests.unit.threads:
          <<: *core_dependency
      - tests.unit.topology:
          <<: *core_dependency
      - tests.unit.traits:
          <<: *core_dependency
      - tests.unit.util:
          <<: *core_dependency
      - tests.unit.modules:
          <<: *core_dependency
      - tests.unit.modules.algorithms:
          <<: *core_dependency
      - tests.regressions:
          <<: *core_dependency
      - tests.performance:
          <<: *core_dependency
      - tests.headers:
          <<: *core_dependency
      - examples:
          <<: *core_dependency
      - tests.unit.build:
          requires:
            - examples
            - core
          <<: *gh_pages_filter
      - install:
          requires:
            - inspect
            - core
            - docs
            - tests.examples
            - tests.unit.actions
            - tests.unit.agas
            - tests.unit.build
            - tests.unit.component
            - tests.unit.computeapi
            - tests.unit.diagnostics
            - tests.unit.lcos
            - tests.unit.parallel.block
            - tests.unit.parallel.datapar_algorithms
            - tests.unit.parallel.executors
            - tests.unit.parallel.segmented_algorithms
            - tests.unit.parcelset
            - tests.unit.performance_counter
            - tests.unit.resource
            - tests.unit.serialization
            - tests.unit.threads
            - tests.unit.topology
            - tests.unit.traits
            - tests.unit.util
            - tests.unit.modules
            - tests.headers
            - tests.performance
            - tests.regressions
            - examples
          <<: *gh_pages_filter
