#  Copyright (c) 2017-2018 Thomas Heller
#  Copyright (c) 2015 Martin Stumpf
#
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

defaults: &defaults
    working_directory: /hpx/build
    docker:
      - image: stellargroup/build_env:ubuntu

convert_xml: &convert_xml
    name: Converting XML
    when: always
    command: |
        mkdir ${CIRCLE_JOB}
        xsltproc \
          /hpx/conv.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml \
          > ${CIRCLE_JOB}/Test.xml

gh_pages_filter: &gh_pages_filter
    filters:
      branches:
        ignore: gh-pages
      tags:
        only: /.*/

docs_push_filter: &docs_push_filter
    filters:
      branches:
        only:
          - master
          - release
      tags:
        only: /.*/

core_dependency: &core_dependency
    requires:
      - core
    <<: *gh_pages_filter

version: 2

jobs:
  checkout_code:
    docker:
      - image: stellargroup/build_env:ubuntu
    working_directory: /hpx
    steps:
      - checkout:
          path: /hpx/source-full
      # Make a shallow clone of the current commit so that we don't have to copy
      # the whole repository between work steps.
      - run:
          name: Creating shallow clone
          command: |
              git clone --depth=1 file:///hpx/source-full source
      - run:
          name: Downloading CTest XML to Junit XML
          command: |
              curl \
                https://raw.githubusercontent.com/Kitware/CDash/master/tests/circle/conv.xsl \
                -o /hpx/conv.xsl
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./source
            - ./conv.xsl

  configure:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running CMake
          command: |
            cmake --version
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Debug \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_GIT_COMMIT=${CIRCLE_SHA1} \
                -DHPX_WITH_GIT_BRANCH="${CIRCLE_BRANCH}" \
                -DHPX_WITH_GIT_TAG="${CIRCLE_TAG}" \
                -DHPX_WITH_TOOLS=On \
                -DCMAKE_CXX_FLAGS="-fcolor-diagnostics" \
                -DHPX_WITH_TESTS_HEADERS=On \
                -DHPX_WITH_DEPRECATION_WARNINGS=Off \
                -DHPX_WITH_THREAD_LOCAL_STORAGE=On \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                -DHPX_WITH_DOCUMENTATION=On
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  clang_tidy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running clang-tidy
          command: |
              /hpx/source/tools/clang-tidy.sh -diff-master

  inspect:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Inspect Tool
          command: |
              ninja -j2 tools.inspect
      - run:
          name: Running Inspect Tool
          command: |
              ./bin/inspect --all --output=./hpx_inspect_report.html /hpx/source
      - run:
          name: Convert inspect HTML output to XML
          command: |
              mkdir -p /report
              /hpx/source/tools/inspect/inspect_to_junit.py \
                  ./hpx_inspect_report.html \
                  /report/hpx_inspect.xml
          when: always
      - store_artifacts:
          path: hpx_inspect_report.html
          destination: hpx_inspect_report.html
      - store_test_results:
          path: /report
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build/bin/inspect

  docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Sphinx Documentation
          command: |
              ninja docs
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  docs_push:
    <<: *defaults
    environment:
      # This is the public key of GitHub. If it changes it needs to be changed
      # manually here. It can be retrieved with ssh-keyscan -H github.com.
      GITHUB_PUBLIC_KEY: "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Pushing Sphinx Documentation
          command: |
              mkdir -p ~/.ssh
              echo $GITHUB_PUBLIC_KEY >> ~/.ssh/known_hosts
              git config --global user.name "StellarBot"
              git config --global user.email "stellar@cct.lsu.edu"
              ninja git_docs

  core:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Core
          command: |
              ninja -j2 core
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  tests.examples:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.examples
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.examples
      - store_artifacts:
          path: tests.examples

  tests.unit.actions:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.actions
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.actions
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.actions
      - store_artifacts:
          path: tests.unit.actions

  tests.unit.agas:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.agas
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.agas
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.agas
      - store_artifacts:
          path: tests.unit.agas

  tests.unit.build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.build
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.build
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.build
      - store_artifacts:
          path: tests.unit.build

  tests.unit.component:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.component
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.component
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.component
      - store_artifacts:
          path: tests.unit.component

  tests.unit.computeapi:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.computeapi
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.computeapi
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.computeabi
      - store_artifacts:
          path: tests.unit.computeabi

  tests.unit.diagnostics:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.diagnostics
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.diagnostics
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.diagnostics
      - store_artifacts:
          path: tests.unit.diagnostics

  tests.unit.lcos:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.lcos
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.lcos
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.lcos
      - store_artifacts:
          path: tests.unit.lcos

  tests.unit.parallel.algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.algorithms
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.algorithms
      - store_artifacts:
          path: tests.unit.parallel.algorithms

  tests.unit.parallel.block:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.block
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.block
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.block
      - store_artifacts:
          path: tests.unit.parallel.block

  tests.unit.parallel.container_algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.container_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.container_algorithms
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.container_algorithms
      - store_artifacts:
          path: tests.unit.parallel.container_algorithms

  tests.unit.parallel.datapar_algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.datapar_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.datapar_algorithms
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.datapar_algorithms
      - store_artifacts:
          path: tests.unit.parallel.datapar_algorithms

  tests.unit.parallel.executors:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parallel.executors
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.executors
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.executors
      - store_artifacts:
          path: tests.unit.parallel.executors

  tests.unit.parallel.segmented_algorithms:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          # We need to compile some tests serially because they eat too much
          # memory
          command: |
              ninja -j1 -k 0 tests.unit.parallel.segmented_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parallel.segmented_algorithms
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parallel.segmented_algorithms
      - store_artifacts:
          path: tests.unit.parallel.segmented_algorithms

  tests.unit.parcelset:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.parcelset
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.parcelset
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.parcelset
      - store_artifacts:
          path: tests.unit.parcelset

  tests.unit.performance_counter:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.performance_counter
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.performance_counter
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.performance_counter
      - store_artifacts:
          path: tests.unit.performance_counter

  tests.unit.resource:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.resource
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.resource
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.resource
      - store_artifacts:
          path: tests.unit.resource

  tests.unit.serialization:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.serialization
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.serialization
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.serialization
      - store_artifacts:
          path: tests.unit.serialization

  tests.unit.threads:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.threads
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.threads
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.threads
      - store_artifacts:
          path: tests.unit.threads

  tests.unit.traits:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.traits
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.traits
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.traits
      - store_artifacts:
          path: tests.unit.traits

  tests.unit.util:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit.util
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.unit.util
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.unit.util
      - store_artifacts:
          path: tests.unit.util

  tests.regressions:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Regressions Tests
          command: |
              ninja -j2 -k 0 tests.regressions
      - run:
          name: Running Regressions Tests
          when: always
          command: |
              ctest -T test --no-compress-output --output-on-failure -R tests.regressions
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.regressions
      - store_artifacts:
          path: tests.regressions

  tests.headers.compat:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.compat
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.compat
      - store_artifacts:
          path: tests.headers.compat

  tests.headers.components:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.components
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.components
      - store_artifacts:
          path: tests.headers.components

  tests.headers.compute:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.compute
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.compute
      - store_artifacts:
          path: tests.headers.compute

  tests.headers.config:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.config
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.config
      - store_artifacts:
          path: tests.headers.config

  tests.headers.include:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.include
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.include
      - store_artifacts:
          path: tests.headers.include

  tests.headers.lcos:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.lcos
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.lcos
      - store_artifacts:
          path: tests.headers.lcos

  tests.headers.parallel:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.parallel
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.parallel
      - store_artifacts:
          path: tests.headers.parallel

  tests.headers.performance_counters:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.performance_counters
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.performance_counters
      - store_artifacts:
          path: tests.headers.performance_counters

  tests.headers.plugins:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.plugins
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.plugins
      - store_artifacts:
          path: tests.headers.plugins

  tests.headers.runtime:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.runtime
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.runtime
      - store_artifacts:
          path: tests.headers.runtime

  tests.headers.traits:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.traits
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.traits
      - store_artifacts:
          path: tests.headers.traits

  tests.headers.util:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest -j2 -T test --no-compress-output --output-on-failure -R tests.headers.headers.util
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers.util
      - store_artifacts:
          path: tests.headers.util

  tests.performance:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Performance Tests
          command: |
              ninja -j2 tests.performance

  examples:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Examples
          command: |
              ninja -j2 examples
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  install:
    docker:
      - image: stellargroup/build_env:ubuntu
    environment:
      TARGET_IMAGE_NAME: stellargroup/hpx:dev
    steps:
      - attach_workspace:
          at: /hpx
      - setup_remote_docker
      - run:
          name: Installing
          command: |
              ./bin/hello_world --hpx:bind=none
              ninja -j2 install
              hello_world --hpx:bind=none
              ldconfig
              hpxcxx --exe=hello_world_test_build ../source/examples/quickstart/hello_world.cpp -g -lhpx_iostreamsd
              ./hello_world_test_build --hpx:bind=none
              hpxrun.py -l 2 -t 1 ./hello_world_test_build -- --hpx:bind=none
          working_directory: /hpx/build
          when: always
      - run:
          name: Create Docker Image
          command: |
              cp /hpx/source/tools/docker/Dockerfile .
              VER="18.03.0-ce"
              curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
              tar -xz -C /tmp -f /tmp/docker-$VER.tgz
              mv /tmp/docker/* /usr/bin
              docker build -t ${TARGET_IMAGE_NAME} .
          working_directory: /usr/local
      - run:
          name: Test Docker Image
          command: |
              docker run ${TARGET_IMAGE_NAME} hello_world --hpx:bind=none
              docker create -v /hpx --name sources stellargroup/hpx:dev /bin/true
              docker cp ./source/examples/quickstart/hello_world.cpp sources:/hpx
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxcxx --exe=hello_world_test_build                          \
                hello_world.cpp -g -lhpx_iostreamsd
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                ./hello_world_test_build --hpx:bind=none
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxrun.py -l 2 -t 2 ./hello_world_test_build -- --hpx:bind=none
          working_directory: /hpx
      - run:
          name: Push Docker Image
          command: |
              if [ -z "$CIRCLE_PR_NUMBER" ] && [ "$CIRCLE_BRANCH" == "master" ]; then
                  docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                  docker push ${TARGET_IMAGE_NAME}
              else
                  echo "Skipping docker push on non-master branch"
              fi

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout_code:
          <<: *gh_pages_filter
      - configure:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - clang_tidy:
          requires:
            - configure
          <<: *gh_pages_filter
      - inspect:
          requires:
            - configure
          <<: *gh_pages_filter
      - docs:
          requires:
            - configure
            # Force docs to be built after examples so that workspace doesn't
            # have conflicts
            - examples
          <<: *gh_pages_filter
      - docs_push:
          requires:
            - docs
          <<: *docs_push_filter
      - core:
          requires:
            - configure
          <<: *gh_pages_filter
      - tests.examples:
          requires:
            - examples
          <<: *gh_pages_filter
      - tests.unit.actions:
          <<: *core_dependency
      - tests.unit.agas:
          <<: *core_dependency
      - tests.unit.build:
          <<: *core_dependency
      - tests.unit.component:
          <<: *core_dependency
      - tests.unit.computeapi:
          <<: *core_dependency
      - tests.unit.diagnostics:
          <<: *core_dependency
      - tests.unit.lcos:
          <<: *core_dependency
      - tests.unit.parallel.algorithms:
          <<: *core_dependency
      - tests.unit.parallel.block:
          <<: *core_dependency
      - tests.unit.parallel.container_algorithms:
          <<: *core_dependency
      - tests.unit.parallel.datapar_algorithms:
          <<: *core_dependency
      - tests.unit.parallel.executors:
          <<: *core_dependency
      - tests.unit.parallel.segmented_algorithms:
          <<: *core_dependency
      - tests.unit.parcelset:
          <<: *core_dependency
      - tests.unit.performance_counter:
          <<: *core_dependency
      - tests.unit.resource:
          <<: *core_dependency
      - tests.unit.serialization:
          <<: *core_dependency
      - tests.unit.threads:
          <<: *core_dependency
      - tests.unit.traits:
          <<: *core_dependency
      - tests.unit.util:
          <<: *core_dependency
      - tests.regressions:
          <<: *core_dependency
      - tests.performance:
          <<: *core_dependency
      - tests.headers.compat:
          <<: *core_dependency
      - tests.headers.components:
          <<: *core_dependency
      - tests.headers.compute:
          <<: *core_dependency
      - tests.headers.config:
          <<: *core_dependency
      - tests.headers.include:
          <<: *core_dependency
      - tests.headers.lcos:
          <<: *core_dependency
      - tests.headers.parallel:
          <<: *core_dependency
      - tests.headers.performance_counters:
          <<: *core_dependency
      - tests.headers.plugins:
          <<: *core_dependency
      - tests.headers.runtime:
          <<: *core_dependency
      - tests.headers.traits:
          <<: *core_dependency
      - tests.headers.util:
          <<: *core_dependency
      - examples:
          <<: *core_dependency
      - install:
          requires:
            - inspect
            - clang_tidy
            - core
            - docs
            - tests.examples
            - tests.unit.actions
            - tests.unit.agas
            - tests.unit.build
            - tests.unit.component
            - tests.unit.computeapi
            - tests.unit.diagnostics
            - tests.unit.lcos
            - tests.unit.parallel.algorithms
            - tests.unit.parallel.block
            - tests.unit.parallel.container_algorithms
            - tests.unit.parallel.datapar_algorithms
            - tests.unit.parallel.executors
            - tests.unit.parallel.segmented_algorithms
            - tests.unit.parcelset
            - tests.unit.performance_counter
            - tests.unit.resource
            - tests.unit.serialization
            - tests.unit.threads
            - tests.unit.traits
            - tests.unit.util
            - tests.headers.compat
            - tests.headers.components
            - tests.headers.compute
            - tests.headers.config
            - tests.headers.include
            - tests.headers.lcos
            - tests.headers.parallel
            - tests.headers.performance_counters
            - tests.headers.plugins
            - tests.headers.runtime
            - tests.headers.traits
            - tests.headers.util
            - tests.performance
            - tests.regressions
            - examples
          <<: *gh_pages_filter
