#  Copyright (c) 2017-2018 Thomas Heller
#  Copyright (c) 2015 Martin Stumpf
#
#  SPDX-License-Identifier: BSL-1.0
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

working_dir_default: &working_dir_default
    working_directory: /hpx/build

docker_default: &docker_default
    docker:
      - image: stellargroup/build_env:4

defaults: &defaults
    <<: *working_dir_default
    <<: *docker_default

convert_xml: &convert_xml
    name: Converting XML
    when: always
    command: |
        mkdir -p ${CIRCLE_JOB}
        xsltproc \
          /hpx/conv.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml \
          > ${CIRCLE_JOB}/Test.xml

move_core_dump: &move_core_dump
    name: Moving core dumps
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        # Ignore errors if there are no core dumps
        cp core.* ${CIRCLE_JOB} || true

move_debug_log: &move_debug_log
    name: Moving debug logs
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        cp debug-log.txt ${CIRCLE_JOB} || true

gh_pages_filter: &gh_pages_filter
    filters:
      branches:
        ignore: gh-pages
      tags:
        ignore: stable

docs_push_filter: &docs_push_filter
    filters:
      branches:
        only:
          - master
          - release
      tags:
        ignore: stable

core_dependency: &core_dependency
    requires:
      - core
    <<: *gh_pages_filter

add_github_to_known_hosts: &add_github_to_known_hosts
    run:
        name: Add Github's key(s) to known_hosts
        command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >>~/.ssh/known_hosts
configure_local_git: &configure_local_git
    run:
        name: Configure local Git
        command: |
            git config --global user.name "StellarBot"
            git config --global user.email "stellar@cct.lsu.edu"


version: 2

jobs:
  checkout_code:
    <<: *docker_default
    working_directory: /hpx
    steps:
      - checkout:
          path: /hpx/source-full
      # Make a shallow clone of the current commit so that we don't have to copy
      # the whole repository between work steps.
      - run:
          name: Creating shallow clone
          command: |
              git clone --depth=1 file:///hpx/source-full source
      - run:
          name: Downloading CTest XML to Junit XML
          command: |
              curl \
                https://raw.githubusercontent.com/Kitware/CDash/master/app/cdash/tests/circle/conv.xsl \
                --fail \
                -o /hpx/conv.xsl
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./source
            - ./conv.xsl

  # Check circular dependencies with cpp-dependencies tool
  check_circular_deps:
    <<: *working_dir_default
    <<: *docker_default
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Check circular dependencies with cpp-dependencies
          command: |
              # Ignore compatibility headers (the last cut -c3- is to remove a
              # leading ./ in path names)
              cpp-dependencies \
                  --dir /hpx/source/libs \
                  --ignore $(find /hpx/source/libs -type d -wholename '*/include_compatibility' | cut -d'/' -f5-) \
                  --graph-cycles /tmp/circular_deps.dot
              dot /tmp/circular_deps.dot -Tsvg -o /tmp/circular_deps.svg
              if [[ $(wc -l /tmp/circular_deps.dot | awk '{print $1}') -gt 2 ]]; then exit 1; fi
      - store_artifacts:
          path: /tmp/circular_deps.dot
          destination: /hpx/artifacts/circular_deps.dot
      - store_artifacts:
          path: /tmp/circular_deps.svg
          destination: /hpx/artifacts/circular_deps.svg

  # Check if the files of the module are listed in the CMakeLists.txt
  # Check if all the module dependencies are listed
  check_module_cmakelists:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Check if the headers of the modules are listed in their CMakeLists.txt
          command: |
              /hpx/source/tools/check_module_cmakelists.sh
              if [[ $(wc -l /tmp/missing_files.txt | awk '{print $1}') -gt 1 ]] \
                  || [[ $(wc -l /tmp/missing_deps.txt | awk '{print $1}') -gt 1 ]]; \
                  then exit 1; fi
      - store_artifacts:
          path: /tmp/missing_files.txt
          destination: /hpx/artifacts/missing_files.txt
      - store_artifacts:
          path: /tmp/missing_deps.txt
          destination: /hpx/artifacts/missing_deps.txt

  # Ensure that the modules stay clang-formatted
  clang_format:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Check that the modules are well clang-formatted
          command: |
              cd /hpx/source/libs && shopt -s globstar # to activate the ** globbing
              clang-format-9 --version
              clang-format-9 -i **/*.{cpp,hpp}
              git diff --exit-code > /tmp/modified_clang_format_files.txt
      - store_artifacts:
          path: /tmp/modified_clang_format_files.txt
          destination: /hpx/artifacts/modified_clang_format_files.txt

  # Ensure that CMake files stay cmake-formatted
  cmake_format:
    <<: *docker_default
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Check that CMake files are well cmake-formatted
          command: |
              cd /hpx/source && shopt -s globstar # to activate the ** globbing
              cmake-format --version
              cmake-format -i **/*.cmake **/CMakeLists.txt
              git diff --exit-code > /tmp/modified_cmake_format_files.txt
      - store_artifacts:
          path: /tmp/modified_cmake_format_files.txt
          destination: /hpx/artifacts/modified_cmake_format_files.txt

  configure:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running CMake
          command: |
            cmake --version
            if [ -z "$CIRCLE_PR_NUMBER" ] && \
                ( [ "$CIRCLE_BRANCH" == "master" ] || \
                  [ "$CIRCLE_BRANCH" == "release" ] || \
                  [ -n "$CIRCLE_TAG" ] ); then
                DOCUMENTATION_OUTPUT_FORMATS="html;singlehtml;latexpdf"
            else
                DOCUMENTATION_OUTPUT_FORMATS="html"
            fi
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Debug \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_DATAPAR_VC=On \
                -DHPX_WITH_GIT_COMMIT=${CIRCLE_SHA1} \
                -DHPX_WITH_GIT_BRANCH="${CIRCLE_BRANCH}" \
                -DHPX_WITH_GIT_TAG="${CIRCLE_TAG}" \
                -DHPX_WITH_TOOLS=On \
                -DCMAKE_CXX_FLAGS="-fcolor-diagnostics" \
                -DHPX_WITH_TESTS_HEADERS=On \
                -DHPX_WITH_COMPILER_WARNINGS=On \
                -DHPX_WITH_COMPILER_WARNINGS_AS_ERRORS=On \
                -DHPX_WITH_DEPRECATION_WARNINGS=On \
                -DCMAKE_CXX_CLANG_TIDY=clang-tidy \
                -DHPX_WITH_THREAD_LOCAL_STORAGE=On \
                -DHPX_WITH_STACKTRACES_STATIC_SYMBOLS=On \
                -DHPX_WITH_STACKTRACES_DEMANGLE_SYMBOLS=Off \
                -DHPX_WITH_TESTS_DEBUG_LOG=On \
                -DHPX_WITH_TESTS_DEBUG_LOG_DESTINATION=/hpx/build/debug-log.txt \
                -DHPX_WITH_SPINLOCK_DEADLOCK_DETECTION=On \
                -DHPX_WITH_CHECK_MODULE_DEPENDENCIES=On \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                -DHPX_WITH_DOCUMENTATION=On \
                -DHPX_WITH_DOCUMENTATION_OUTPUT_FORMATS="${DOCUMENTATION_OUTPUT_FORMATS}"
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  configure_test_combinations:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Running CMake with tests on and examples off
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_TESTS=On \
                -DHPX_WITH_EXAMPLES=Off
            rm -rf *
      - run:
          name: Running CMake with tests off and examples on
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_TESTS=Off \
                -DHPX_WITH_EXAMPLES=On
            rm -rf *
      - run:
          name: Running CMake with APEX on
          command: |
            cmake \
                /hpx/source \
                -G "Ninja" \
                -DHPX_WITH_MALLOC=system \
                -DHPX_WITH_APEX=On \
                -DHPX_WITH_TESTS=On \
                -DHPX_WITH_EXAMPLES=On
            rm -rf *
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  inspect:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Inspect Tool
          command: |
              ninja -j2 tools.inspect
      - run:
          name: Running Inspect Tool
          command: |
              ./bin/inspect --all --output=./hpx_inspect_report.html /hpx/source
      - run:
          name: Convert inspect HTML output to XML
          command: |
              mkdir -p /report
              /hpx/source/tools/inspect/inspect_to_junit.py \
                  ./hpx_inspect_report.html \
                  /report/hpx_inspect.xml
          when: always
      - store_artifacts:
          path: hpx_inspect_report.html
          destination: hpx_inspect_report.html
      - store_test_results:
          path: /report
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build/bin/inspect

  # We need a full clone here to be able to compare to master.
  spellcheck:
    <<: *defaults
    steps:
      - checkout:
          path: /hpx/source
      - run:
          name: Running codespell
          command: |
              if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
                  cd /hpx/source
                  codespell --version
                  codespell --ignore-words tools/.codespell_whitelist --skip='*.h5,*.png' $(git diff --name-only origin/master...) > /tmp/spelling_suggestions.txt
                  if [ -s /tmp/spelling_suggestions.txt ]; then exit 1; fi
              else
                  echo "skipping spellcheck on non-PR build"
              fi
          when: always
      - store_artifacts:
          path: /tmp/spelling_suggestions.txt
          destination: /hpx/artifacts/spelling_suggestions.txt

  docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Sphinx Documentation
          command: |
              ninja -j1 docs
          no_output_timeout: 2h
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  docs_push:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - <<: *add_github_to_known_hosts
      - <<: *configure_local_git
      - run:
          name: Pushing Sphinx Documentation
          command: |
              ninja -j1 git_docs

  core:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Core
          command: |
              ninja -j2 -k 0 core
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  tests.examples:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Examples
          command: |
              ninja -j2 -k 0 examples
      - run:
          name: Running Example Tests
          when: always
          command: |
              ulimit -c unlimited
              # NOTE: transpose_block_numa is disabled because
              # hwloc_get_area_membind_nodeset (which is used by the
              # numa_allocator) fails with EPERM.
              ctest --timeout 60 -T test --no-compress-output --output-on-failure \
                  -R tests.examples \
                  -E tests.examples.transpose.transpose_block_numa
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.examples
      - store_artifacts:
          path: tests.examples
      - persist_to_workspace:
          root: /hpx
          paths:
            - ./build

  tests.unit:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Unit Tests
          command: |
              ninja -j2 -k 0 tests.unit
              ninja -j1 -k 0 tests.unit.modules.segmented_algorithms
      - run:
          name: Running Unit Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest \
                --timeout 120 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                --tests-regex tests.unit \
                --exclude-regex \
              "tests.unit.modules.segmented_algorithms|\
              tests.unit.modules.compute.numa_allocator|\
              tests.unit.modules.resource_partitioner.scheduler_binding_check"
              ctest \
                --timeout 120 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                --tests-regex tests.unit.modules.segmented_algorithms
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit
      - store_artifacts:
          path: tests.unit

      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit2
      - store_artifacts:
          path: tests.unit2

  tests.regressions:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Regressions Tests
          command: |
              ninja -j2 -k 0 tests.regressions
      - run:
          name: Running Regressions Tests
          when: always
          command: |
              ctest --timeout 60 -T test --no-compress-output --output-on-failure -R tests.regressions
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.regressions
      - store_artifacts:
          path: tests.regressions

  tests.headers:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Header Tests
          command: |
              ctest --timeout 60 -j1 -T test --no-compress-output --output-on-failure -R tests.headers
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers
      - store_artifacts:
          path: tests.headers

  tests.performance:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /hpx
      - run:
          name: Building Performance Tests
          command: |
              ninja -j2 -k 0 tests.performance

  install:
    <<: *docker_default
    environment:
      TARGET_IMAGE_NAME: stellargroup/hpx:dev
    steps:
      - attach_workspace:
          at: /hpx
      - setup_remote_docker
      - run:
          name: Installing
          command: |
              ./bin/hello_world_distributed --hpx:bind=none
              ninja -j2 install
          working_directory: /hpx/build
          when: always
          no_output_timeout: 30m
      - run:
          name: Testing build unit tests
          command: |
              ninja -j2 tests.unit.build
          working_directory: /hpx/build
          when: always
      - run:
          name: Testing installed HPX
          command: |
              hello_world_distributed --hpx:bind=none
              ldconfig
              hpxcxx --exe=hello_world_distributed_test_build ../source/examples/quickstart/hello_world_distributed.cpp -g -lhpx_iostreamsd
              ./hello_world_distributed_test_build --hpx:bind=none
              hpxrun.py -l 2 -t 1 ./hello_world_distributed_test_build -- --hpx:bind=none
          working_directory: /hpx/build
          when: always
      - run:
          name: Create Docker Image
          command: |
              cp /hpx/source/tools/docker/Dockerfile .
              VER="18.03.0-ce"
              curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
              tar -xz -C /tmp -f /tmp/docker-$VER.tgz
              mv /tmp/docker/* /usr/bin
              docker build -t ${TARGET_IMAGE_NAME} .
          working_directory: /usr/local
      - run:
          name: Test Docker Image
          command: |
              docker run ${TARGET_IMAGE_NAME} hello_world_distributed --hpx:bind=none
              docker create -v /hpx --name sources stellargroup/hpx:dev /bin/true
              docker cp ./source/examples/quickstart/hello_world_distributed.cpp sources:/hpx
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxcxx --exe=hello_world_distributed_test_build              \
                hello_world_distributed.cpp -g -lhpx_iostreamsd
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                ./hello_world_distributed_test_build --hpx:bind=none
              docker run --volumes-from sources -w /hpx ${TARGET_IMAGE_NAME} \
                hpxrun.py -l 2 -t 2 ./hello_world_distributed_test_build -- --hpx:bind=none
          working_directory: /hpx
      - <<: *add_github_to_known_hosts
      - <<: *configure_local_git
      - run:
          name: Push Docker Image
          command: |
              if [[ -z "$CIRCLE_PR_NUMBER" ]] && [[ "$CIRCLE_BRANCH" == "master" ]]; then
                  docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                  docker push ${TARGET_IMAGE_NAME}
              else
                  echo "Not on the master branch. The docker image will not be pushed."
              fi

  # This is the final step once everything else passes. We need a full clone
  # here again to be able to push the new tag.
  push_stable_tag:
    <<: *docker_default
    steps:
      - checkout:
          path: /hpx/source
      - <<: *add_github_to_known_hosts
      - <<: *configure_local_git
      - run:
          name: Push stable tag
          command: |
              if [[ -z "$CIRCLE_PR_NUMBER" ]] && [[ "$CIRCLE_BRANCH" == "master" ]]; then
                  # Tag the commit
                  cd /hpx/source
                  git tag -f stable
                  ##########################################################
                  # NOTE: Dependency on the Docker push is so that users who
                  # use the Docker image would not be confused. Do not change
                  # the order before considering every use case.
                  ##########################################################
                  # Remove the old tag
                  git push origin :refs/tags/stable
                  # Push the new stable commit tag
                  git push origin stable
              else
                  echo "Not on the master branch. The commit will not be tagged."
              fi

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout_code:
          <<: *gh_pages_filter
      - check_circular_deps:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - check_module_cmakelists:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - clang_format:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - cmake_format:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - configure:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - configure_test_combinations:
          requires:
            - checkout_code
          <<: *gh_pages_filter
      - inspect:
          requires:
            - configure
          <<: *gh_pages_filter
      - spellcheck:
          <<: *gh_pages_filter
      - core:
          requires:
            - configure
          <<: *gh_pages_filter
      - tests.examples:
          <<: *core_dependency
      - tests.unit:
          <<: *core_dependency
      - tests.regressions:
          <<: *core_dependency
      - tests.performance:
          <<: *core_dependency
      - tests.headers:
          <<: *core_dependency
      - docs:
          requires:
            - configure
            # Force docs to be built after examples so that workspace doesn't
            # have conflicts
            - tests.examples
          <<: *gh_pages_filter
      - docs_push:
          requires:
            - docs
          <<: *docs_push_filter
      - install:
          requires:
            - core
            - tests.examples
            - tests.unit
            - tests.regressions
            - tests.performance
            - tests.headers
          <<: *gh_pages_filter
      - push_stable_tag:
          requires:
            - install
          <<: *gh_pages_filter
