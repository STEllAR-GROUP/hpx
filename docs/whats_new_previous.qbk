[/==============================================================================
    Copyright (C) 2007-2017 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:hpx_previous Previous __hpx__ Releases]

[//////////////////////////////////////////////////////////////////////////////]
[section:hpx_1_0_0 __hpx__ V1.0 (Apr 24, 2017)]

[heading General Changes]

Here are some of the main highlights and changes for this release (in no
particular order):

* Added the facility `hpx::split_future` which allows to convert a
  `future<tuple<Ts...>>` into a `tuple<future<Ts>...>`. This functionality is
  not available when compiling __hpx__ with VS2012.
* Added a new type of performance counter which allows to return a list of
  values for each invocation. We also added a first counter of this type which
  collects a histogram of the times between parcels being created.
* Added new LCOs: `hpx::lcos::channel` and `hpx::lcos::local::channel` which
  are very similar to the well known channel constructs used in the Go language.
* Added new performance counters reporting the amount of data handled by the
  networking layer on a action-by-action basis (please see [pr 2289] for more
  details).
* Added a new facility `hpx::lcos::barrier`, replacing the equally named older
  one. The new facility has a slightly changed API and is much more efficient.
  Most notable, the new facility exposes a (global) function
  `hpx::lcos::barrier::synchronize()` which represents a global barrier across
  all localities.
* We have started to add support for vectorization to our parallel algorithm
  implementations. This support depends on using an external library, currently
  either __vc__ or __boost_simd__. Please see [issue 2333] for a list of
  currently supported algorithms. This is an experimental feature and its
  implementation and/or API might change in the future. Please see this
  [@http://stellar-group.org/2016/09/vectorized-cpp-parallel-algorithms-with-hpx/ blog-post]
  for more information.
* The parameter sequence for the `hpx::parallel::transform_reduce` overload
  taking one iterator range has changed to match the changes this algorithm has
  undergone while being moved to C++17. The old overload can be still enabled
  at configure time by specifying `-DHPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY=On`
  to __cmake__.
* The algorithm `hpx::parallel::inner_product` has been renamed to
  `hpx::parallel::transform_reduce` to match the changes this algorithm has
  undergone while being moved to C++17. The old inner_product names can be
  still enabled at configure time by specifying
  `-DHPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY=On` to __cmake__.
* Added versions of `hpx::get_ptr` taking client side representations for
  component instances as their parameter (instead of a global id).
* Added the helper utility `hpx::performance_counters::performance_counter_set`
  helping to encapsulate a set of performance counters to be managed concurrently.
* All execution policies and related classes have been renamed to be consistent
  with the naming changes applied for C++17. All policies now live in the
  namespace `hpx::parallel::execution`. The ols names can be still enabled
  at configure time by specifying `-DHPX_WITH_EXECUTION_POLICY_COMPATIBILITY=On`
  to __cmake__.
* The thread scheduling subsystem has undergone a major refactoring which results
  in significant performance improvements. We have also imroved the performance
  of creating `hpx::future` and of various facilities handling those.
* We have consolidated all of the code in HPX.Compute related to the integration
  of CUDA. `hpx::partitioned_vector` has been enabled to be usable with
  `hpx::compute::vector` which allows to place the partitions on one or more
  GPU devices.
* Added new performance counters exposing various internals of the thread
  scheduling subsystem, such as the current idle- and busy-loop counters and
  instantaneous scheduler utilization.
* Extended and improved the use of the ITTNotify hooks allowing to collect
  performance counter data and function annotation information from within the
  Intel Amplifier tool.

[heading Breaking Changes]

* We have dropped support for the gcc compiler versions V4.6 and 4.7. The
  minimal gcc version we now test on is gcc V4.8.
* We have removed (default) support for `boost::chrono` in interfaces, uses of
  it have been replaced with `std::chrono`. This facility can be still enabled
  at configure time by specifying `-DHPX_WITH_BOOST_CHRONO_COMPATIBILITY=On`
  to __cmake__.
* The parameter sequence for the `hpx::parallel::transform_reduce` overload
  taking one iterator range has changed to match the changes this algorithm has
  undergone while being moved to C++17.
* The algorithm `hpx::parallel::inner_product` has been renamed to
  `hpx::parallel::transform_reduce` to match the changes this algorithm has
  undergone while being moved to C++17.
* the build options `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` and
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY` are now disabled by default. Please
  change your code still depending on the deprecated interfaces.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    2596] - Adding apex data
* [pr    2595] - Remove obsolete file
* [issue 2594] - FindOpenCL.cmake mismatch with the official cmake module
* [pr    2592] - First attempt to introduce spmd_block in hpx
* [issue 2591] - Feature request: continuation (then) which does not require
                 the callable object to take a future<R> as parameter
* [pr    2588] - Daint fixes
* [pr    2587] - Fixing transfer_(continuation)_action::schedule
* [pr    2585] - Work around MSVC having an ICE when compiling with -Ob2
* [pr    2583] - chaning 7zip command to 7za in roll_release.sh
* [pr    2582] - First attempt to introduce spmd_block in hpx
* [pr    2581] - Enable annotated function for parallel algorithms
* [pr    2580] - First attempt to introduce spmd_block in hpx
* [pr    2579] - Make thread NICE level setting an option
* [pr    2578] - Implementing enqueue instead of busy wait when no sender is
                 available
* [pr    2577] - Retrieve -std=c++11 consistent nvcc flag
* [pr    2576] - Add missing dependencies of cuda based tests
* [pr    2575] - Remove warnings due to some captured variables
* [pr    2573] - Attempt to resolve resolve_locality
* [pr    2572] - Adding APEX hooks to background thread
* [pr    2571] - Pick up hpx.ignore_batch_env from config map
* [pr    2570] - Add commandline options --hpx:print-counters-locally
* [pr    2569] - Fix computeapi unit tests
* [pr    2567] - This adds another barrier::synchronize before registering
                 performance counters
* [pr    2564] - Cray static toolchain support
* [pr    2563] - Fixed unhandled exception during startup
* [pr    2562] - Remove partitioned_vector.cu from build tree when nvcc is used
* [issue 2561] - octo-tiger crash with commit 6e921495ff6c26f125d62629cbaad0525f14f7ab
* [pr    2560] - Prevent -Wundef warnings on Vc version checks
* [pr    2559] - Allowing CUDA callback to set the future directly from an OS
                 thread
* [pr    2558] - Remove warnings due to float precisions
* [pr    2557] - Removing bogus handling of compile flags for CUDA
* [pr    2556] - Fixing scan partitioner
* [pr    2554] - Add more diagnostics to error thrown from find_appropriate_destination
* [issue 2555] - No valid parcelport configured
* [pr    2553] - Add cmake cuda_arch option
* [pr    2552] - Remove incomplete datapar bindings to libflatarray
* [pr    2551] - Rename hwloc_topology to hwloc_topology_info
* [pr    2550] - Apex api updates
* [pr    2549] - Pre-include defines.hpp to get the macro HPX_HAVE_CUDA value
* [pr    2548] - Fixing issue with disconnect
* [pr    2546] - Some fixes around cuda clang partitioned_vector example
* [pr    2545] - Fix uses of the Vc2 datapar flags; the value, not the type,
                 should be passed to functions
* [pr    2542] - Make HPX_WITH_MALLOC easier to use
* [pr    2541] - avoid recompiles when enabling/disabling examples
* [pr    2540] - Fixing usage of target_link_libraries()
* [pr    2539] - fix RPATH behaviour
* [issue 2538] - HPX_WITH_CUDA corrupts compilation flags
* [pr    2537] - Add output of a Bazel Skylark extension for paths and compile
                 options
* [pr    2536] - Add counter exposing total available memory to Windows as well
* [pr    2535] - Remove obsolete support for security
* [issue 2534] - Remove command line option `--hpx:run-agas-server`
* [pr    2533] - Pre-cache locality endpoints during bootstrap
* [pr    2532] - Fixing handling of GIDs during serialization preprocessing
* [pr    2531] - Amend uses of the term "functor"
* [pr    2529] - added counter for reading available memory
* [pr    2527] - Facilities to create actions from lambdas
* [pr    2526] - Updated docs: HPX_WITH_EXAMPLES
* [pr    2525] - Remove warnings related to unused captured variables
* [issue 2524] - CMAKE failed because it is missing:
                 TCMALLOC_LIBRARY TCMALLOC_INCLUDE_DIR
* [pr    2523] - Fixing compose_cb stack overflow
* [pr    2522] - Instead of unlocking, ignore the lock while creating the
                 message handler
* [pr    2521] - Create LPROGRESS_ logging macro to simplify progress tracking
                 and timings
* [pr    2520] - Intel 17 support
* [pr    2519] - Fix components example
* [pr    2518] - Fixing parcel scheduling
* [issue 2517] - Race condition during Parcel Coalescing Handler creation
* [issue 2516] - HPX locks up when using at least 256 localities
* [issue 2515] - error: Install cannot find "/lib/hpx/libparcel_coalescing.so.0.9.99"
                 but I can see that file
* [pr    2514] - Making sure that all continuations of a shared_future are
                 invoked in order
* [pr    2513] - Fixing locks held during suspension
* [pr    2512] - MPI Parcelport improvements and fixes related to the background
                 work changes
* [pr    2511] - Fixing bit-wise (zero-copy) serialization
* [issue 2509] - Linking errors in hwloc_topology
* [pr    2508] - Added documentation for debugging with core files
* [pr    2506] - Fixing background work invocations
* [pr    2505] - Fix tuple serialization
* [issue 2504] - Ensure continuations are called in the order they have been
                 attached
* [pr    2503] - Adding serialization support for Vc v2 (datapar)
* [pr    2502] - Resolve various, minor compiler warnings
* [pr    2501] - Some other fixes around cuda examples
* [issue 2500] - nvcc / cuda clang issue due to a missing -DHPX_WITH_CUDA flag
* [pr    2499] - Adding support for std::array to wait_all and friends
* [pr    2498] - Execute background work as HPX thread
* [pr    2497] - Fixing configuration options for spinlock-deadlock detection
* [pr    2496] - Accounting for different compilers in CrayKNL toolchain file
* [pr    2494] - Adding component base class which ties a component instance to
                 a given executor
* [pr    2493] - Enable controlling amount of pending threads which must be
                 available to allow thread stealing
* [pr    2492] - Adding new command line option --hpx:print-counter-reset
* [pr    2491] - Resolve ambiguities when compiling with APEX
* [pr    2490] - Resuming threads waiting on future with higher priority
* [issue 2489] - nvcc issue because -std=c++11 appears twice
* [pr    2488] - Adding performance counters exposing the internal idle and
                 busy-loop counters
* [pr    2487] - Allowing for plain suspend to reschedule thread right away
* [pr    2486] - Only flag HPX code for CUDA if HPX_WITH_CUDA is set
* [pr    2485] - Making thread-queue parameters runtime-configurable
* [pr    2484] - Added atomic counter for parcel-destinations
* [pr    2483] - Added priority-queue lifo scheduler
* [pr    2482] - Changing scheduler to steal only if more than a minimal number
                 of tasks are available
* [pr    2481] - Extending command line option --hpx:print-counter-destination
                 to support value 'none'
* [pr    2479] - Added option to disable signal handler
* [pr    2478] - Making sure the sine performance counter module gets loaded
                 only for the corresponding example
* [issue 2477] - Breaking at a throw statement
* [pr    2476] - Annotated function
* [pr    2475] - Ensure that using %osthread% during logging will not throw for
                 non-hpx threads
* [pr    2474] - Remove now superficial non_direct actions from base_lco and
                 friends
* [pr    2473] - Refining support for ITTNotify
* [pr    2472] - Some fixes around hpx compute
* [issue 2470] - redefinition of boost::detail::spinlock
* [issue 2469] - Dataflow performance issue
* [pr    2468] - Perf docs update
* [pr    2466] - Guarantee to execute remote direct actions on HPX-thread
* [pr    2465] - Improve demo : Async copy and fixed device handling
* [pr    2464] - Adding performance counter exposing instantaneous scheduler
                 utilization
* [pr    2463] - Downcast to future<void>
* [pr    2462] - Fixed usage of ITT-Notify API with Intel Amplifier
* [pr    2461] - Cublas demo
* [pr    2460] - Fixing thread bindings
* [pr    2459] - Make -std=c++11 nvcc flag consistent for in-build and
                 installed versions
* [issue 2457] - Segmentation fault when registering a partitioned vector
* [pr    2452] - Properly releasing global barrier for unhandled exceptions
* [pr    2451] - Fixing long shutdown times
* [pr    2450] - Attempting to fix initialization errors on newer platforms
                 (Boost V1.63)
* [pr    2449] - Replace BOOST_COMPILER_FENCE with an HPX version
* [pr    2448] - This fixes a possible race in the migration code
* [pr    2445] - Fixing dataflow et.al. for futures or future-ranges wrapped
                 into ref()
* [pr    2444] - Fix segfaults
* [pr    2443] - Issue 2442
* [issue 2442] - Mismatch between #if/#endif and namespace scope brackets in
                 this_thread_executers.hpp
* [issue 2441] - undeclared identifier BOOST_COMPILER_FENCE
* [pr    2440] - Knl build
* [pr    2438] - Datapar backend
* [pr    2437] - Adapt algorithm parameter sequence changes from C++17
* [pr    2436] - Adapt execution policy name changes from C++17
* [issue 2435] - Trunk broken, undefined reference to
                 hpx::thread::interrupt(hpx::thread::id, bool)
* [pr    2434] - More fixes to resource manager
* [pr    2433] - Added versions of `hpx::get_ptr` taking client side representations
* [pr    2432] - Warning fixes
* [pr    2431] - Adding facility representing set of performance counters
* [pr    2430] - Fix parallel_executor thread spawning
* [pr    2429] - Fix attribute warning for gcc
* [issue 2427] - Seg fault running octo-tiger with latest HPX commit
* [issue 2426] - Bug in 9592f5c0bc29806fce0dbe73f35b6ca7e027edcb causes
                 immediate crash in Octo-tiger
* [pr    2425] - Fix nvcc errors due to constexpr specifier
* [issue 2424] - Async action on component present on hpx::find_here is executing
                 synchronously
* [pr    2423] - Fix nvcc errors due to constexpr specifier
* [pr    2422] - Implementing hpx::this_thread thread data functions
* [pr    2421] - Adding benchmark for wait_all
* [issue 2420] - Returning object of a component client from another component
                 action fails
* [pr    2419] - Infiniband parcelport
* [issue 2418] - gcc + nvcc fails to compile code that uses partitioned_vector
* [pr    2417] - Fixing context switching
* [pr    2416] - Adding fixes and workarounds to allow compilation with nvcc/msvc
                 (VS2015up3)
* [pr    2415] - Fix errors coming from hpx compute examples
* [pr    2414] - Fixing msvc12
* [pr    2413] - Enable cuda/nvcc or cuda/clang when using add_hpx_executable()
* [pr    2412] - Fix issue in HPX_SetupTarget.cmake when cuda is used
* [pr    2411] - This fixes the core compilation issues with MSVC12
* [issue 2410] - undefined reference to opal_hwloc191_hwloc_.....
* [pr    2409] - Fixing locking for channel and receive_buffer
* [pr    2407] - Solving #2402 and #2403
* [pr    2406] - Improve guards
* [pr    2405] - Enable parallel::for_each for iterators returning proxy types
* [pr    2404] - Forward the explicitly given result_type in the hpx invoke
* [issue 2403] - datapar_execution + zip iterator: lambda arguments aren't
                 references
* [issue 2402] - datapar algorithm instantiated with wrong type #2402
* [pr    2401] - Added support for imported libraries to HPX_Libraries.cmake
* [pr    2400] - Use CMake policy CMP0060
* [issue 2399] - Error trying to push back vector of futures to vector
* [pr    2398] - Allow config #defines to be written out to custom config/defines.hpp
* [issue 2397] - CMake generated config defines can cause tedious rebuilds
                 category
* [issue 2396] - BOOST_ROOT paths are not used at link time
* [pr    2395] - Fix target_link_libraries() issue when HPX Cuda is enabled
* [issue 2394] - Template compilation error using HPX_WITH_DATAPAR_LIBFLATARRAY
* [pr    2393] - Fixing lock registration for recursive mutex
* [pr    2392] - Add keywords in target_link_libraries in hpx_setup_target
* [pr    2391] - Clang goroutines
* [issue 2390] - Adapt execution policy name changes from C++17
* [pr    2389] - Chunk allocator and pool are not used and are obsolete
* [pr    2388] - Adding functionalities to datapar needed by octotiger
* [pr    2387] - Fixing race condition for early parcels
* [issue 2386] - Lock registration broken for recursive_mutex
* [pr    2385] - Datapar zip iterator
* [pr    2384] - Fixing race condition in for_loop_reduction
* [pr    2383] - Continuations
* [pr    2382] - add LibFlatArray-based backend for datapar
* [pr    2381] - remove unused typedef to get rid of compiler warnings
* [pr    2380] - Tau cleanup
* [pr    2379] - Can send immediate
* [pr    2378] - Renaming copy_helper/copy_n_helper/move_helper/move_n_helper
* [issue 2376] - Boost trunk's spinlock initializer fails to compile
* [pr    2375] - Add support for minimal thread local data
* [pr    2374] - Adding API functions set_config_entry_callback
* [pr    2373] - Add a simple utility for debugging that gives supended task
                 backtraces
* [pr    2372] - Barrier Fixes
* [issue 2370] - Can't wait on a wrapped future
* [pr    2369] - Fixing stable_partition
* [pr    2367] - Fixing find_prefixes for Windows platforms
* [pr    2366] - Testing for experimental/optional only in C++14 mode
* [pr    2364] - Adding set_config_entry
* [pr    2363] - Fix papi
* [pr    2362] - Adding missing macros for new non-direct actions
* [pr    2361] - Improve cmake output to help debug compiler incompatibility check
* [pr    2360] - Fixing race condition in condition_variable
* [pr    2359] - Fixing shutdown when parcels are still in flight
* [issue 2357] - failed to insert console_print_action into typename_to_id_t registry
* [pr    2356] - Fixing return type of get_iterator_tuple
* [pr    2355] - Fixing compilation against Boost 1 62
* [pr    2354] - Adding serialization for mask_type if CPU_COUNT > 64
* [pr    2353] - Adding hooks to tie in APEX into the parcel layer
* [issue 2352] - Compile errors when using intel 17 beta (for KNL) on edison
* [pr    2351] - Fix function vtable get_function_address implementation
* [issue 2350] - Build failure - master branch (4de09f5) with Intel Compiler v17
* [pr    2349] - Enabling zero-copy serialization support for std::vector<>
* [pr    2348] - Adding test to verify #2334 is fixed
* [pr    2347] - Bug fixes for hpx.compute and hpx::lcos::channel
* [pr    2346] - Removing cmake "find" files that are in the APEX cmake Modules
* [pr    2345] - Implemented parallel::stable_partition
* [pr    2344] - Making hpx::lcos::channel usable with basename registration
* [pr    2343] - Fix a couple of examples that failed to compile after recent
                 api changes
* [issue 2342] - Enabling APEX causes link errors
* [pr    2341] - Removing cmake "find" files that are in the APEX cmake Modules
* [pr    2340] - Implemented all existing datapar algorithms using Boost.SIMD
* [pr    2339] - Fixing 2338
* [pr    2338] - Possible race in sliding semaphore
* [pr    2337] - Adjust osu_latency test to measure window_size parcels in flight at once
* [pr    2336] - Allowing remote direct actions to be executed without spawning a task
* [pr    2335] - Making sure multiple components are properly initialized from
                 arguments
* [issue 2334] - Cannot construct component with large vector on a remote
                 locality
* [pr    2332] - Fixing hpx::lcos::local::barrier
* [pr    2331] - Updating APEX support to include OTF2
* [pr    2330] - Support for data-parallelism for parallel algorithms
* [issue 2329] - Coordinate settings in cmake
* [pr    2328] - fix LibGeoDecomp builds with HPX + GCC 5.3.0 + CUDA 8RC
* [pr    2326] - Making scan_partitioner work (for now)
* [issue 2323] - Constructing a vector of components only correctly initializes
                 the first component
* [pr    2322] - Fix problems that bubbled up after merging #2278
* [pr    2321] - Scalable barrier
* [pr    2320] - Std flag fixes
* [issue 2319] - -std=c++14 and -std=c++1y with Intel can't build recent Boost
                 builds due to insufficient C++14 support; don't enable these
                 flags by default for Intel
* [pr    2318] - Improve handling of --hpx:bind=<bind-spec>
* [pr    2317] - Making sure command line warnings are printed once only
* [pr    2316] - Fixing command line handling for default bind mode
* [pr    2315] - Set id_retrieved if set_id is present
* [issue 2314] - Warning for requested/allocated thread discrepancy is printed
                 twice
* [issue 2313] - --hpx:print-bind doesn't work with --hpx:pu-step
* [issue 2312] - --hpx:bind range specifier restrictions are overly restrictive
* [issue 2311] - hpx_0.9.99 out of project build fails
* [pr    2310] - Simplify function registration
* [pr    2309] - Spelling and grammar revisions in documentation (and some code)
* [pr    2306] - Correct minor typo in the documentation
* [pr    2305] - Cleaning up and fixing parcel coalescing
* [pr    2304] - Inspect checks for stream related includes
* [pr    2303] - Add functionality allowing to enumerate threads of given state
* [pr    2301] - Algorithm overloads fix for VS2013
* [pr    2300] - Use <cstdint>, add inspect checks
* [pr    2299] - Replace boost::[c]ref with std::[c]ref, add inspect checks
* [pr    2297] - Fixing compilation with no hw_loc
* [pr    2296] - Hpx compute
* [pr    2295] - Making sure for_loop(execution::par, 0, N, ...) is actually executed in
                 parallel
* [pr    2294] - Throwing exceptions if the runtime is not up and running
* [pr    2293] - Removing unused parcel port code
* [pr    2292] - Refactor function vtables
* [pr    2291] - Fixing 2286
* [pr    2290] - Simplify algorithm overloads
* [pr    2289] - Adding performance counters reporting parcel related data on a
                 per-action basis
* [issue 2288] - Remove dormant parcelports
* [issue 2286] - adjustments to parcel handling to support parcelports that do
                 not need a connection cache
* [pr    2285] - add CMake option to disable package export
* [pr    2283] - Add more inspect checks for use of deprecated components
* [issue 2282] - Arithmetic exception in executor static chunker
* [issue 2281] - For loop doesn't parallelize
* [pr    2280] - Fixing 2277: build failure with PAPI
* [pr    2279] - Child vs parent stealing
* [issue 2277] - master branch build failure (53c5b4f) with papi
* [pr    2276] - Compile time launch policies
* [pr    2275] - Replace boost::chrono with std::chrono in interfaces
* [pr    2274] - Replace most uses of Boost.Assign with initializer list
* [pr    2273] - Fixed typos
* [pr    2272] - Inspect checks
* [pr    2270] - Adding test verifying -Ihpx.os_threads=all
* [pr    2269] - Added inspect check for now obsolete boost type traits
* [pr    2268] - Moving more code into source files
* [issue 2267] - Add inspect support to deprecate Boost.TypeTraits
* [pr    2265] - Adding channel LCO
* [pr    2264] - Make support for std::ref mandatory
* [pr    2263] - Constrain tuple_member forwarding constructor
* [issue 2262] - Test hpx.os_threads=all
* [issue 2261] - OS X: Error: no matching constructor for initialization of
                 'hpx::lcos::local::condition_variable_any'
* [issue 2260] - Make support for std::ref mandatory
* [pr    2259] - Remove most of Boost.MPL, Boost.EnableIf and Boost.TypeTraits
* [pr    2258] - Fixing #2256
* [pr    2257] - Fixing launch process
* [issue 2256] - Actions are not registered if not invoked
* [pr    2255] - Coalescing histogram
* [pr    2254] - Silence explicit initialization in copy-constructor warnings
* [pr    2253] - Drop support for GCC 4.6 and 4.7
* [pr    2252] - Prepare V1.0
* [pr    2251] - Convert to 0.9.99
* [pr    2249] - Adding iterator_facade and iterator_adaptor
* [issue 2248] - Need a feature to yield to a new task immediately
* [pr    2246] - Adding split_future
* [pr    2245] - Add an example for handing over a component instance to
                 a dynamically launched locality
* [issue 2243] - Add example demonstrating AGAS symbolic name registration
* [issue 2242] - pkgconfig test broken on CentOS 7 / Boost 1.61
* [issue 2241] - Compilation error for partitioned vector in hpx_compute branch
* [pr    2240] - Fixing termination detection on one locality
* [issue 2239] - Create a new facility lcos::split_all
* [issue 2236] - hpx::cout vs. std::cout
* [pr    2232] - Implement local-only primary namespace service
* [issue 2147] - would like to know how much data is being routed by particular
                 actions
* [issue 2109] - Warning while compiling hpx
* [issue 1973] - Setting INTERFACE_COMPILE_OPTIONS for hpx_init in CMake taints
                 Fortran_FLAGS
* [issue 1864] - run_guarded using bound function ignores reference
* [issue 1754] - Running with TCP parcelport causes immediate crash or freeze
* [issue 1655] - Enable zip_iterator to be used with Boost traversal iterator
                 categories
* [issue 1591] - Optimize AGAS for shared memory only operation
* [issue 1401] - Need an efficient infiniband parcelport
* [issue 1125] - Fix the IPC parcelport
* [issue  839] - Refactor ibverbs and shmem parcelport
* [issue  702] - Add instrumentation of parcel layer
* [issue  668] - Implement ispc task interface
* [issue  533] - Thread queue/deque internal parameters should be runtime
                 configurable
* [issue  475] - Create a means of combining performance counters into querysets

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_99 __hpx__ V0.9.99 (Jul 15, 2016)]

[heading General Changes]

As the version number of this release hints, we consider this release
to be a preview
for the upcoming __hpx__ V1.0. All of the functionalities
we set out to implement for
V1.0 are in place; all of the features we wanted to have exposed are ready. We
are very happy with the stability and performance of __hpx__ and we would like
to present this release to the community in order for us to
gather broad feedback before releasing V1.0.
We still expect for some minor details to change, but
on the whole this release represents what we would like to have in a V1.0.

Overall, since the last release we have had almost 1600 commits while closing
almost 400 tickets. These numbers reflect the incredible development activity
we have seen over the last couple of months. We would like to express a big
'Thank you!' to all contributors and those who helped to make this release
happen.

The most notable addition in terms of new functionality available with this
release is the full implementation of object migration (i.e. the ability to
transparently move __hpx__ components to a different compute node).
Additionally, this release of __hpx__ cleans up many minor issues and some
API inconsistencies.

Here are some of the main highlights and changes for this release (in no
particular order):

* We have fixed a couple of issues in AGAS and the parcel layer which have
  caused hangs, segmentation faults at exit, and a slowdown of applications
  over time. Fixing those has significantly increased the overall stability
  and performance of distributed runs.
* We have started to add parallel algorithm overloads based on the C++
  Extensions for Ranges (__cpp17_n4560__) proposal. This also includes the
  addition of projections to the existing algorithms. Please see [issue 1668]
  for a list of algorithms which have been adapted to __cpp17_n4560__.
* We have implemented index-based parallel for-loops based on a
  corresponding standardization proposal (__cpp20_p0075r1__). Please see
  [issue 2016] for a list of available algorithms.
* We have added implementations for more parallel algorithms as proposed for
  the upcoming C++ 17 Standard. See [issue 1141] for an overview of which
  algorithms are available by now.
* We have started to implement a new prototypical functionality with
  __hpx_compute__ which uniformly exposes some of the higher level APIs to
  heterogeneous architectures (currently CUDA). This functionality is an early
  preview and should not be considered stable. It may change considerably in
  the future.
* We have pervasively added (optional) executor arguments to all API functions
  which schedule new work. Executors are now used throughout the code base as
  the main means of executing tasks.
* Added `hpx::make_future<R>(future<T> &&)` allowing to convert a future of
  any type `T` into a future of any other type `R`, either based on default
  conversion rules of the embedded types or using a given explicit conversion
  function.
* We finally finished the implementation of transparent migration of components
  to another locality. It is now possible to trigger
  a migration operation without 'stopping the world' for the object to migrate.
  __hpx__ will make sure that no work is being performed on an object before it
  is migrated and that all subsequently scheduled work for the migrated object
  will be transparently forwarded to the new locality. Please note that the
  global id of the migrated object does not change, thus the application will
  not have to be changed in any way to support this new functionality. Please
  note that this feature is currently considered experimental. See [issue 559]
  and [pr 1966] for more details.
* The `hpx::dataflow` facility is now usable with actions. Similarly to
  `hpx::async`, actions can be specified as an explicit template argument
  (`hpx::dataflow<Action>(target, ...)`) or as the first argument
  (`hpx::dataflow(Action(), target, ...)`). We have also enabled the use of
  distribution policies as the target for dataflow invocations. Please see
  [issue 1265] and [pr 1912] for more information.
* Adding overloads of `gather_here` and `gather_there` to accept the plain
  values of the data to gather (in addition to the existing overloads expecting
  futures).
* We have cleaned up and refactored large parts of the code base. This helped
  reducing compile and link times of __hpx__ itself and also of applications
  depending on it. We have further decreased the dependency of __hpx__ on the
  Boost libraries by replacing part of those with facilities available from the
  standard libraries.
* Wherever possible we have removed dependencies of our API on Boost by
  replacing those with the equivalent facility from the C++11 standard library.
* We have added new performance counters for parcel coalescing, file-IO, the
  AGAS cache, and overall scheduler time. Resetting performance counters has
  been overhauled and fixed.
* We have introduced a generic client type `hpx::components::client<>` and
  added support for using it with `hpx::async`. This removes the necessity to
  implement specific client types for every component type without losing
  type safety. This deemphasizes the need for using the low level `hpx::id_type`
  for referencing (possibly remote) component instances. The plan is to
  deprecate the direct use of `hpx::id_type` in user code in the future.
* We have added a special iterator which supports automatic prefetching of
  one or more arrays for speeding up loop-like code (see
  `hpx::parallel::util::make_prefetcher_context()`).
* We have extended the interfaces exposed from executors (as proposed by
  __cpp11_n4406__) to accept an arbitrary number of arguments.

[heading Breaking Changes]

* In order to move the dataflow facility to `namespace hpx` we added a
  definition of `hpx::dataflow` which might create ambiguities in existing
  codes. The previous definition of this facility (`hpx::lcos::local::dataflow`)
  has been deprecated and is available only if the constant
  `-DHPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY=On` to __cmake __ is defined at
  configuration time.
  Please explicitly qualify all uses of the dataflow facility if you enable
  this compatibility setting and encounter ambiguities.
* The adaptation of the C++ Extensions for Ranges (__cpp17_n4560__) proposal
  imposes some breaking changes related to the return types of some of the
  parallel algorithms. Please see [issue 1668] for a list of algorithms which
  have already been adapted.
* The facility `hpx::lcos::make_future_void()` has been replaced by
  `hpx::make_future<void>()`.
* We have removed support for Intel V13 and gcc 4.4.x.
* We have removed (default) support for the generic
  `hpx::parallel::execution_poliy` because it was removed from the Parallelism
  TS (__cpp11_n4104__) while it was being added to the upcoming C++17 Standard.
  This facility can be still enabled at configure time by specifying
  `-DHPX_WITH_GENERIC_EXECUTION_POLICY=On` to __cmake__.
* Uses of `boost::shared_ptr` and related facilities have been replaced with
  `std::shared_ptr` and friends. Uses of `boost::unique_lock`,
  `boost::lock_guard` etc. have also been replaced by the equivalent (and
  equally named) tools available from the C++11 standard library.
* Facilities that used to expect an explicit `boost::unique_lock` now take an
  `std::unique_lock`. Additionally, `condition_variable` no longer aliases
  `condition_variable_any`; its interface now only works with
  `std::unique_lock<local::mutex>`.
* Uses of `boost::function`, `boost::bind`, `boost::tuple` have been replaced
  by the corresponding facilities in __hpx__ (`hpx::util::function`,
  `hpx::util::bind`, and `hpx::util::tuple`, respectively).

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    2250] - change default chunker of parallel executor to static one
* [pr    2247] - HPX on ppc64le
* [pr    2244] - Fixing MSVC problems
* [pr    2238] - Fixing small typos
* [pr    2237] - Fixing small typos
* [pr    2234] - Fix broken add test macro when extra args are passed in
* [pr    2231] - Fixing possible race during future awaiting in serialization
* [pr    2230] - Fix stream nvcc
* [pr    2229] - Fixed run_as_hpx_thread
* [pr    2228] - On prefetching_test branch : adding prefetching_iterator and
                 related tests used for prefetching containers within lambda
                 functions
* [pr    2227] - Support for HPXCL's opencl::event
* [pr    2226] - Preparing for release of V0.9.99
* [pr    2225] - fix issue when compiling components with hpxcxx
* [pr    2224] - Compute alloc fix
* [pr    2223] - Simplify promise
* [pr    2222] - Replace last uses of boost::function by util::function_nonser
* [pr    2221] - Fix config tests
* [pr    2220] - Fixing gcc 4.6 compilation issues
* [pr    2219] - nullptr support for [unique_]function
* [pr    2218] - Introducing clang tidy
* [pr    2216] - Replace NULL with nullptr
* [issue 2214] - Let inspect flag use of NULL, suggest nullptr instead
* [pr    2213] - Require support for nullptr
* [pr    2212] - Properly find jemalloc through pkg-config
* [pr    2211] - Disable a couple of warnings reported by Intel on Windows
* [pr    2210] - Fixed host::block_allocator::bulk_construct
* [pr    2209] - Started to clean up new sort algorithms, made things compile
                 for sort_by_key
* [pr    2208] - A couple of fixes that were exposed by a new sort algorithm
* [pr    2207] - Adding missing includes in /hpx/include/serialization.hpp
* [pr    2206] - Call package_action::get_future before package_action::apply
* [pr    2205] - The indirect_packaged_task::operator() needs to be run on a
                 HPX thread
* [pr    2204] - Variadic executor parameters
* [pr    2203] - Delay-initialize members of partitoned iterator
* [pr    2202] - Added segmented fill for hpx::vector
* [issue 2201] - Null Thread id encountered on partitioned_vector
* [pr    2200] - Fix hangs
* [pr    2199] - Deprecating hpx/traits.hpp
* [pr    2198] - Making explicit inclusion of external libraries into build
* [pr    2197] - Fix typo in QT CMakeLists
* [pr    2196] - Fixing a gcc warning about attributes being ignored
* [pr    2194] - Fixing partitioned_vector_spmd_foreach example
* [issue 2193] - partitioned_vector_spmd_foreach seg faults
* [pr    2192] - Support Boost.Thread v4
* [pr    2191] - HPX.Compute prototype
* [pr    2190] - Spawning operation on new thread if remaining stack space
                 becomes too small
* [pr    2189] - Adding callback taking index and future to when_each
* [pr    2188] - Adding new example demonstrating receive_buffer
* [pr    2187] - Mask 128-bit ints if CUDA is being used
* [pr    2186] - Make startup & shutdown functions unique_function
* [pr    2185] - Fixing logging output not to cause hang on shutdown
* [pr    2184] - Allowing component clients as action return types
* [issue 2183] - Enabling logging output causes hang on shutdown
* [issue 2182] - 1d_stencil seg fault
* [issue 2181] - Setting small stack size does not change default
* [pr    2180] - Changing default bind mode to balanced
* [pr    2179] - adding prefetching_iterator and related tests used for
                 prefetching containers within lambda functions
* [pr    2177] - Fixing 2176
* [issue 2176] - Launch process test fails on OSX
* [pr    2175] - Fix unbalanced config/warnings includes, add some new ones
* [pr    2174] - Fix test categorization : regression not unit
* [issue 2172] - Different performance results
* [issue 2171] - "negative entry in reference count table" running octotiger on
                 32 nodes on queenbee
* [issue 2170] - Error while compiling on Mac + boost 1.60
* [pr    2168] - Fixing problems with is_bitwise_serializable
* [issue 2167] - startup & shutdown function should accept unique_function
* [issue 2166] - Simple receive_buffer example
* [pr    2165] - Fix wait all
* [pr    2164] - Fix wait all
* [pr    2163] - Fix some typos in config tests
* [pr    2162] - Improve #includes
* [pr    2160] - Add inspect check for missing #include <list>
* [pr    2159] - Add missing finalize call to stop test hanging
* [pr    2158] - Algo fixes
* [pr    2157] - Stack check
* [issue 2156] - OSX reports stack space incorrectly (generic context coroutines)
* [issue 2155] - Race condition suspected in runtime
* [pr    2154] - Replace boost::detail::atomic_count with the new
                 util::atomic_count
* [pr    2153] - Fix stack overflow on OSX
* [pr    2152] - Define is_bitwise_serializable as is_trivially_copyable when
                 available
* [pr    2151] - Adding missing <cstring> for std::mem* functions
* [issue 2150] - Unable to use component clients as action return types
* [pr    2149] - std::memmove copies bytes, use bytes*sizeof(type) when copying
                 larger types
* [pr    2146] - Adding customization point for parallel copy/move
* [pr    2145] - Applying changes to address warnings issued by latest version
                 of PVS Studio
* [issue 2148] - hpx::parallel::copy is broken after trivially copyable changes
* [pr    2144] - Some minor tweaks to compute prototype
* [pr    2143] - Added Boost version support information over OSX platform
* [pr    2142] - Fixing memory leak in example
* [pr    2141] - Add missing specializations in execution policies
* [pr    2139] - This PR fixes a few problems reported by Clang's Undefined
                 Behavior sanitizer
* [pr    2138] - Revert "Adding fedora docs"
* [pr    2136] - Removed double semicolon
* [pr    2135] - Add deprecated #include check for hpx_fwd.hpp
* [pr    2134] - Resolved memory leak in stencil_8
* [pr    2133] - Replace uses of boost pointer containers
* [pr    2132] - Removing unused typedef
* [pr    2131] - Add several include checks for std facilities
* [pr    2130] - Fixing parcel compression, adding test
* [pr    2129] - Fix invalid attribute warnings
* [issue 2128] - hpx::init seems to segfault
* [pr    2127] - Making executor_traits N-nary
* [pr    2126] - GCC 4.6 fails to deduce the correct type in lambda
* [pr    2125] - Making parcel coalescing test actually test something
* [issue 2124] - Make a testcase for parcel compression
* [issue 2123] - hpx/hpx/runtime/applier_fwd.hpp - Multiple defined types
* [issue 2122] - Exception in primary_namespace::resolve_free_list
* [issue 2121] - Possible memory leak in 1d_stencil_8
* [pr    2120] - Fixing 2119
* [issue 2119] - reduce_by_key compilation problems
* [issue 2118] - Premature unwrapping of boost::ref'ed arguments
* [pr    2117] - Added missing initializer on last constructor for
                 thread_description
* [pr    2116] - Use a lightweight bind implementation when no placeholders are
                 given
* [pr    2115] - Replace boost::shared_ptr with std::shared_ptr
* [pr    2114] - Adding hook functions for executor_parameter_traits supporting timers
* [issue 2113] - Compilation error with gcc version 4.9.3 (MacPorts gcc49 4.9.3_0)
* [pr    2112] - Replace uses of safe_bool with explicit operator bool
* [issue 2111] - Compilation error on QT example
* [issue 2110] - Compilation error when passing non-future argument to unwrapped
                 continuation in dataflow
* [issue 2109] - Warning while compiling hpx
* [issue 2109] - Stack trace of last bug causing issues with octotiger
* [issue 2108] - Stack trace of last bug causing issues with octotiger
* [pr    2107] - Making sure that a missing parcel_coalescing module does not
                 cause startup exceptions
* [pr    2106] - Stop using hpx_fwd.hpp
* [issue 2105] - coalescing plugin handler is not optional any more
* [issue 2104] - Make executor_traits N-nary
* [issue 2103] - Build error with octotiger and hpx commit e657426d
* [pr    2102] - Combining thread data storage
* [pr    2101] - Added repartition version of 1d stencil that uses any
                 performance counter
* [pr    2100] - Drop obsolete TR1 result_of protocol
* [pr    2099] - Replace uses of boost::bind with util::bind
* [pr    2098] - Deprecated inspect checks
* [pr    2097] - Reduce by key, extends #1141
* [pr    2096] - Moving local cache from external to hpx/util
* [pr    2095] - Bump minimum required Boost to 1.50.0
* [pr    2094] - Add include checks for several Boost utilities
* [issue 2093] - /.../local_cache.hpp(89): error #303: explicit type is missing
                 ("int" assumed)
* [pr    2091] - Fix for Raspberry pi build
* [pr    2090] - Fix storage size for util::function<>
* [pr    2089] - Fix #2088
* [issue 2088] - More verbose output from cmake configuration
* [pr    2087] - Making sure init_globally always executes hpx_main
* [issue 2086] - Race condition with recent HPX
* [pr    2085] - Adding #include checker
* [pr    2084] - Replace boost lock types with standard library ones
* [pr    2083] - Simplify packaged task
* [pr    2082] - Updating APEX version for testing
* [pr    2081] - Cleanup exception headers
* [pr    2080] - Make call_once variadic
* [issue 2079] - With GNU C++, line 85 of hpx/config/version.hpp causes link
                 failure when linking application
* [issue 2078] - Simple test fails with _GLIBCXX_DEBUG defined
* [pr    2077] - Instantiate board in nqueen client
* [pr    2076] - Moving coalescing registration to TUs
* [pr    2075] - Fixed some documentation typos
* [pr    2074] - Adding flush-mode to message handler flush
* [pr    2073] - Fixing performance regression introduced lately
* [pr    2072] - Refactor local::condition_variable
* [pr    2071] - Timer based on boost::asio::deadline_timer
* [pr    2070] - Refactor tuple based functionality
* [pr    2069] - Fixed typos
* [issue 2068] - Seg fault with octotiger
* [pr    2067] - Algorithm cleanup
* [pr    2066] - Split credit fixes
* [pr    2065] - Rename HPX_MOVABLE_BUT_NOT_COPYABLE to HPX_MOVABLE_ONLY
* [pr    2064] - Fixed some typos in docs
* [pr    2063] - Adding example demonstrating template components
* [issue 2062] - Support component templates
* [pr    2061] - Replace some uses of lexical_cast<string> with C++11
                 std::to_string
* [pr    2060] - Replace uses of boost::noncopyable with HPX_NON_COPYABLE
* [pr    2059] - Adding missing for_loop algorithms
* [pr    2058] - Move several definitions to more appropriate headers
* [pr    2057] - Simplify assert_owns_lock and ignore_while_checking
* [pr    2056] - Replacing std::result_of with util::result_of
* [pr    2055] - Fix process launching/connecting back
* [pr    2054] - Add a forwarding coroutine header
* [pr    2053] - Replace uses of boost::unordered_map with std::unordered_map
* [pr    2052] - Rewrite tuple unwrap
* [pr    2050] - Replace uses of BOOST_SCOPED_ENUM with C++11 scoped enums
* [pr    2049] - Attempt to narrow down split_credit problem
* [pr    2048] - Fixing gcc startup hangs
* [pr    2047] - Fixing when_xxx and wait_xxx for MSVC12
* [pr    2046] - adding persistent_auto_chunk_size and related tests for for_each
* [pr    2045] - Fixing HPX_HAVE_THREAD_BACKTRACE_DEPTH build time configuration
* [pr    2044] - Adding missing service executor types
* [pr    2043] - Removing ambiguous definitions for is_future_range and
                 future_range_traits
* [pr    2042] - Clarify that HPX builds can use (much) more than 2GB per process
* [pr    2041] - Changing future_iterator_traits to support pointers
* [issue 2040] - Improve documentation memory usage warning?
* [pr    2039] - Coroutine cleanup
* [pr    2038] - Fix cmake policy CMP0042 warning MACOSX_RPATH
* [pr    2037] - Avoid redundant specialization of [unique_]function_nonser
* [pr    2036] - nvcc dies with an internal error upon pushing/popping warnings
                 inside templates
* [issue 2035] - Use a less restrictive iterator definition in
                 hpx::lcos::detail::future_iterator_traits
* [pr    2034] - Fixing compilation error with thread queue wait time
                 performance counter
* [issue 2033] - Compilation error when compiling with thread queue waittime
                 performance counter
* [issue 2032] - Ambiguous template instantiation for is_future_range and
                 future_range_traits.
* [pr    2031] - Don't restart timer on every incoming parcel
* [pr    2030] - Unify handling of execution policies in parallel algorithms
* [pr    2029] - Make pkg-config .pc files use .dylib on OSX
* [pr    2028] - Adding process component
* [pr    2027] - Making check for compiler compatibility independent on compiler
                 path
* [pr    2025] - Fixing inspect tool
* [pr    2024] - Intel13 removal
* [pr    2023] - Fix errors related to older boost versions and parameter pack
                 expansions in lambdas
* [issue 2022] - gmake fail: "No rule to make target
                 /usr/lib46/libboost_context-mt.so"
* [pr    2021] - Added Sudoku example
* [issue 2020] - Make errors related to init_globally.cpp example while building
                 HPX out of the box
* [pr    2019] - Fixed some compilation and cmake errors encountered in nqueen
                 example
* [pr    2018] - For loop algorithms
* [pr    2017] - Non-recursive at_index implementation
* [issue 2016] - Add index-based for-loops
* [issue 2015] - Change default bind-mode to balanced
* [pr    2014] - Fixed dataflow if invoked action returns a future
* [pr    2013] - Fixing compilation issues with external example
* [pr    2012] - Added Sierpinski Triangle example
* [issue 2011] - Compilation error while running sample hello_world_component code
* [pr    2010] - Segmented move implemented for hpx::vector
* [issue 2009] - pkg-config order incorrect on 14.04 / GCC 4.8
* [issue 2008] - Compilation error in dataflow of action returning a future
* [pr    2007] - Adding new performance counter exposing overall scheduler time
* [pr    2006] - Function includes
* [pr    2005] - Adding an example demonstrating how to initialize HPX from a
                 global object
* [pr    2004] - Fixing 2000
* [pr    2003] - Adding generation parameter to gather to enable using it more
                 than once
* [pr    2002] - Turn on position independent code to solve link problem with
                 hpx_init
* [issue 2001] - Gathering more than once segfaults
* [issue 2000] - Undefined reference to hpx::assertion_failed
* [issue 1999] - Seg fault in hpx::lcos::base_lco_with_value<*>::set_value_nonvirt()
                 when running octo-tiger
* [pr    1998] - Detect unknown command line options
* [pr    1997] - Extending thread description
* [pr    1996] - Adding natvis files to solution (MSVC only)
* [issue 1995] - Command line handling does not produce error
* [pr    1994] - Possible missing include in test_utils.hpp
* [pr    1993] - Add missing LANGUAGES tag to a hpx_add_compile_flag_if_available()
                 call in CMakeLists.txt
* [pr    1992] - Fixing shared_executor_test
* [pr    1991] - Making sure the winsock library is properly initialized
* [pr    1990] - Fixing bind_test placeholder ambiguity coming from boost-1.60
* [pr    1989] - Performance tuning
* [pr    1987] - Make configurable size of internal storage in util::function
* [pr    1986] - AGAS Refactoring+1753 Cache mods
* [pr    1985] - Adding missing task_block::run() overload taking an executor
* [pr    1984] - Adding an optimized LRU Cache implementation (for AGAS)
* [pr    1983] - Avoid invoking migration table look up for all objects
* [pr    1981] - Replacing uintptr_t (which is not defined everywhere) with
                 std::size_t
* [pr    1980] - Optimizing LCO continuations
* [pr    1979] - Fixing Cori
* [pr    1978] - Fix test check that got broken in hasty fix to memory overflow
* [pr    1977] - Refactor action traits
* [pr    1976] - Fixes typo in README.rst
* [pr    1975] - Reduce size of benchmark timing arrays to fix test failures
* [pr    1974] - Add action to update data owned by the partitioned_vector
                 component
* [pr    1972] - Adding partitioned_vector SPMD example
* [pr    1971] - Fixing 1965
* [pr    1970] - Papi fixes
* [pr    1969] - Fixing continuation recursions to not depend on fixed amount
                 of recursions
* [pr    1968] - More segmented algorithms
* [issue 1967] - Simplify component implementations
* [pr    1966] - Migrate components
* [issue 1964] - fatal error: 'boost/lockfree/detail/branch_hints.hpp' file
                 not found
* [issue 1962] - parallel:copy_if has race condition when used on in place
                 arrays
* [pr    1963] - Fixing Static Parcelport initialization
* [pr    1961] - Fix function target
* [issue 1960] - Papi counters don't reset
* [pr    1959] - Fixing 1958
* [issue 1958] - inclusive_scan gives incorrect results with non-commutative
                 operator
* [pr    1957] - Fixing #1950
* [pr    1956] - Sort by key example
* [pr    1955] - Adding regression test for #1946: Hang in wait_all() in
                 distributed run
* [issue 1954] - HPX releases should not use -Werror
* [pr    1953] - Adding performance analysis for AGAS cache
* [pr    1952] - Adapting test for explicit variadics to fail for gcc 4.6
* [pr    1951] - Fixing memory leak
* [issue 1950] - Simplify external builds
* [pr    1949] - Fixing yet another lock that is being held during suspension
* [pr    1948] - Fixed container algorithms for Intel
* [pr    1947] - Adding workaround for tagged_tuple
* [issue 1946] - Hang in wait_all() in distributed run
* [pr    1945] - Fixed container algorithm tests
* [issue 1944] - assertion 'p.destination_locality() == hpx::get_locality()'
                 failed
* [pr    1943] - Fix a couple of compile errors with clang
* [pr    1942] - Making parcel coalescing functional
* [issue 1941] - Re-enable parcel coalescing
* [pr    1940] - Touching up make_future
* [pr    1939] - Fixing problems in over-subscription management in the
                 resource manager
* [pr    1938] - Removing use of unified Boost.Thread header
* [pr    1937] - Cleaning up the use of Boost.Accumulator headers
* [pr    1936] - Making sure interval timer is started for aggregating
                 performance counters
* [pr    1935] - Tagged results
* [pr    1934] - Fix remote async with deferred launch policy
* [issue 1933] - Floating point exception in
                 `statistics_counter<boost::accumulators::tag::mean>::get_counter_value`
* [pr    1932] - Removing superfluous includes of
                 boost/lockfree/detail/branch_hints.hpp
* [pr    1931] - fix compilation with clang 3.8.0
* [issue 1930] - Missing online documentation for HPX 0.9.11
* [pr    1929] - LWG2485: get() should be overloaded for const tuple&&
* [pr    1928] - Revert "Using ninja for circle-ci builds"
* [pr    1927] - Using ninja for circle-ci builds
* [pr    1926] - Fixing serialization of std::array
* [issue 1925] - Issues with static HPX libraries
* [issue 1924] - Peformance degrading over time
* [issue 1923] - serialization of std::array appears broken in latest commit
* [pr    1922] - Container algorithms
* [pr    1921] - Tons of smaller quality improvements
* [issue 1920] - Seg fault in hpx::serialization::output_archive::add_gid when
                 running octotiger
* [issue 1919] - Intel 15 compiler bug preventing HPX build
* [pr    1918] - Address sanitizer fixes
* [pr    1917] - Fixing compilation problems of parallel::sort with Intel
                 compilers
* [pr    1916] - Making sure code compiles if HPX_WITH_HWLOC=Off
* [issue 1915] - max_cores undefined if HPX_WITH_HWLOC=Off
* [pr    1913] - Add utility member functions for partitioned_vector
* [pr    1912] - Adding support for invoking actions to dataflow
* [pr    1911] - Adding first batch of container algorithms
* [pr    1910] - Keep cmake_module_path
* [pr    1909] - Fix mpirun with pbs
* [pr    1908] - Changing parallel::sort to return the last iterator as
                 proposed by N4560
* [pr    1907] - Adding a minimum version for Open MPI
* [pr    1906] - Updates to the Release Procedure
* [pr    1905] - Fixing #1903
* [pr    1904] - Making sure std containers are cleared before serialization
                 loads data
* [issue 1903] - When running octotiger, I get: assertion
                 '(*new_gids_)[gid].size() == 1' failed: HPX(assertion_failure)
* [issue 1902] - Immediate crash when running hpx/octotiger with _GLIBCXX_DEBUG
                 defined.
* [pr    1901] - Making non-serializable classes non-serializable
* [issue 1900] - Two possible issues with std::list serialization
* [pr    1899] - Fixing a problem with credit splitting as revealed by #1898
* [issue 1898] - Accessing component from locality where it was not created
                 segfaults
* [pr    1897] - Changing parallel::sort to return the last iterator as
                 proposed by N4560
* [issue 1896] - version 1.0?
* [issue 1895] - Warning comment on numa_allocator is not very clear
* [pr    1894] - Add support for compilers that have thread_local
* [pr    1893] - Fixing 1890
* [pr    1892] - Adds typed future_type for executor_traits
* [pr    1891] - Fix wording in certain parallel algorithm docs
* [issue 1890] - Invoking papi counters give segfault
* [pr    1889] - Fixing problems as reported by clang-check
* [pr    1888] - WIP parallel is_heap
* [pr    1887] - Fixed resetting performance counters related to idle-rate, etc
* [issue 1886] - Run hpx with qsub does not work
* [pr    1885] - Warning cleaning pass
* [pr    1884] - Add missing parallel algorithm header
* [pr    1883] - Add feature test for thread_local on Clang for TLS
* [pr    1882] - Fix some redundant qualifiers
* [issue 1881] - Unable to compile Octotiger using HPX and Intel MPI on SuperMIC
* [issue 1880] - clang with libc++ on Linux needs TLS case
* [pr    1879] - Doc fixes for #1868
* [pr    1878] - Simplify functions
* [pr    1877] - Removing most usage of Boost.Config
* [pr    1876] - Add missing parallel algorithms to algorithm.hpp
* [pr    1875] - Simplify callables
* [pr    1874] - Address long standing FIXME on using `std::unique_ptr` with
                 incomplete types
* [pr    1873] - Fixing 1871
* [pr    1872] - Making sure PBS environment uses specified node list even if
                 no PBS_NODEFILE env is available
* [issue 1871] - Fortran checks should be optional
* [pr    1870] - Touch local::mutex
* [pr    1869] - Documentation refactoring based off #1868
* [pr    1867] - Embrace static_assert
* [pr    1866] - Fix #1803 with documentation refactoring
* [pr    1865] - Setting OUTPUT_NAME as target properties
* [pr    1863] - Use SYSTEM for boost includes
* [pr    1862] - Minor cleanups
* [pr    1861] - Minor Corrections for Release
* [pr    1860] - Fixing hpx gdb script
* [issue 1859] - reset_active_counters resets times and thread counts before
                 some of the counters are evaluated
* [pr    1858] - Release V0.9.11
* [pr    1857] - removing diskperf example from 9.11 release
* [pr    1856] - fix return in packaged_task_base::reset()
* [issue 1842] - Install error: file INSTALL cannot find
                 libhpx_parcel_coalescing.so.0.9.11
* [pr    1839] - Adding fedora docs
* [pr    1824] - Changing version on master to V0.9.12
* [pr    1818] - Fixing #1748
* [issue 1815] - seg fault in AGAS
* [issue 1803] - wait_all documentation
* [issue 1796] - Outdated documentation to be revised
* [issue 1759] - glibc munmap_chunk or free(): invalid pointer on SuperMIC
* [issue 1753] - HPX performance degrades with time since execution begins
* [issue 1748] - All public HPX headers need to be self contained
* [pr    1719] - How to build HPX with Visual Studio
* [issue 1684] - Race condition when using --hpx:connect?
* [pr    1658] - Add serialization for std::set (as there is for std::vector
                 and std::map)
* [pr    1641] - Generic client
* [issue 1632] - heartbeat example fails on separate nodes
* [pr    1603] - Adds preferred namespace check to inspect tool
* [issue 1559] - Extend inspect tool
* [issue 1523] - Remote async with deferred launch policy never executes
* [issue 1472] - Serialization issues
* [issue 1457] - Implement N4392: C++ Latches and Barriers
* [pr    1444] - Enabling usage of moveonly types for component construction
* [issue 1407] - The Intel 13 compiler has failing unit tests
* [issue 1405] - Allow component constructors to take movable only types
* [issue 1265] - Enable dataflow() to be usable with actions
* [issue 1236] - NUMA aware allocators
* [issue  802] - Fix Broken Examples
* [issue  559] - Add hpx::migrate facility
* [issue  449] - Make actions with template arguments usable and add documentation
* [issue  279] - Refactor addressing_service into a base class and two derived
                 classes
* [issue  224] - Changing thread state metadata is not thread safe
* [issue   55] - Uniform syntax for enums should be implemented

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_11 __hpx__ V0.9.11 (Nov 11, 2015)]

Our main focus for this release was the design and development of a coherent
set of higher-level APIs exposing various types of parallelism to the
application programmer. We introduced the concepts of an `executor`, which can
be used to customize the `where` and `when` of execution of tasks in the
context of parallelizing codes. We extended all APIs related to managing parallel
tasks to support executors which gives the user the choce of either using
one of the predefined executor types or to provide its own, possibly application
specific, executor. We paid very close attention to align all of these changes
with the existing C++ Standards documents or with the ongoing proposals for
standardization.

This release is the first after our change to a new development policy. We
switched all development to be strictly performed on branches only, all direct
commits to our main branch (`master`) are prohibited. Any change has to go
through a peer review before it will be merged to `master`. As a result the
overall stability of our code base has significantly increased, the development
process itself has been simplified. This change manifests itself in a large
number of pull-requests which have been merged (please see below for a full list
of closed issues and pull-requests). All in all for this release, we closed
almost 100 issues and merged over 290 pull-requests. There have been over 1600
commits to the master branch since the last release.

[heading General Changes]

* We are moving into the direction of unifying managed and simple components. As
  such, the classes [classref hpx::components::component] and
  [classref hpx::components::component_base] have been added which currently just
  forward to the currently existing simple component facilities. The examples
  have been converted to only use those two classes.
* Added integration with the [@https://circleci.com/gh/STEllAR-GROUP/hpx CircleCI]
  hosted continuous integration service. This gives us constant and immediate
  feedback on the health of our master branch.
* The compiler configuration subsystem in the build system has been reimplemented.
  Instead of using Boost.Config we now use our own lightweight set of cmake
  scripts to determine the available language and library features supported by
  the used compiler.
* The API for creating instances of components has been consolidated. All
  component instances should be created using the [funcref hpx::new_ `hpx::new_<>()`]
  only. It allows to instantiate both, single component instances and multiple
  component instances. The placement of the created components can be controlled
  by special distribution policies. Please see the corresponding documentation
  outlining the use of [funcref hpx::new_ `hpx::new_<>()`].
* Introduced four new distribution policies which can be used with many API
  functions which traditionally expected to be used with a locality id. The
  new distribution policies are:
  * [classref hpx::components::default_distribution_policy `hpx::default_distribution_policy`]
    which tries to place multiple component instances as evenly as possible.
  * [classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`]
    which will refer to the locality where a given component instance is
    currently placed.
  * [classref hpx::components::binpacking_distribution_policy `hpx::binpacking_distribution_policy`]
    which will place multiple component instances as evenly as possible based
    on any performance counter.
  * [classref hpx::components::target_distribution_policy `hpx::target_distribution_policy`]
    which allows to represent a given locality in the context of a distrwibution
    policy.
* The new distribution policies can now be also used with `hpx::async`. This
  change also deprecates `hpx::async_colocated(id, ...)` which now is replaced
  by a distribution policy: `hpx::async(hpx::colocated(id), ...)`.
* The `hpx::vector` and `hpx::unordered_map` data structures can now be used
  with the new distribution policies as well.
* The parallel facility `hpx::parallel::task_region` has been renamed to
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] based on
  the changes in the corresponding standardization proposal __cpp11_n4088__.
* Added extensions to the parallel facility
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] allowing
  to combine a task_block with an execution policy. This implies a minor
  breaking change as the `hpx::parallel::task_block` is now a template.
* Added new LCOs: `hpx::lcos::latch` and `hpx::lcos::local::latch` which
  semantically conform to the proposed `std::latch` (see __cpp17_n4399__).
* Added performance counters exposing data related to data transferred by
  input/output (filesystem) operations (thanks to Maciej Brodowicz).
* Added performance counters allowing to track the number of action invocations
  (local and remote invocations).
* Added new command line options [hpx_cmdline `--hpx:print-counter-at`] and
  [hpx_cmdline `--hpx:reset-counters`].
* The `hpx::vector` component has been renamed to `hpx::partitioned_vector` to
  make it explicit that the underlying memory is not contiguous.
* Introduced a completely new and uniform higher-level parallelism API which is
  based on executors. All existing parallelism APIs have been adapted to this.
  We have added a large number of different executor types, such as a
  numa-aware executor, a this-thread executor, etc.
* Added support for the MingW toolchain on Windows (thanks to Eric Lemanissier).
* HPX now includes support for APEX, (Autonomic Performance Environment for
  eXascale). APEX is an instrumentation and software adaptation library that
  provides an interface to TAU profiling / tracing as well as runtime adaptation
  of HPX applications through policy definitions. For more information and
  documentation, please see https://github.com/khuck/xpress-apex. To enable
  APEX at configuration time, specify `-DHPX_WITH_APEX=On`. To also include
  support for TAU profiling, specify `-DHPX_WITH_TAU=On` and specify the
  `-DTAU_ROOT`, `-DTAU_ARCH` and `-DTAU_OPTIONS` cmake parameters.
* We have implemented many more of the
  [link hpx.manual.parallel.parallel_algorithms.parallel_algorithms parallel algorithms].
  Please see [issue 1141] for the list of all available parallel algorithms
  (thanks to Daniel Bourgeois and John Biddiscombe for contributing their work).

[heading Breaking Changes]

* We are moving into the direction of unifying managed and simple components. In
  order to stop exposing the old facilities, all examples have been converted to
  use the new classes. The breaking change in this release is that performance
  counters are now a [classref hpx::components::component_base] instead of
  [classref hpx::components::managed_component_base].
* We removed the support for stackless threads. It turned out that there was no
  performance benefit when using stackless threads. As such, we decided to clean
  up our codebase. This feature was not documented.
* The CMake project name has changed from 'hpx' to 'HPX' for consistency and
  compatibilty with naming conventions and other CMake projects. Generated
  config files go into <prefix>/lib/cmake/HPX and not <prefix>/lib/cmake/hpx.
* The macro `HPX_REGISTER_MINIMAL_COMPONENT_FACTORY` has been deprecated. Please
  use [macroref HPX_REGISTER_COMPONENT `HPX_REGISTER_COMPONENT`] instead.
  The old macro will be removed in the next release.
* The obsolete distributing_factory and binpacking_factory components have been
  removed. The corresponding functionality is now provided by the
  [funcref hpx::new_ `hpx::new_<>()`] API function in conjunction with the
  `hpx::default_layout` and `hpx::binpacking` distribution policies
  ([classref hpx::components::default_distribution_policy `hpx::default_distribution_policy`] and
  [classref hpx::components::binpacking_distribution_policy `hpx::binpacking_distribution_policy`])
* The API function `hpx::new_colocated` has been deprecated. Please use the
  consolidated API [funcref hpx::new_ `hpx::new_`] in conjunction with the new
  `hpx::colocated` distribution policy
  ([classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`])
  instead. The old API function will still be available for at least one
  release of __hpx__ if the configuration variable
  `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` is enabled.
* The API function `hpx::async_colocated` has been deprecated. Please use the
  consolidated API `hpx::async` in conjunction with the new `hpx::colocated`
  distribution policy
  ([classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`])
  instead. The old API function will still be available for
  at least one  release of __hpx__ if the configuration variable
  `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` is enabled.
* The obsolete remote_object component has been removed.
* Replaced the use of Boost.Serialization with our own solution. While the new
  version is mostly compatible with Boost.Serialization, this change requires
  some minor code modifications in user code. For more information, please see the
  corresponding [@http://thread.gmane.org/gmane.comp.lib.hpx.devel/196 announcement]
  on the __stellar_list__ mailing list.
* The names used by cmake to influence various configuration options have been
  unified. The new naming scheme relies on all configuration constants to start
  with `HPX_WITH_...`, while the preprocessor constant which is used at build
  time starts with `HPX_HAVE_...`. For instance, the former cmake command line
  `-DHPX_MALLOC=...` now has to be specified a `-DHPX_WITH_MALLOC=...` and will
  cause the preprocessor constant `HPX_HAVE_MALLOC` to be defined. The actual
  name of the constant (i.e. `MALLOC`) has not changed. Please see the
  corresponding documentation for more details (__cmake_options__).
* The `get_gid()` functions exposed by the component base classes
  `hpx::components::server::simple_component_base`,
  `hpx::components::server::managed_component_base`, and
  `hpx::components::server::fixed_component_base` have been replaced by two new
  functions: `get_unmanaged_id()` and `get_id()`. To enable the old function
  name for backwards compatibility, use the cmake configuration option
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY=On`.
* All functions which were named `get_gid()` but were returning `hpx::id_type`
  have been renamed to `get_id()`. To enable the old function names for
  backwards compatibility, use the cmake configuration option
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY=On`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    1855] - Completely removing external/endian
* [pr    1854] - Don't pollute CMAKE_CXX_FLAGS through find_package()
* [pr    1853] - Updating CMake configuration to get correct version of TAU
                 library
* [pr    1852] - Fixing Performance Problems with MPI Parcelport
* [pr    1851] - Fixing hpx_add_link_flag() and hpx_remove_link_flag()
* [pr    1850] - Fixing 1836, adding parallel::sort
* [pr    1849] - Fixing configuration for use of more than 64 cores
* [pr    1848] - Change default APEX version for release
* [pr    1847] - Fix client_base::then on release
* [pr    1846] - Removing broken lcos::local::channel from release
* [pr    1845] - Adding example demonstrating a possible safe-object
                 implementation to release
* [pr    1844] - Removing stubs from accumulator examples
* [pr    1843] - Don't pollute CMAKE_CXX_FLAGS through find_package()
* [pr    1841] - Fixing client_base<>::then
* [pr    1840] - Adding example demonstrating a possible safe-object
                 implementation
* [pr    1838] - Update version rc1
* [pr    1837] - Removing broken lcos::local::channel
* [pr    1835] - Adding exlicit move constructor and assignment operator to
                 hpx::lcos::promise
* [pr    1834] - Making hpx::lcos::promise move-only
* [pr    1833] - Adding fedora docs
* [issue 1832] - hpx::lcos::promise<> must be move-only
* [pr    1831] - Fixing resource manager gcc5.2
* [pr    1830] - Fix intel13
* [pr    1829] - Unbreaking thread test
* [pr    1828] - Fixing #1620
* [pr    1827] - Fixing a memory management issue for the Parquet application
* [issue 1826] - Memory management issue in hpx::lcos::promise
* [pr    1825] - Adding hpx::components::component and
                 hpx::components::component_base
* [pr    1823] - Adding git commit id to circleci build
* [pr    1822] - applying fixes suggested by clang 3.7
* [pr    1821] - Hyperlink fixes
* [pr    1820] - added parallel multi-locality sanity test
* [pr    1819] - Fixing #1667
* [issue 1817] - Hyperlinks generated by inspect tool are wrong
* [pr    1816] - Support hpxrx
* [pr    1814] - Fix async to dispatch to the correct locality in all cases
* [issue 1813] - async(launch::..., action(), ...) always invokes locally
* [pr    1812] - fixed syntax error in CMakeLists.txt
* [pr    1811] - Agas optimizations
* [pr    1810] - drop superfluous typedefs
* [pr    1809] - Allow HPX to be used as an optional package in 3rd party code
* [pr    1808] - Fixing #1723
* [pr    1807] - Making sure resolve_localities does not hang during normal
                 operation
* [issue 1806] - Spinlock no longer movable and deletes operator '=', breaks
                 MiniGhost
* [issue 1804] - register_with_basename causes hangs
* [pr    1801] - Enhanced the inspect tool to take user directly to the problem
                 with hyperlinks
* [issue 1800] - Problems compiling application on smic
* [pr    1799] - Fixing cv exceptions
* [pr    1798] - Documentation refactoring & updating
* [pr    1797] - Updating the activeharmony CMake module
* [pr    1795] - Fixing cv
* [pr    1794] - Fix connect with hpx::runtime_mode_connect
* [pr    1793] - fix a wrong use of HPX_MAX_CPU_COUNT instead of
                 HPX_HAVE_MAX_CPU_COUNT
* [pr    1792] - Allow for default constructed parcel instances to be moved
* [pr    1791] - Fix connect with hpx::runtime_mode_connect
* [issue 1790] - assertion 'action_.get()' failed: HPX(assertion_failure) when
                 running Octotiger with pull request 1786
* [pr    1789] - Fixing discover_counter_types API function
* [issue 1788] - connect with hpx::runtime_mode_connect
* [issue 1787] - discover_counter_types not working
* [pr    1786] - Changing addressing_service to use std::unordered_map instead
                 of std::map
* [pr    1785] - Fix is_iterator for container algorithms
* [pr    1784] - Adding new command line options:
* [pr    1783] - Minor changes for APEX support
* [pr    1782] - Drop legacy forwarding action traits
* [pr    1781] - Attempt to resolve the race between cv::wait_xxx and
                 cv::notify_all
* [pr    1780] - Removing serialize_sequence
* [pr    1779] - Fixed #1501: hwloc configuration options are wrong for MIC
* [pr    1778] - Removing ability to enable/disable parcel handling
* [pr    1777] - Completely removing stackless threads
* [pr    1776] - Cleaning up util/plugin
* [pr    1775] - Agas fixes
* [pr    1774] - Action invocation count
* [pr    1773] - replaced MSVC variable with WIN32
* [pr    1772] - Fixing Problems in MPI parcelport and future serialization.
* [pr    1771] - Fixing intel 13 compiler errors related to variadic template
                 template parameters for lcos::when_ tests
* [pr    1770] - Forwarding decay to std::
* [pr    1769] - Add more characters with special regex meaning to the existing
                 patch
* [pr    1768] - Adding test for receive_buffer
* [pr    1767] - Making sure that uptime counter throws exception on any attempt
                 to be reset
* [pr    1766] - Cleaning up code related to throttling scheduler
* [pr    1765] - Restricting thread_data to creating only with intrusive_pointers
* [pr    1764] - Fixing 1763
* [issue 1763] - UB in thread_data::operator delete
* [pr    1762] - Making sure all serialization registries/factories are unique
* [pr    1761] - Fixed #1751: hpx::future::wait_for fails a simple test
* [pr    1758] - Fixing #1757
* [issue 1757] - pinning not correct using --hpx:bind
* [issue 1756] - compilation error with MinGW
* [pr    1755] - Making output serialization const-correct
* [issue 1753] - HPX performance degrades with time since execution begins
* [issue 1752] - Error in AGAS
* [issue 1751] - hpx::future::wait_for fails a simple test
* [pr    1750] - Removing hpx_fwd.hpp includes
* [pr    1749] - Simplify result_of and friends
* [pr    1747] - Removed superfluous code from message_buffer.hpp
* [pr    1746] - Tuple dependencies
* [issue 1745] - Broken when_some which takes iterators
* [pr    1744] - Refining archive interface
* [pr    1743] - Fixing when_all when only a single future is passed
* [pr    1742] - Config includes
* [pr    1741] - Os executors
* [issue 1740] - hpx::promise has some problems
* [pr    1739] - Parallel composition with generic containers
* [issue 1738] - After building program and successfully linking to a version
                 of hpx DHPX_DIR seems to be ignored
* [issue 1737] - Uptime problems
* [pr    1736] - added convenience c-tor and begin()/end() to serialize_buffer
* [pr    1735] - Config includes
* [pr    1734] - Fixed #1688: Add timer counters for tfunc_total and exec_total
* [issue 1733] - Add unit test for hpx/lcos/local/receive_buffer.hpp
* [pr    1732] - Renaming get_os_thread_count
* [pr    1731] - Basename registration
* [issue 1730] - Use after move of thread_init_data
* [pr    1729] - Rewriting channel based on new gate component
* [pr    1728] - Fixing #1722
* [pr    1727] - Fixing compile problems with apply_colocated
* [pr    1726] - Apex integration
* [pr    1725] - fixed test timeouts
* [pr    1724] - Renaming vector
* [issue 1723] - Drop support for intel compilers and gcc 4.4. based standard libs
* [issue 1722] - Add support for detecting non-ready futures before serialization
* [pr    1721] - Unifying parallel executors, initializing from launch policy
* [pr    1720] - dropped superfluous typedef
* [issue 1718] - Windows 10 x64, VS 2015 - Unknown CMake command
                 "add_hpx_pseudo_target".
* [pr    1717] - Timed executor traits for thread-executors
* [pr    1716] - serialization of arrays didn't work with non-pod types. fixed
* [pr    1715] - List serialization
* [pr    1714] - changing misspellings
* [pr    1713] - Fixed distribution policy executors
* [pr    1712] - Moving library detection to be executed after feature tests
* [pr    1711] - Simplify parcel
* [pr    1710] - Compile only tests
* [pr    1709] - Implemented timed executors
* [pr    1708] - Implement parallel::executor_traits for thread-executors
* [pr    1707] - Various fixes to threads::executors to make custom schedulers
                 work
* [pr    1706] - Command line option --hpx:cores does not work as expected
* [issue 1705] - command line option --hpx:cores does not work as expected
* [pr    1704] - vector deserialization is speeded up a little
* [pr    1703] - Fixing shared_mutes
* [issue 1702] - Shared_mutex does not compile with no_mutex cond_var
* [pr    1701] - Add distribution_policy_executor
* [pr    1700] - Executor parameters
* [pr    1699] - Readers writer lock
* [pr    1698] - Remove leftovers
* [pr    1697] - Fixing held locks
* [pr    1696] - Modified Scan Partitioner for Algorithms
* [pr    1695] - This thread executors
* [pr    1694] - Fixed #1688: Add timer counters for tfunc_total and exec_total
* [pr    1693] - Fix #1691: is_executor template specification fails for
                 inherited executors
* [pr    1692] - Fixed #1662: Possible exception source in
                 coalescing_message_handler
* [issue 1691] - is_executor template specification fails for inherited executors
* [pr    1690] - added macro for non-intrusive serialization of classes without
                 a default c-tor
* [pr    1689] - Replace value_or_error with custom storage, unify future_data
                 state
* [issue 1688] - Add timer counters for tfunc_total and exec_total
* [pr    1687] - Fixed interval timer
* [pr    1686] - Fixing cmake warnings about not existing pseudo target
                 dependencies
* [pr    1685] - Converting partitioners to use bulk async execute
* [pr    1683] - Adds a tool for inspect that checks for character limits
* [pr    1682] - Change project name to (uppercase) HPX
* [pr    1681] - Counter shortnames
* [pr    1680] - Extended Non-intrusive Serialization to Ease Usage for Library
                 Developers
* [pr    1679] - Working on 1544: More executor changes
* [pr    1678] - Transpose fixes
* [pr    1677] - Improve Boost compatibility check
* [pr    1676] - 1d stencil fix
* [issue 1675] - hpx project name is not HPX
* [pr    1674] - Fixing the MPI parcelport
* [pr    1673] - added move semantics to map/vector deserialization
* [pr    1672] - Vs2015 await
* [pr    1671] - Adapt transform for #1668
* [pr    1670] - Started to work on #1668
* [pr    1669] - Add this_thread_executors
* [issue 1667] - Apple build instructions in docs are out of date
* [pr    1666] - Apex integration
* [pr    1665] - Fixes an error with the whitespace check that showed the
                 incorrect location of the error
* [issue 1664] - Inspect tool found incorrect endline whitespace
* [pr    1663] - Improve use of locks
* [issue 1662] - Possible exception source in coalescing_message_handler
* [pr    1661] - Added support for 128bit number serialization
* [pr    1660] - Serialization 128bits
* [pr    1659] - Implemented inner_product and adjacent_diff algos
* [pr    1658] - Add serialization for std::set (as there is for std::vector
                 and std::map)
* [pr    1657] - Use of shared_ptr in io_service_pool changed to unique_ptr
* [issue 1656] - 1d_stencil codes all have wrong factor
* [pr    1654] - When using runtime_mode_connect, find the correct localhost
                 public ip address
* [pr    1653] - Fixing 1617
* [pr    1652] - Remove traits::action_may_require_id_splitting
* [pr    1651] - Fixed performance counters related to AGAS cache timings
* [pr    1650] - Remove leftovers of traits::type_size
* [pr    1649] - Shorten target names on Windows to shorten used path names
* [pr    1648] - Fixing problems introduced by merging #1623 for older compilers
* [pr    1647] - Simplify running automatic builds on Windows
* [issue 1646] - Cache insert and update performance counters are broken
* [issue 1644] - Remove leftovers of traits::type_size
* [issue 1643] - Remove traits::action_may_require_id_splitting
* [pr    1642] - Adds spell checker to the inspect tool for qbk and doxygen
                 comments
* [pr    1640] - First step towards fixing 688
* [pr    1639] - Re-apply remaining changes from limit_dataflow_recursion branch
* [pr    1638] - This fixes possible deadlock in the test
                 ignore_while_locked_1485
* [pr    1637] - Fixing hpx::wait_all() invoked with two vector<future<T>>
* [pr    1636] - Partially re-apply changes from limit_dataflow_recursion
                 branch
* [pr    1635] - Adding missing test for #1572
* [pr    1634] - Revert "Limit recursion-depth in dataflow to a configurable
                 constant"
* [pr    1633] - Add command line option to ignore batch environment
* [pr    1631] - hpx::lcos::queue exhibits strange behavior
* [pr    1630] - Fixed endline_whitespace_check.cpp to detect lines with only
                 whitespace
* [issue 1629] - Inspect trailing whitespace checker problem
* [pr    1628] - Removed meaningless const qualifiers. Minor icpc fix.
* [pr    1627] - Fixing the queue LCO and add example demonstrating its use
* [pr    1626] - Deprecating get_gid(), add get_id() and get_unmanaged_id()
* [pr    1625] - Allowing to specify whether to send credits along with message
* [issue 1624] - Lifetime issue
* [issue 1623] - hpx::wait_all() invoked with two vector<future<T>> fails
* [pr    1622] - Executor partitioners
* [pr    1621] - Clean up coroutines implementation
* [issue 1620] - Revert #1535
* [pr    1619] - Fix result type calculation for hpx::make_continuation
* [pr    1618] - Fixing RDTSC on Xeon/Phi
* [issue 1617] - hpx cmake not working when run as a subproject
* [issue 1616] - cmake problem resulting in RDTSC not working correctly for
                 Xeon Phi creates very strange results for duration counters
* [issue 1615] - hpx::make_continuation requires input and output to be the same
* [pr    1614] - Fixed remove copy test
* [issue 1613] - Dataflow causes stack overflow
* [pr    1612] - Modified foreach partitioner to use bulk execute
* [pr    1611] - Limit recursion-depth in dataflow to a configurable constant
* [pr    1610] - Increase timeout for CircleCI
* [pr    1609] - Refactoring thread manager, mainly extracting thread pool
* [pr    1608] - Fixed running multiple localities without localities parameter
* [pr    1607] - More algorithm fixes to adjacentfind
* [issue 1606] - Running without localities parameter binds to bogus port range
* [issue 1605] - Too many serializations
* [pr    1604] - Changes the HPX image into a hyperlink
* [pr    1601] - Fixing problems with remove_copy algorithm tests
* [pr    1600] - Actions with ids cleanup
* [pr    1599] - Duplicate binding of global ids should fail
* [pr    1598] - Fixing array access
* [pr    1597] - Improved the reliability of connecting/disconnecting localities
* [issue 1596] - Duplicate id binding should fail
* [pr    1595] - Fixing more cmake config constants
* [pr    1594] - Fixing preprocessor constant used to enable C++11 chrono
* [pr    1593] - Adding operator|() for hpx::launch
* [issue 1592] - Error (typo) in the docs
* [issue 1590] - CMake fails when CMAKE_BINARY_DIR contains '+'.
* [issue 1589] - Disconnecting a locality results in segfault using heartbeat
                 example
* [pr    1588] - Fix doc string for config option HPX_WITH_EXAMPLES
* [pr    1586] - Fixing 1493
* [pr    1585] - Additional Check for Inspect Tool to detect Endline Whitespace
* [issue 1584] - Clean up coroutines implementation
* [pr    1583] - Adding a check for end line whitespace
* [pr    1582] - Attempt to fix assert firing after scheduling loop was exited
* [pr    1581] - Fixed adjacentfind_binary test
* [pr    1580] - Prevent some of the internal cmake lists from growing
                 indefinitely
* [pr    1579] - Removing type_size trait, replacing it with special archive
                 type
* [issue 1578] - Remove demangle_helper
* [pr    1577] - Get ptr problems
* [issue 1576] - Refactor async, dataflow, and future::then
* [pr    1575] - Fixing tests for parallel rotate
* [pr    1574] - Cleaning up schedulers
* [pr    1573] - Fixing thread pool executor
* [pr    1572] - Fixing number of configured localities
* [pr    1571] - Reimplement decay
* [pr    1570] - Refactoring async, apply, and dataflow APIs
* [pr    1569] - Changed range for mach-o library lookup
* [pr    1568] - Mark decltype support as required
* [pr    1567] - Removed const from algorithms
* [issue 1566] - CMAKE Configuration Test Failures for clang 3.5 on debian
* [pr    1565] - Dylib support
* [pr    1564] - Converted partitioners and some algorithms to use executors
* [pr    1563] - Fix several #includes for Boost.Preprocessor
* [pr    1562] - Adding configuration option disabling/enabling all message
                 handlers
* [pr    1561] - Removed all occurrences of boost::move replacing it with
                 std::move
* [issue 1560] - Leftover HPX_REGISTER_ACTION_DECLARATION_2
* [pr    1558] - Revisit async/apply SFINAE conditions
* [pr    1557] - Removing type_size trait, replacing it with special archive
                 type
* [pr    1556] - Executor algorithms
* [pr    1555] - Remove the necessity to specify archive flags on the receiving
                 end
* [pr    1554] - Removing obsolete Boost.Serialization macros
* [pr    1553] - Properly fix HPX_DEFINE_*_ACTION macros
* [pr    1552] - Fixed algorithms relying on copy_if implementation
* [pr    1551] - Pxfs - Modifying FindOrangeFS.cmake based on OrangeFS 2.9.X
* [issue 1550] - Passing plain identifier inside HPX_DEFINE_PLAIN_ACTION_1
* [pr    1549] - Fixing intel14/libstdc++4.4
* [pr    1548] - Moving raw_ptr to detail namespace
* [pr    1547] - Adding support for executors to future.then
* [pr    1546] - Executor traits result types
* [pr    1545] - Integrate executors with dataflow
* [pr    1543] - Fix potential zero-copy for primarynamespace::bulk_service_async
                 et.al.
* [pr    1542] - Merging HPX0.9.10 into pxfs branch
* [pr    1541] - Removed stale cmake tests, unused since the great cmake
                 refactoring
* [pr    1540] - Fix idle-rate on platforms without TSC
* [pr    1539] - Reporting situation if zero-copy-serialization was performed
                 by a parcel generated from a plain apply/async
* [pr    1538] - Changed return type of bulk executors and added test
* [issue 1537] - Incorrect cpuid config tests
* [pr    1536] - Changed return type of bulk executors and added test
* [pr    1535] - Make sure promise::get_gid() can be called more than once
* [pr    1534] - Fixed async_callback with bound callback
* [pr    1533] - Updated the link in the documentation to a publically-
                 accessible URL
* [pr    1532] - Make sure sync primitives are not copyable nor movable
* [pr    1531] - Fix unwrapped issue with future ranges of void type
* [pr    1530] - Serialization complex
* [issue 1528] - Unwrapped issue with future<void>
* [issue 1527] - HPX does not build with Boost 1.58.0
* [pr    1526] - Added support for boost.multi_array serialization
* [pr    1525] - Properly handle deferred futures, fixes #1506
* [pr    1524] - Making sure invalid action argument types generate clear error
                 message
* [issue 1522] - Need serialization support for boost multi array
* [issue 1521] - Remote async and zero-copy serialization optimizations don't
                 play well together
* [pr    1520] - Fixing UB whil registering polymorphic classes for serialization
* [pr    1519] - Making detail::condition_variable safe to use
* [pr    1518] - Fix when_some bug missing indices in its result
* [issue 1517] - Typo may affect CMake build system tests
* [pr    1516] - Fixing Posix context
* [pr    1515] - Fixing Posix context
* [pr    1514] - Correct problems with loading dynamic components
* [pr    1513] - Fixing intel glibc4 4
* [issue 1508] - memory and papi counters do not work
* [issue 1507] - Unrecognized Command Line Option Error causing exit status 0
* [issue 1506] - Properly handle deferred futures
* [pr    1505] - Adding #include - would not compile without this
* [issue 1502] - `boost::filesystem::exists` throws unexpected exception
* [issue 1501] - hwloc configuration options are wrong for MIC
* [pr    1504] - Making sure boost::filesystem::exists() does not throw
* [pr    1500] - Exit application on `--hpx:version`/`-v` and `--hpx:info`
* [pr    1498] - Extended task block
* [pr    1497] - Unique ptr serialization
* [pr    1496] - Unique ptr serialization (closed)
* [pr    1495] - Switching circleci build type to debug
* [issue 1494] - `--hpx:version`/`-v` does not exit after printing version
                 information
* [issue 1493] - add an "hpx_" prefix to libraries and components to avoid name
                 conflicts
* [issue 1492] - Define and ensure limitations for arguments to async/apply
* [pr    1489] - Enable idle rate counter on demand
* [pr    1488] - Made sure `detail::condition_variable` can be safely destroyed
* [pr    1487] - Introduced default (main) template implementation for
                 `ignore_while_checking`
* [pr    1486] - Add HPX inspect tool
* [issue 1485] - `ignore_while_locked` doesn't support all Lockable types
* [pr    1484] - Docker image generation
* [pr    1483] - Move external endian library into HPX
* [pr    1482] - Actions with integer type ids
* [issue 1481] - Sync primitives safe destruction
* [issue 1480] - Move external/boost/endian into hpx/util
* [issue 1478] - Boost inspect violations
* [pr    1479] - Adds serialization for arrays; some futher/minor fixes
* [pr    1477] - Fixing problems with the Intel compiler using a GCC 4.4 std
                 library
* [pr    1476] - Adding `hpx::lcos::latch` and `hpx::lcos::local::latch`
* [issue 1475] - Boost inspect violations
* [pr    1473] - Fixing action move tests
* [issue 1471] - Sync primitives should not be movable
* [pr    1470] - Removing `hpx::util::polymorphic_factory`
* [pr    1468] - Fixed container creation
* [issue 1467] - HPX application fail during finalization
* [issue 1466] - HPX doesn't pick up Torque's nodefile on SuperMIC
* [issue 1464] - HPX option for pre and post bootstrap performance counters
* [pr    1463] - Replacing `async_colocated(id, ...)` with `async(colocated(id), ...)`
* [pr    1462] - Consolidated task_region with N4411
* [pr    1461] - Consolidate inconsistent CMake option names
* [issue 1460] - Which malloc is actually used? or at least which one is HPX
                 built with
* [issue 1459] - Make cmake configure step fail explicitly if compiler version
                 is not supported
* [issue 1458] - Update `parallel::task_region` with N4411
* [pr    1456] - Consolidating `new_<>()`
* [issue 1455] - Replace `async_colocated(id, ...)` with `async(colocated(id), ...)`
* [pr    1454] - Removed harmful std::moves from return statements
* [pr    1453] - Use range-based for-loop instead of Boost.Foreach
* [pr    1452] - C++ feature tests
* [pr    1451] - When serializing, pass archive flags to traits::get_type_size
* [issue 1450] - traits:get_type_size needs archive flags to enable zero_copy
                 optimizations
* [issue 1449] - "couldn't create performance counter" - AGAS
* [issue 1448] - Replace distributing factories with `new_<T[]>(...)`
* [pr    1447] - Removing obsolete remote_object component
* [pr    1446] - Hpx serialization
* [pr    1445] - Replacing travis with circleci
* [pr    1443] - Always stripping HPX command line arguments before executing
                 start function
* [pr    1442] - Adding --hpx:bind=none to disable thread affinities
* [issue 1439] - Libraries get linked in multiple times, RPATH is not properly
                 set
* [pr    1438] - Removed superfluous typedefs
* [issue 1437] - `hpx::init()` should strip HPX-related flags from argv
* [issue 1436] - Add strong scaling option to htts
* [pr    1435] - Adding `async_cb`, `async_continue_cb`, and `async_colocated_cb`
* [pr    1434] - Added missing install rule, removed some dead CMake code
* [pr    1433] - Add GitExternal and SubProject cmake scripts from
                 eyescale/cmake repo
* [issue 1432] - Add command line flag to disable thread pinning
* [pr    1431] - Fix #1423
* [issue 1430] - Inconsistent CMake option names
* [issue 1429] - Configure setting `HPX_HAVE_PARCELPORT_MPI` is ignored
* [pr    1428] - Fixes #1419 (closed)
* [pr    1427] - Adding stencil_iterator and transform_iterator
* [pr    1426] - Fixes #1419
* [pr    1425] - During serialization memory allocation should honour allocator
                 chunk size
* [issue 1424] - chunk allocation during serialization does not use memory
                 pool/allocator chunk size
* [issue 1423] - Remove `HPX_STD_UNIQUE_PTR`
* [issue 1422] - hpx:threads=all allocates too many os threads
* [pr    1420] - added .travis.yml
* [issue 1419] - Unify enums: `hpx::runtime::state` and `hpx::state`
* [pr    1416] - Adding travis builder
* [issue 1414] - Correct directory for dispatch_gcc46.hpp iteration
* [issue 1410] - Set operation algorithms
* [issue 1389] - Parallel algorithms relying on scan partitioner break for small
                 number of elements
* [issue 1325] - Exceptions thrown during parcel handling are not handled correctly
* [issue 1315] - Errors while running performance tests
* [issue 1309] - `hpx::vector` partitions are not easily extendable by
                 applications
* [pr    1300] - Added serialization/de-serialization to examples.tuplespace
* [issue 1251] - hpx::threads::get_thread_count doesn't consider pending threads
* [issue 1008] - Decrease in application performance overtime; occasional
                 spikes of major slowdown
* [issue 1001] - Zero copy serialization raises assert
* [issue  721] - Make HPX usable for Xeon Phi
* [issue  524] - Extend scheduler to support threads which can't be stolen

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_10 __hpx__ V0.9.10 (Mar 24, 2015)]

[heading General Changes]

This is the 12th official release of __hpx__. It coincides with the 7th
anniversary of the first commit to our source code repository. Since then,
we have seen over 12300 commits amounting to more than 220000 lines of C++ code.

The major focus of this release was to improve the reliability of large scale
runs. We believe to have achieved this goal as we now can reliably run __hpx__
applications on up to ~24k cores. We have also shown that HPX can be used with
success for symmetric runs (applications using both, host cores and Intel
Xeon/Phi coprocessors). This is a huge step forward in terms of
the usability of __hpx__. The main focus of this work involved isolating
the causes of the segmentation faults at start up and shut down.  Many of
these issues were discovered to be the result of the suspension of threads
which hold locks.

A very important improvement introduced with this release is the
refactoring of the code representing our parcel-port implementation. Parcel-
ports can now be implemented by 3rd parties as independent plugins which are
dynamically loaded at runtime (static linking of parcel-ports is also
supported). This refactoring also includes a massive improvement of the
performance of our existing parcel-ports. We were able to significantly reduce
the networking latencies and to improve the available networking bandwidth.
Please note that in this release we disabled the ibverbs and ipc parcel ports
as those have not been ported to the new plugin system yet (see [issue 839]).

Another corner stone of this release is our work towards a complete
implementation of __cpp11_n4104__ (Working Draft, Technical Specification for
C++ Extensions for Parallelism). This document defines a set of parallel
algorithms to be added to the C++ standard library.
We now have implemented about 75% of all specified parallel algorithms (see
[link hpx.manual.parallel.parallel_algorithms Parallel Algorithms] for more
details). We also implemented some extensions to __cpp11_n4104__ allowing to
invoke all of the algorithms asynchronously.

This release adds a first implementation of `hpx::vector` which is a distributed
data structure closely aligned to the functionality of `std::vector`. The
difference is that `hpx::vector` stores the data in partitions where the
partitions can be distributed over different localities. We started to work on
allowing to use the parallel algorithms with `hpx::vector`. At this point we have
implemented only a few of the parallel algorithms to support distributed data
structures (like `hpx::vector`) for testing purposes (see [issue 1338] for
a documentation of our progress).

[heading Breaking Changes]

With this release we put a lot of effort into changing the code base to be more
compatible to C++11. These changes have caused the following issues for
backward compatibility:

* Move to Variadics- All of the API now uses variadic templates. However, this
change required to modify the argument sequence for some of the exiting API
functions ([funcref hpx::async_continue `hpx::async_continue`],
[funcref hpx::apply_continue `hpx::apply_continue`],
[funcref hpx::when_each `hpx::when_each`],
[funcref hpx::wait_each `hpx::wait_each`], synchronous invocation of actions).

* Changes to Macros- We also removed the macros `HPX_STD_FUNCTION` and
`HPX_STD_TUPLE`.
This shouldn't affect any user
code as we replaced `HPX_STD_FUNCTION` with `hpx::util::function_nonser` which
was the default expansion used for this macro. All __hpx__ API functions which
expect a `hpx::util::function_nonser` (or a `hpx::util::unique_function_nonser`)
can now be transparently called with a compatible `std::function` instead.
Similarly, `HPX_STD_TUPLE` was replaced by its default expansion as well:
`hpx::util::tuple`.

* Changes to `hpx::unique_future`- `hpx::unique_future`, which was deprecated
in the previous release for
[funcref hpx::future `hpx::future`] is now completely removed from __hpx__.
This completes the transition to a completely standards conforming
implementation of `hpx::future`.

* Changes to Supported Compilers- Finally, in order to utilize more
C++11 semantics, we have officially
dropped support for GCC 4.4 and MSVC 2012. Please see our __prerequisites__
page for more details.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [issue 1402] - Internal shared_future serialization copies
* [issue 1399] - Build takes unusually long time...
* [issue 1398] - Tests using the scan partitioner are broken on at least gcc 4.7
                 and intel compiler
* [issue 1397] - Completely remove hpx::unique_future
* [issue 1396] - Parallel scan algorithms with different initial values
* [issue 1395] - Race Condition - 1d_stencil_8 - SuperMIC
* [issue 1394] - "suspending thread while at least one lock is being held" -
                 1d_stencil_8 - SuperMIC
* [issue 1393] - SEGFAULT in 1d_stencil_8 on SuperMIC
* [issue 1392] - Fixing #1168
* [issue 1391] - Parallel Algorithms for scan partitioner for small number of
                 elements
* [issue 1387] - Failure with more than 4 localities
* [issue 1386] - Dispatching unhandled exceptions to outer user code
* [issue 1385] - Adding Copy algorithms, fixing `parallel::copy_if`
* [issue 1384] - Fixing 1325
* [issue 1383] - Fixed #504: Refactor Dataflow LCO to work with futures, this
                 removes the dataflow component as it is obsolete
* [issue 1382] - `is_sorted`, `is_sorted_until` and `is_partitioned`
                 algorithms
* [issue 1381] - fix for CMake versions prior to 3.1
* [issue 1380] - resolved warning in CMake 3.1 and newer
* [issue 1379] - Compilation error with papi
* [issue 1378] - Towards safer migration
* [issue 1377] - HPXConfig.cmake should include `TCMALLOC_LIBRARY` and
                 `TCMALLOC_INCLUDE_DIR `
* [issue 1376] - Warning on uninitialized member
* [issue 1375] - Fixing 1163
* [issue 1374] - Fixing the MSVC 12 release builder
* [issue 1373] - Modifying parallel search algorithm for zero length searches
* [issue 1372] - Modifying parallel search algorithm for zero length searches
* [issue 1371] - Avoid holding a lock during agas::incref while doing a credit
                 split
* [issue 1370] - `--hpx:bind` throws unexpected error
* [issue 1369] - Getting rid of (void) in loops
* [issue 1368] - Variadic templates support for tuple
* [issue 1367] - One last batch of variadic templates support
* [issue 1366] - Fixing symbolic namespace hang
* [issue 1365] - More held locks
* [issue 1364] - Add counters 1363
* [issue 1363] - Add thread overhead counters
* [issue 1362] - Std config removal
* [issue 1361] - Parcelport plugins
* [issue 1360] - Detuplify transfer_action
* [issue 1359] - Removed obsolete checks
* [issue 1358] - Fixing 1352
* [issue 1357] - Variadic templates support for runtime_support and components
* [issue 1356] - fixed coordinate test for intel13
* [issue 1355] - fixed coordinate.hpp
* [issue 1354] - Lexicographical Compare completed
* [issue 1353] - HPX should set `Boost_ADDITIONAL_VERSIONS` flags
* [issue 1352] - Error: Cannot find action '' in type registry: HPX(bad_action_code)
* [issue 1351] - Variadic templates support for appliers
* [issue 1350] - Actions simplification
* [issue 1349] - Variadic when and wait functions
* [issue 1348] - Added hpx_init header to test files
* [issue 1347] - Another batch of variadic templates support
* [issue 1346] - Segmented copy
* [issue 1345] - Attempting to fix hangs during shutdown
* [issue 1344] - Std config removal
* [issue 1343] - Removing various distribution policies for hpx::vector
* [issue 1342] - Inclusive scan
* [issue 1341] - Exclusive scan
* [issue 1340] - Adding `parallel::count` for distributed data structures,
                 adding tests
* [issue 1339] - Update argument order for transform_reduce
* [issue 1337] - Fix dataflow to handle properly ranges of futures
* [issue 1336] - dataflow needs to hold onto futures passed to it
* [issue 1335] - Fails to compile with msvc14
* [issue 1334] - Examples build problem
* [issue 1333] - Distributed transform reduce
* [issue 1332] - Variadic templates support for actions
* [issue 1331] - Some ambiguous calls of map::erase have been prevented by
                 adding additional check in locality constructor.
* [issue 1330] - Defining Plain Actions does not work as described in the
                 documentation
* [issue 1329] - Distributed vector cleanup
* [issue 1328] - Sync docs and comments with code in hello_world example
* [issue 1327] - Typos in docs
* [issue 1326] - Documentation and code diverged in Fibonacci tutorial
* [issue 1325] - Exceptions thrown during parcel handling are not handled
                 correctly
* [issue 1324] - fixed bandwidth calculation
* [issue 1323] - mmap() failed to allocate thread stack due to insufficient
                 resources
* [issue 1322] - HPX fails to build aa182cf
* [issue 1321] - Limiting size of outgoing messages while coalescing parcels
* [issue 1320] - passing a future with launch::deferred in remote function call
                 causes hang
* [issue 1319] - An exception when tries to specify number high priority
                 threads with abp-priority
* [issue 1318] - Unable to run program with abp-priority and numa-sensitivity
                 enabled
* [issue 1317] - N4071 Search/Search_n finished, minor changes
* [issue 1316] - Add config option to make -Ihpx.run_hpx_main!=1 the default
* [issue 1314] - Variadic support for async and apply
* [issue 1313] - Adjust when_any/some to the latest proposed interfaces
* [issue 1312] - Fixing #857: hpx::naming::locality leaks parcelport specific
                 information into the public interface
* [issue 1311] - Distributed get'er/set'er_values for distributed vector
* [issue 1310] - Crashing in hpx::parcelset::policies::mpi::connection_handler::handle_messages()
                 on SuperMIC
* [issue 1308] - Unable to execute an application with --hpx:threads
* [issue 1307] - merge_graph linking issue
* [issue 1306] - First batch of variadic templates support
* [issue 1305] - Create a compiler wrapper
* [issue 1304] - Provide a compiler wrapper for hpx
* [issue 1303] - Drop support for GCC44
* [issue 1302] - Fixing #1297
* [issue 1301] - Compilation error when tried to use boost range iterators with
                 wait_all
* [issue 1298] - Distributed vector
* [issue 1297] - Unable to invoke component actions recursively
* [issue 1294] - HDF5 build error
* [issue 1275] - The parcelport implementation is non-optimal
* [issue 1267] - Added classes and unit tests for local_file, orangefs_file and
                 pxfs_file
* [issue 1264] - Error "assertion '!m_fun' failed" randomly occurs when using TCP
* [issue 1254] - thread binding seems to not work properly
* [issue 1220] - parallel::copy_if is broken
* [issue 1217] - Find a better way of fixing the issue patched by #1216
* [issue 1168] - Starting HPX on Cray machines using aprun isn't working correctly
* [issue 1085] - Replace startup and shutdown barriers with broadcasts
* [issue 981]  - With SLURM, --hpx:threads=8 should not be necessary
* [issue 857]  - hpx::naming::locality leaks parcelport specific information
                 into the public interface
* [issue 850]  - "flush" not documented
* [issue 763]  - Create buildbot instance that uses std::bind as HPX_STD_BIND
* [issue 680]  - Convert parcel ports into a plugin system
* [issue 582]  - Make exception thrown from HPX threads available from
                 `hpx::init`
* [issue 504]  - Refactor Dataflow LCO to work with futures
* [issue 196]  - Don't store copies of the locality network metadata in the gva
                 table

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_9 __hpx__ V0.9.9 (Oct 31, 2014, codename Spooky)]

[heading General Changes]

We have had over 1500 commits since the last release and we have closed
over 200 tickets (bugs, feature requests, pull requests, etc.). These are by
far the largest numbers of commits and resolved issues for any of the __hpx__
releases so far.
We are especially happy about the large number of people who contributed for
the first time to __hpx__.

* We completed the transition from the older (non-conforming) implementation
  of `hpx::future` to the new and fully conforming version by removing the
  old code and by renaming the type `hpx::unique_future` to `hpx::future`. In
  order to maintain backwards compatibility with existing code which uses the
  type `hpx::unique_future` we support the configuration variable
  `HPX_UNIQUE_FUTURE_ALIAS`. If this variable is set to `ON` while running
  cmake it will additionally define a template alias for this type.
* We rewrote and significantly changed our build system. Please have a look at
  the new (now generated) documentation here:
  [link hpx.manual.build_system __hpx__ build system]. Please revisit your
  build scripts to adapt to the changes. The most notable changes are:
   * `HPX_NO_INSTALL` is no longer necessary.
   * For external builds, you need to set `HPX_DIR` instead of `HPX_ROOT` as
     described here:
     [link hpx.manual.build_system.using_hpx.using_hpx_cmake Using CMake].
   * IDEs that support multiple configurations (Visual Studio and XCode) can
     now be used as intended. that means no build dir.
   * Building HPX statically (without dynamic libraries) is now supported
     (`-DHPX_STATIC_LINKING=On`).
   * Please note that many variables used to configure the build process have
     been renamed to unify the naming conventions (see the section
     [link hpx.manual.build_system.building_hpx.cmake_variables CMake Variables used to configure __hpx__]
     for more information).
   * This also fixes a long list of issues, for more information see [issue 1204].
* We started to implement various proposals to the C++ Standardization committee
  related to parallelism and concurrency, most notably __cpp11_n4104__ (Working
  Draft, Technical Specification for C++ Extensions for Parallelism),
  __cpp11_n4088__ (Task Region Rev. 3), and __cpp11_n4107__ (Working Draft,
  Technical Specification for C++ Extensions for Concurrency).
* We completely remodeled our automatic build system to run builds and unit tests
  on various systems and compilers. This allows us to find most bugs right as
  they were introduced and helps to maintain a high level of quality and
  compatibility. The newest build logs can be found at __stellar_hpx_buildbot__.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [issue 1296] - Rename make_error_future to make_exceptional_future, adjust
                 to N4123
* [issue 1295] - building issue
* [issue 1293] - Transpose example
* [issue 1292] - Wrong abs() function used in example
* [issue 1291] - non-synchronized shift operators have been removed
* [issue 1290] - RDTSCP is defined as true for Xeon Phi build
* [issue 1289] - Fixing 1288
* [issue 1288] - Add new performance counters
* [issue 1287] - Hierarchy scheduler broken performance counters
* [issue 1286] - Algorithm cleanup
* [issue 1285] - Broken Links in Documentation
* [issue 1284] - Uninitialized copy
* [issue 1283] - missing boost::scoped_ptr includes
* [issue 1282] - Update documentation of build options for schedulers
* [issue 1281] - reset idle rate counter
* [issue 1280] - Bug when executing on Intel MIC
* [issue 1279] - Add improved when_all/wait_all
* [issue 1278] - Implement improved when_all/wait_all
* [issue 1277] - feature request: get access to argc argv and variables_map
* [issue 1276] - Remove merging map
* [issue 1274] - Weird (wrong) string code in papi.cpp
* [issue 1273] - Sequential task execution policy
* [issue 1272] - Avoid CMake name clash for Boost.Thread library
* [issue 1271] - Updates on HPX Test Units
* [issue 1270] - hpx/util/safe_lexical_cast.hpp is added
* [issue 1269] - Added default value for "LIB" cmake variable
* [issue 1268] - Memory Counters not working
* [issue 1266] - FindHPX.cmake is not installed
* [issue 1263] - apply_remote test takes too long
* [issue 1262] - Chrono cleanup
* [issue 1261] - Need make install for papi counters and this builds all the
                 examples
* [issue 1260] - Documentation of Stencil example claims
* [issue 1259] - Avoid double-linking Boost on Windows
* [issue 1257] - Adding additional parameter to create_thread
* [issue 1256] - added buildbot changes to release notes
* [issue 1255] - Cannot build MiniGhost
* [issue 1253] - hpx::thread defects
* [issue 1252] - HPX_PREFIX is too fragile
* [issue 1250] - switch_to_fiber_emulation does not work properly
* [issue 1249] - Documentation is generated under Release folder
* [issue 1248] - Fix usage of hpx_generic_coroutine_context and get tests
                 passing on powerpc
* [issue 1247] - Dynamic linking error
* [issue 1246] - Make cpuid.cpp C++11 compliant
* [issue 1245] - HPX fails on startup (setting thread affinity mask)
* [issue 1244] - HPX_WITH_RDTSC configure test fails, but should succeed
* [issue 1243] - CTest dashboard info for CSCS CDash drop location
* [issue 1242] - Mac fixes
* [issue 1241] - Failure in Distributed with Boost 1.56
* [issue 1240] - fix a race condition in examples.diskperf
* [issue 1239] - fix wait_each in examples.diskperf
* [issue 1238] - Fixed #1237: hpx::util::portable_binary_iarchive failed
* [issue 1237] - hpx::util::portable_binary_iarchive faileds
* [issue 1235] - Fixing clang warnings and errors
* [issue 1234] - TCP runs fail: Transport endpoint is not connected
* [issue 1233] - Making sure the correct number of threads is registered with
                 AGAS
* [issue 1232] - Fixing race in wait_xxx
* [issue 1231] - Parallel minmax
* [issue 1230] - Distributed run of 1d_stencil_8 uses less threads than spec.
                 & sometimes gives errors
* [issue 1229] - Unstable number of threads
* [issue 1228] - HPX link error (cmake / MPI)
* [issue 1226] - Warning about struct/class thread_counters
* [issue 1225] - Adding parallel::replace etc
* [issue 1224] - Extending dataflow to pass through non-future arguments
* [issue 1223] - Remaining find algorithms implemented, N4071
* [issue 1222] - Merging all the changes
* [issue 1221] - No error output when using mpirun with hpx
* [issue 1219] - Adding new AGAS cache performance counters
* [issue 1216] - Fixing using futures (clients) as arguments to actions
* [issue 1215] - Error compiling simple component
* [issue 1214] - Stencil docs
* [issue 1213] - Using more than a few dozen MPI processes on SuperMike results
                 in a seg fault before getting to hpx_main
* [issue 1212] - Parallel rotate
* [issue 1211] - Direct actions cause the future's shared_state to be leaked
* [issue 1210] - Refactored local::promise to be standard conformant
* [issue 1209] - Improve command line handling
* [issue 1208] - Adding parallel::reverse and parallel::reverse_copy
* [issue 1207] - Add copy_backward and move_backward
* [issue 1206] - N4071 additional algorithms implemented
* [issue 1204] - Cmake simplification and various other minor changes
* [issue 1203] - Implementing new launch policy for (local) async:
                 `hpx::launch::fork`.
* [issue 1202] - Failed assertion in connection_cache.hpp
* [issue 1201] - pkg-config doesn't add mpi link directories
* [issue 1200] - Error when querying time performance counters
* [issue 1199] - library path is now configurable (again)
* [issue 1198] - Error when querying performance counters
* [issue 1197] - tests fail with intel compiler
* [issue 1196] - Silence several warnings
* [issue 1195] - Rephrase initializers to work with VC++ 2012
* [issue 1194] - Simplify parallel algorithms
* [issue 1193] - Adding `parallel::equal`
* [issue 1192] - HPX(out_of_memory) on including <hpx/hpx.hpp>
* [issue 1191] - Fixing #1189
* [issue 1190] - Chrono cleanup
* [issue 1189] - Deadlock .. somewhere? (probably serialization)
* [issue 1188] - Removed `future::get_status()`
* [issue 1186] - Fixed FindOpenCL to find current AMD APP SDK
* [issue 1184] - Tweaking future unwrapping
* [issue 1183] - Extended `parallel::reduce`
* [issue 1182] - `future::unwrap` hangs for `launch::deferred`
* [issue 1181] - Adding `all_of`, `any_of`, and `none_of` and corresponding
                 documentation
* [issue 1180] - `hpx::cout` defect
* [issue 1179] - `hpx::async` does not work for member function pointers when
                 called on types with self-defined unary `operator*`
* [issue 1178] - Implemented variadic `hpx::util::zip_iterator`
* [issue 1177] - MPI parcelport defect
* [issue 1176] - `HPX_DEFINE_COMPONENT_CONST_ACTION_TPL` does not have a
                 2-argument version
* [issue 1175] - Create util::zip_iterator working with util::tuple<>
* [issue 1174] - Error Building HPX on linux, root_certificate_authority.cpp
* [issue 1173] - hpx::cout output lost
* [issue 1172] - HPX build error with Clang 3.4.2
* [issue 1171] - `CMAKE_INSTALL_PREFIX` ignored
* [issue 1170] - Close hpx_benchmarks repository on Github
* [issue 1169] - Buildbot emails have syntax error in url
* [issue 1167] - Merge partial implementation of standards proposal N3960
* [issue 1166] - Fixed several compiler warnings
* [issue 1165] - cmake warns: "tests.regressions.actions" does not exist
* [issue 1164] - Want my own serialization of hpx::future
* [issue 1162] - Segfault in hello_world example
* [issue 1161] - Use `HPX_ASSERT` to aid the compiler
* [issue 1160] - Do not put -DNDEBUG into hpx_application.pc
* [issue 1159] - Support Clang 3.4.2
* [issue 1158] - Fixed #1157: Rename when_n/wait_n, add when_xxx_n/wait_xxx_n
* [issue 1157] - Rename when_n/wait_n, add when_xxx_n/wait_xxx_n
* [issue 1156] - Force inlining fails
* [issue 1155] - changed header of printout to be compatible with python csv module
* [issue 1154] - Fixing iostreams
* [issue 1153] - Standard manipulators (like std::endl) do not work with
                 hpx::ostream
* [issue 1152] - Functions revamp
* [issue 1151] - Supressing cmake 3.0 policy warning for CMP0026
* [issue 1150] - Client Serialization error
* [issue 1149] - Segfault on Stampede
* [issue 1148] - Refactoring mini-ghost
* [issue 1147] - N3960 copy_if and copy_n implemented and tested
* [issue 1146] - Stencil print
* [issue 1145] - N3960 hpx::parallel::copy implemented and tested
* [issue 1144] - OpenMP examples 1d_stencil do not build
* [issue 1143] - 1d_stencil OpenMP examples do not build
* [issue 1142] - Cannot build HPX with gcc 4.6 on OS X
* [issue 1140] - Fix OpenMP lookup, enable usage of config tests in external
                 CMake projects.
* [issue 1139] - hpx/hpx/config/compiler_specific.hpp
* [issue 1138] - clean up pkg-config files
* [issue 1137] - Improvements to create binary packages
* [issue 1136] - HPX_GCC_VERSION not defined on all compilers
* [issue 1135] - Avoiding collision between winsock2.h and windows.h
* [issue 1134] - Making sure, that hpx::finalize can be called from any locality
* [issue 1133] - 1d stencil examples
* [issue 1131] - Refactor unique_function implementation
* [issue 1130] - Unique function
* [issue 1129] - Some fixes to the Build system on OS X
* [issue 1128] - Action future args
* [issue 1127] - Executor causes segmentation fault
* [issue 1124] - Adding new API functions: `register_id_with_basename`,
                 `unregister_id_with_basename`, `find_ids_from_basename`;
                 adding test
* [issue 1123] - Reduce nesting of try-catch construct in `encode_parcels`?
* [issue 1122] - Client base fixes
* [issue 1121] - Update `hpxrun.py.in`
* [issue 1120] - HTTS2 tests compile errors on v110 (VS2012)
* [issue 1119] - Remove references to boost::atomic in accumulator example
* [issue 1118] - Only build test thread_pool_executor_1114_test if
                 `HPX_LOCAL_SCHEDULER` is set
* [issue 1117] - local_queue_executor linker error on vc110
* [issue 1116] - Disabled performance counter should give runtime errors, not
                 invalid data
* [issue 1115] - Compile error with Intel C++ 13.1
* [issue 1114] - Default constructed executor is not usable
* [issue 1113] - Fast compilation of logging causes ABI incompatibilities
                 between different `NDEBUG` values
* [issue 1112] - Using thread_pool_executors causes segfault
* [issue 1111] - `hpx::threads::get_thread_data` always returns zero
* [issue 1110] - Remove unnecessary null pointer checks
* [issue 1109] - More tests adjustments
* [issue 1108] - Clarify build rules for "libboost_atomic-mt.so"?
* [issue 1107] - Remove unnecessary null pointer checks
* [issue 1106] - network_storage benchmark imporvements, adding legends to
                 plots and tidying layout
* [issue 1105] - Add more plot outputs and improve instructions doc
* [issue 1104] - Complete quoting for parameters of some CMake commands
* [issue 1103] - Work on test/scripts
* [issue 1102] - Changed minimum requirement of window install to 2012
* [issue 1101] - Changed minimum requirement of window install to 2012
* [issue 1100] - Changed readme to no longer specify using MSVC 2010 compiler
* [issue 1099] - Error returning futures from component actions
* [issue 1098] - Improve storage test
* [issue 1097] - data_actions quickstart example calls missing function
                 decorate_action of data_get_action
* [issue 1096] - MPI parcelport broken with new zero copy optimization
* [issue 1095] - Warning C4005: _WIN32_WINNT: Macro redefinition
* [issue 1094] - Syntax error for -DHPX_UNIQUE_FUTURE_ALIAS in master
* [issue 1093] - Syntax error for -DHPX_UNIQUE_FUTURE_ALIAS
* [issue 1092] - Rename unique_future<> back to future<>
* [issue 1091] - Inconsistent error message
* [issue 1090] - On windows 8.1 the examples crashed if using more than one os
                 thread
* [issue 1089] - Components should be allowed to have their own executor
* [issue 1088] - Add possibility to select a network interface for the
                 ibverbs parcelport
* [issue 1087] - ibverbs and ipc parcelport uses zero copy optimization
* [issue 1083] - Make shell examples copyable in docs
* [issue 1082] - Implement proper termination detection during shutdown
* [issue 1081] - Implement thread_specific_ptr for hpx::threads
* [issue 1072] - make install not working properly
* [issue 1070] - Complete quoting for parameters of some CMake commands
* [issue 1059] - Fix more unused variable warnings
* [issue 1051] - Implement when_each
* [issue 973]  - Would like option to report hwloc bindings
* [issue 970]  - Bad flags for Fortran compiler
* [issue 941]  - Create a proper user level context switching class for BG/Q
* [issue 935]  - Build error with gcc 4.6 and Boost 1.54.0 on hpx trunk and
                 0.9.6
* [issue 934]  - Want to build HPX without dynamic libraries
* [issue 927]  - Make hpx/lcos/reduce.hpp accept futures of id_type
* [issue 926]  - All unit tests that are run with more than one thread with
                 CTest/hpx_run_test should configure hpx.os_threads
* [issue 925]  - regression_dataflow_791 needs to be brought in line with HPX
                 standards
* [issue 899]  - Fix race conditions in regression tests
* [issue 879]  - Hung test leads to cascading test failure; make tests should
                 support the MPI parcelport
* [issue 865]  - future<T> and friends shall work for movable only Ts
* [issue 847]  - Dynamic libraries are not installed on OS X
* [issue 816]  - First Program tutorial pull request
* [issue 799]  - Wrap lexical_cast to avoid exceptions
* [issue 720]  - broken configuration when using ccmake on Ubuntu
* [issue 622]  - `--hpx:hpx` and `--hpx:debug-hpx-log` is nonsensical
* [issue 525]  - Extend barrier LCO test to run in distributed
* [issue 515]  - Multi-destination version of hpx::apply is broken
* [issue 509]  - Push Boost.Atomic changes upstream
* [issue 503]  - Running HPX applications on Windows should not require setting
                 %PATH%
* [issue 461]  - Add a compilation sanity test
* [issue 456]  - hpx_run_tests.py should log output from tests that timeout
* [issue 454]  - Investigate threadmanager performance
* [issue 345]  - Add more versatile environmental/cmake variable support to
                 hpx_find_* CMake macros
* [issue 209]  - Support multiple configurations in generated build files
* [issue 190]  - hpx::cout should be a std::ostream
* [issue 189]  - iostreams component should use startup/shutdown functions
* [issue 183]  - Use Boost.ICL for correctness in AGAS
* [issue 44]   - Implement real futures

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_8 __hpx__ V0.9.8 (Mar 24, 2014)]

We have had over 800 commits since the last release and we have closed
over 65 tickets (bugs, feature requests, etc.).

With the changes below, __hpx__ is once again leading the charge of a whole
new era of computation. By intrinsically breaking down and synchronizing the
work to be done, __hpx__ insures that application developers will no longer
have to fret about where a segment of code executes. That allows coders to
focus their time and energy to understanding the data dependencies of their
algorithms and thereby the core obstacles to an efficient code. Here are some
of the advantages of using __hpx__:

* __hpx__ is solidly rooted in a sophisticated theoretical execution model --
  ParalleX
* __hpx__ exposes an API fully conforming to the C++11 and the draft C++14
  standards, extended and applied to distributed computing. Everything
  programmers know about the concurrency primitives of the standard C++ library
  is still valid in the context of __hpx__.
* It provides a competitive, high performance implementation of modern,
  future-proof ideas which gives an smooth migration path from todays
  mainstream techniques
* There is no need for the programmer to worry about lower level
  parallelization paradigms like threads or message passing; no need to
  understand pthreads, MPI, OpenMP, or Windows threads, etc.
* There is no need to think about different types of parallelism such as tasks,
  pipelines, or fork-join, task or data parallelism.
* The same source of your program compiles and runs on Linux, BlueGene/Q,
  Mac OS X, Windows, and Android.
* The same code runs on shared memory multi-core systems and supercomputers,
  on handheld devices and Intel[regmark] Xeon Phi[trademark] accelerators, or
  a heterogeneous mix of those.

[heading General Changes]

* A major API breaking change for this release was introduced by implementing
  `hpx::future` and `hpx::shared_future` fully in conformance with the
  __cpp11__. While `hpx::shared_future` is new and will not create any
  compatibility problems, we revised the interface and implementation of the
  existing `hpx::future`. For more details please see the
  [@http://mail.cct.lsu.edu/pipermail/hpx-users/2014-January/000141.html mailing list archive].
  To avoid any incompatibilities for existing code we named the type which
  implements the `std::future` interface as `hpx::unique_future`. For the next
  release this will be renamed to `hpx::future`, making it full conforming to
  __cpp11__.
* A large part of the code base of __hpx__ has been refactored and partially
  re-implemented. The main changes were related to
  * The threading subsystem: these changes significantly reduce the amount of
    overheads caused by the schedulers, improve the modularity of the code
    base, and extend the variety of available scheduling algorithms.
  * The parcel subsystem: these changes improve the performance of the __hpx__
    networking layer, modularize the structure of the parcelports, and
    simplify the creation of new parcelports for other underlying networking
    libraries.
  * The API subsystem: these changes improved the conformance of the API to
    __cpp11__, extend and unify the available API functionality, and decrease
    the overheads created by various elements of the API.
  * The robustness of the component loading subsystem has been improved
    significantly, allowing to more portably and more reliably register the
    components needed by an application as startup. This additionally speeds up
    general application initialization.
* We added new API functionality like `hpx::migrate` and `hpx::copy_component`
  which are the basic building blocks necessary for implementing higher level
  abstractions for system-wide load balancing, runtime-adaptive resource
  management, and object-oriented checkpointing and state-management.
* We removed the use of C++11 move emulation (using Boost.Move), replacing it
  with C++11 rvalue references. This is the first step towards using more and
  more native C++11 facilities which we plan to introduce in the future.
* We improved the reference counting scheme used by __hpx__ which helps
  managing distributed objects and memory. This improves the overall stability
  of __hpx__ and further simplifies writing real world applications.
* The minimal Boost version required to use __hpx__ is now V1.49.0.
* This release coincides with the first release of __hpxpi__ (V0.1.0), the
  first implementation of the __xpi_spec__.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [issue 1086] - Expose internal boost::shared_array to allow user management
                 of array lifetime
* [issue 1083] - Make shell examples copyable in docs
* [issue 1080] - /threads{locality#*/total}/count/cumulative broken
* [issue 1079] - Build problems on OS X
* [issue 1078] - Improve robustness of component loading
* [issue 1077] - Fix a missing enum definition for 'take' mode
* [issue 1076] - Merge Jb master
* [issue 1075] - Unknown CMake command "add_hpx_pseudo_target"
* [issue 1074] - Implement `apply_continue_callback` and `apply_colocated_callback`
* [issue 1073] - The new `apply_colocated` and `async_colocated` functions lead
                 to automatic registered functions
* [issue 1071] - Remove deferred_packaged_task
* [issue 1069] - serialize_buffer with allocator fails at destruction
* [issue 1068] - Coroutine include and forward declarations missing
* [issue 1067] - Add allocator support to util::serialize_buffer
* [issue 1066] - Allow for MPI_Init being called before HPX launches
* [issue 1065] - AGAS cache isn't used/populated on worker localities
* [issue 1064] - Reorder includes to ensure ws2 includes early
* [issue 1063] - Add `hpx::runtime::suspend` and `hpx::runtime::resume`
* [issue 1062] - Fix `async_continue` to propery handle return types
* [issue 1061] - Implement `async_colocated` and `apply_colocated`
* [issue 1060] - Implement minimal component migration
* [issue 1058] - Remove `HPX_UTIL_TUPLE` from code base
* [issue 1057] - Add performance counters for threading subsystem
* [issue 1055] - Thread allocation uses two memory pools
* [issue 1053] - Work stealing flawed
* [issue 1052] - Fix a number of warnings
* [issue 1049] - Fixes for TLS on OSX and more reliable test running
* [issue 1048] - Fixing after 588 hang
* [issue 1047] - Use port '0' for networking when using one locality
* [issue 1046] - `composable_guard` test is broken when having more than one
                 thread
* [issue 1045] - Security missing headers
* [issue 1044] - Native TLS on FreeBSD via __thread
* [issue 1043] - `async` et.al. compute the wrong result type
* [issue 1042] - `async` et.al. implicitly unwrap reference_wrappers
* [issue 1041] - Remove redundant costly Kleene stars from regex searches
* [issue 1040] - CMake script regex match patterns has unnecessary kleenes
* [issue 1039] - Remove use of Boost.Move and replace with std::move and real
                 rvalue refs
* [issue 1038] - Bump minimal required Boost to 1.49.0
* [issue 1037] - Implicit unwrapping of futures in async broken
* [issue 1036] - Scheduler hangs when user code attempts to "block" OS-threads
* [issue 1035] - Idle-rate counter always reports 100% idle rate
* [issue 1034] - Symbolic name registration causes application hangs
* [issue 1033] - Application options read in from an options file generate an
                 error message
* [issue 1032] - `hpx::id_type` local reference counting is wrong
* [issue 1031] - Negative entry in reference count table
* [issue 1030] - Implement condition_variable
* [issue 1029] - Deadlock in thread scheduling subsystem
* [issue 1028] - HPX-thread cumulative count performance counters report
                 incorrect value
* [issue 1027] - Expose `hpx::thread_interrupted` error code as a separate
                 exception type
* [issue 1026] - Exceptions thrown in asynchronous calls can be lost if the
                 value of the future is never queried
* [issue 1025] - `future::wait_for`/`wait_until` do not remove callback
* [issue 1024] - Remove dependence to boost assert and create hpx assert
* [issue 1023] - Segfaults with tcmalloc
* [issue 1022] - prerequisites link in readme is broken
* [issue 1020] - HPX Deadlock on external synchronization
* [issue 1019] - Convert using `BOOST_ASSERT` to `HPX_ASSERT`
* [issue 1018] - compiling bug with gcc 4.8.1
* [issue 1017] - Possible crash in io_pool executor
* [issue 1016] - Crash at startup
* [issue 1014] - Implement Increment/Decrement Merging
* [issue 1013] - Add more logging channels to enable greater control over
                 logging granularity
* [issue 1012] - `--hpx:debug-hpx-log` and `--hpx:debug-agas-log` lead to
                 non-thread safe writes
* [issue 1011] - After installation, running applications from the build/staging
                 directory no longer works
* [issue 1010] - Mergable decrement requests are not being merged
* [issue 1009] - `--hpx:list-symbolic-names` crashes
* [issue 1007] - Components are not properly destroyed
* [issue 1006] - Segfault/hang in set_data
* [issue 1003] - Performance counter naming issue
* [issue 982]  - Race condition during startup
* [issue 912]  - OS X: component type not found in map
* [issue 663]  - Create a buildbot slave based on Clang 3.2/OSX
* [issue 636]  - Expose `this_locality::apply<act>(p1, p2);` for local execution
* [issue 197]  - Add `--console=address` option for PBS runs
* [issue 175]  - Asynchronous AGAS API

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_7 __hpx__ V0.9.7 (Nov 13, 2013)]

We have had over 1000 commits since the last release and we have closed
over 180 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Ported HPX to BlueGene/Q
* Improved HPX support for Xeon/Phi accelerators
* Reimplemented `hpx::bind`, `hpx::tuple`, and `hpx::function` for better
  performance and better compliance with the __cpp11__. Added `hpx::mem_fn`.
* Reworked `hpx::when_all` and `hpx::when_any` for better compliance with the
  ongoing C++ standardization effort, added heterogeneous version for those
  functions. Added `hpx::when_any_swapped`.
* Added `hpx::copy` as a precursor for a migrate functionality
* Added `hpx::get_ptr` allowing to directly access the memory underlying a given
  component
* Added the `hpx::lcos::broadcast`, `hpx::lcos::reduce`, and `hpx::lcos::fold`
  collective operations
* Added `hpx::get_locality_name` allowing to retrieve the name of any of the
  localities for the application.
* Added support for more flexible thread affinity control from the HPX command
  line, such as new modes for `--hpx:bind` (`balanced`, `scattered`, `compact`),
  improved default settings when running multiple localities on the same node.
* Added experimental executors for simpler thread pooling and scheduling. This API
  may change in the future as it will stay aligned with the ongoing C++
  standardization efforts.
* Massively improved the performance of the HPX serialization code. Added partial
  support for zero copy serialization of array and bitwise-copyable types.
* General performance improvements of the code related to threads and futures.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [issue 1005] - Allow to disable array optimizations and zero copy optimizations
                 for each parcelport
* [issue 1004] - Generate new HPX logo image for the docs
* [issue 1002] - If MPI parcelport is not available, running HPX under mpirun
                 should fail
* [issue 1001] - Zero copy serialization raises assert
* [issue 1000] - Can't connect to a HPX application running with the MPI
                 parcelport from a non MPI parcelport locality
* [issue 999] - Optimize `hpx::when_n`
* [issue 998] - Fixed const-correctness
* [issue 997] - Making serialize_buffer::data() type save
* [issue 996] - Memory leak in hpx::lcos::promise
* [issue 995] - Race while registering pre-shutdown functions
* [issue 994] - thread_rescheduling regression test does not compile
* [issue 992] - Correct comments and messages
* [issue 991] - setcap cap_sys_rawio=ep for power profiling causes an HPX
                application to abort
* [issue 989] - Jacobi hangs during execution
* [issue 988] - multiple_init test is failing
* [issue 986] - Can't call a function called "init" from "main" when using
                `<hpx/hpx_main.hpp>`
* [issue 984] - Reference counting tests are failing
* [issue 983] - thread_suspension_executor test fails
* [issue 980] - Terminating HPX threads don't leave stack in virgin state
* [issue 979] - Static scheduler not in documents
* [issue 978] - Preprocessing limits are broken
* [issue 977] - Make tests.regressions.lcos.future_hang_on_get shorter
* [issue 976] - Wrong library order in pkgconfig
* [issue 975] - Please reopen #963
* [issue 974] - Option pu-offset ignored in fixing_588 branch
* [issue 972] - Cannot use MKL with HPX
* [issue 969] - Non-existent INI files requested on the command line via
                `--hpx:config` do not cause warnings or errors.
* [issue 968] - Cannot build examples in fixing_588 branch
* [issue 967] - Command line description of `--hpx:queuing` seems wrong
* [issue 966] - `--hpx:print-bind` physical core numbers are wrong
* [issue 965] - Deadlock when building in Release mode
* [issue 963] - Not all worker threads are working
* [issue 962] - Problem with SLURM integration
* [issue 961] - `--hpx:print-bind` outputs incorrect information
* [issue 960] - Fix cut and paste error in documentation of get_thread_priority
* [issue 959] - Change link to boost.atomic in documentation to point to
                boost.org
* [issue 958] - Undefined reference to intrusive_ptr_release
* [issue 957] - Make tuple standard compliant
* [issue 956] - Segfault with a3382fb
* [issue 955] - `--hpx:nodes` and `--hpx:nodefiles` do not work with foreign
                nodes
* [issue 954] - Make order of arguments for hpx::async and hpx::broadcast
                consistent
* [issue 953] - Cannot use MKL with HPX
* [issue 952] - register_[pre_]shutdown_function never throw
* [issue 951] - Assert when number of threads is greater than hardware
                concurrency
* [issue 948] - `HPX_HAVE_GENERIC_CONTEXT_COROUTINES` conflicts with
                `HPX_HAVE_FIBER_BASED_COROUTINES`
* [issue 947] - Need MPI_THREAD_MULTIPLE for backward compatibility
* [issue 946] - HPX does not call `MPI_Finalize`
* [issue 945] - Segfault with `hpx::lcos::broadcast`
* [issue 944] - OS X: assertion 'pu_offset_ < hardware_concurrency' failed
* [issue 943] - #include <hpx/hpx_main.hpp> does not work
* [issue 942] - Make the BG/Q work with -O3
* [issue 940] - Use separator when concatenating locality name
* [issue 939] - Refactor MPI parcelport to use `MPI_Wait` instead of multiple
                `MPI_Test` calls
* [issue 938] - Want to officially access client_base::gid_
* [issue 937] - client_base::gid_ should be private
* [issue 936] - Want doxygen-like source code index
* [issue 935] - Build error with gcc 4.6 and Boost 1.54.0 on hpx trunk and
                0.9.6
* [issue 933] - Cannot build HPX with Boost 1.54.0
* [issue 932] - Components are destructed too early
* [issue 931] - Make HPX work on BG/Q
* [issue 930] - make git-docs is broken
* [issue 929] - Generating index in docs broken
* [issue 928] - Optimize hpx::util::static_ for C++11 compilers supporting
                magic statics
* [issue 924] - Make kill_process_tree (in process.py) more robust on Mac OSX
* [issue 923] - Correct BLAS and RNPL cmake tests
* [issue 922] - Cannot link against BLAS
* [issue 921] - Implement `hpx::mem_fn`
* [issue 920] - Output locality with `--hpx:print-bind`
* [issue 919] - Correct grammar; simplify boolean expressions
* [issue 918] - Link to hello_world.cpp is broken
* [issue 917] - adapt cmake file to new boostbook version
* [issue 916] - fix problem building documentation with xsltproc >= 1.1.27
* [issue 915] - Add another TBBMalloc library search path
* [issue 914] - Build problem with Intel compiler on Stampede (TACC)
* [issue 913] - fix error messages in fibonacci examples
* [issue 911] - Update OS X build instructions
* [issue 910] - Want like to specify MPI_ROOT instead of compiler wrapper script
* [issue 909] - Warning about void* arithmetic
* [issue 908] - Buildbot for MIC is broken
* [issue 906] - Can't use `--hpx:bind=balanced` with multiple MPI processes
* [issue 905] - `--hpx:bind` documentation should describe full grammar
* [issue 904] - Add hpx::lcos::fold and hpx::lcos::inverse_fold collective
                operation
* [issue 903] - Add `hpx::when_any_swapped()`
* [issue 902] - Add `hpx::lcos::reduce` collective operation
* [issue 901] - Web documentation is not searchable
* [issue 900] - Web documentation for trunk has no index
* [issue 898] - Some tests fail with GCC 4.8.1 and MPI parcel port
* [issue 897] - HWLOC causes failures on Mac
* [issue 896] - pu-offset leads to startup error
* [issue 895] - `hpx::get_locality_name` not defined
* [issue 894] - Race condition at shutdown
* [issue 893] - `--hpx:print-bind` switches std::cout to hexadecimal mode
* [issue 892] - `hwloc_topology_load` can be expensive -- don't call multiple times
* [issue 891] - The documentation for `get_locality_name` is wrong
* [issue 890] - `--hpx:print-bind` should not exit
* [issue 889] - `--hpx:debug-hpx-log=FILE` does not work
* [issue 888] - MPI parcelport does not exit cleanly for --hpx:print-bind
* [issue 887] - Choose thread affinities more cleverly
* [issue 886] - Logging documentation is confusing
* [issue 885] - Two threads are slower than one
* [issue 884] - is_callable failing with member pointers in C++11
* [issue 883] - Need help with is_callable_test
* [issue 882] - tests.regressions.lcos.future_hang_on_get does not terminate
* [issue 881] - tests/regressions/block_matrix/matrix.hh won't compile with GCC
                4.8.1
* [issue 880] - HPX does not work on OS X
* [issue 878] - `future::unwrap` triggers assertion
* [issue 877] - "make tests" has build errors on Ubuntu 12.10
* [issue 876] - tcmalloc is used by default, even if it is not present
* [issue 875] - global_fixture is defined in a header file
* [issue 874] - Some tests take very long
* [issue 873] - Add block-matrix code as regression test
* [issue 872] - HPX documentation does not say how to run tests with detailed
                output
* [issue 871] - All tests fail with "make test"
* [issue 870] - Please explicitly disable serialization in classes that don't
                support it
* [issue 868] - boost_any test failing
* [issue 867] - Reduce the number of copies of `hpx::function` arguments
* [issue 863] - Futures should not require a default constructor
* [issue 862] - value_or_error shall not default construct its result
* [issue 861] - `HPX_UNUSED` macro
* [issue 860] - Add functionality to copy construct a component
* [issue 859] - `hpx::endl` should flush
* [issue 858] - Create `hpx::get_ptr<>` allowing to access component implementation
* [issue 855] - Implement `hpx::INVOKE`
* [issue 854] - `hpx/hpx.hpp` does not include `hpx/include/iostreams.hpp`
* [issue 853] - Feature request: null future
* [issue 852] - Feature request: Locality names
* [issue 851] - `hpx::cout` output does not appear on screen
* [issue 849] - All tests fail on OS X after installing
* [issue 848] - Update OS X build instructions
* [issue 846] - Update hpx_external_example
* [issue 845] - Issues with having both debug and release modules in the same
                directory
* [issue 844] - Create configuration header
* [issue 843] - Tests should use CTest
* [issue 842] - Remove buffer_pool from MPI parcelport
* [issue 841] - Add possibility to broadcast an index with hpx::lcos::broadcast
* [issue 838] - Simplify `util::tuple`
* [issue 837] - Adopt boost::tuple tests for `util::tuple`
* [issue 836] - Adopt boost::function tests for `util::function`
* [issue 835] - Tuple interface missing pieces
* [issue 833] - Partially preprocessing files not working
* [issue 832] - Native papi counters do not work with wild cards
* [issue 831] - Arithmetics counter fails if only one parameter is given
* [issue 830] - Convert hpx::util::function to use new scheme for serializing its base
                pointer
* [issue 829] - Consistently use `decay<T>` instead of `remove_const< remove_reference<T>>`
* [issue 828] - Update future implementation to N3721 and N3722
* [issue 827] - Enable MPI parcelport for bootstrapping whenever application
                was started using mpirun
* [issue 826] - Support command line option `--hpx:print-bind` even if
                `--hpx::bind` was not used
* [issue 825] - Memory counters give segfault when attempting to use thread
                wild cards or numbers only total works
* [issue 824] - Enable lambda functions to be used with hpx::async/hpx::apply
* [issue 823] - Using a hashing filter
* [issue 822] - Silence unused variable warning
* [issue 821] - Detect if a function object is callable with given arguments
* [issue 820] - Allow wildcards to be used for performance counter names
* [issue 819] - Make the AGAS symbolic name registry distributed
* [issue 818] - Add future::then() overload taking an executor
* [issue 817] - Fixed typo
* [issue 815] - Create an lco that is performing an efficient broadcast of
                actions
* [issue 814] - Papi counters cannot specify thread#* to get the counts for
                all threads
* [issue 813] - Scoped unlock
* [issue 811] - simple_central_tuplespace_client run error
* [issue 810] - ostream error when << any objects
* [issue 809] - Optimize parcel serialization
* [issue 808] - HPX applications throw exception when executed from the build
                directory
* [issue 807] - Create performance counters exposing overall AGAS statistics
* [issue 795] - Create timed make_ready_future
* [issue 794] - Create heterogeneous `when_all`/`when_any`/etc.
* [issue 721] - Make HPX usable for Xeon Phi
* [issue 694] - CMake should complain if you attempt to build an example without
                its dependencies
* [issue 692] - SLURM support broken
* [issue 683] - python/hpx/process.py imports epoll on all platforms
* [issue 619] - Automate the doc building process
* [issue 600] - GTC performance broken
* [issue 577] - Allow for zero copy serialization/networking
* [issue 551] - Change executable names to have debug postfix in Debug builds
* [issue 544] - Write a custom .lib file on Windows pulling in hpx_init and
                hpx.dll, phase out hpx_init
* [issue 534] - `hpx::init` should take functions by `std::function` and should
                accept all forms of hpx_main
* [issue 508] - FindPackage fails to set FOO_LIBRARY_DIR
* [issue 506] - Add cmake support to generate ini files for external applications
* [issue 470] - Changing build-type after configure does not update boost
                library names
* [issue 453] - Document `hpx_run_tests.py`
* [issue 445] - Significant performance mismatch between MPI and HPX in SMP
                for allgather example
* [issue 443] - Make docs viewable from build directory
* [issue 421] - Support multiple HPX instances per node in a batch environment
                like PBS or SLURM
* [issue 316] - Add message size limitation
* [issue 249] - Clean up locking code in big boot barrier
* [issue 136] - Persistent CMake variables need to be marked as cache variables

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_6 __hpx__ V0.9.6 (Jul 30, 2013)]

We have had over 1200 commits since the last release and we have closed
roughly 140 tickets (bugs, feature requests, etc.).

[heading General Changes]

The major new fetures in this release are:

* We further consolidated the API exposed by __hpx__. We aligned our APIs as much as
  possible with the existing __cpp11__ and related proposals to the
  C++ standardization committee (such as __cpp11_n3632__ and __cpp11_n3634__).
* We implemented a first version of a distributed AGAS service which essentially
  eliminates all explicit AGAS network traffic.
* We created a native ibverbs parcelport allowing to take advantage of the
  superior latency and bandwidth characteristics of Infiniband networks.
* We successfully ported __hpx__ to the Xeon Phi platform.
* Support for the SLURM scheduling system was implemented.
* Major efforts have been dedicated to improving the performance counter
  framework, numerous new counters were implemented and new APIs were added.
* We added a modular parcel compression system allowing to improve bandwidth
  utilization (by reducing the overall size of the tranferred data).
* We added a modular parcel coalescing system allowing to combine several
  parcels into larger messages. This reduces latencies introduced by the
  communication layer.
* Added an experimental executors API allowing to use different scheduling
  policies for different parts of the code. This API has been modelled after
  the Standards proposal __cpp11_n3562__. This API is bound to change in
  the future, though.
* Added minimal security support for localities which is enforced on the
  parcelport level. This support is preliminary and experimental and might
  change in the future.
* We created a parcelport using low level MPI functions. This is in support
  of legacy applications which are to be gradually ported and to support
  platforms where MPI is the only available portable networking layer.
* We added a preliminary and experimental implementation of a tuple-space
  object which exposes an interface similar to such systems described in the
  literature (see for instance __linda__).

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release. This is again
a very long list of newly implemented features and fixed issues.

* [issue 806] - make (all) in examples folder does nothing
* [issue 805] - Adding the introduction and fixing DOCBOOK dependencies for
                Windows use
* [issue 804] - Add stackless (non-suspendable) thread type
* [issue 803] - Create proper serialization support functions for util::tuple
* [issue 800] - Add possibility to disable array optimizations during serialization
* [issue 798] - HPX_LIMIT does not work for local dataflow
* [issue 797] - Create a parcelport which uses MPI
* [issue 796] - Problem with Large Numbers of Threads
* [issue 793] - Changing dataflow test case to hang consistently
* [issue 792] - CMake Error
* [issue 791] - Problems with local::dataflow
* [issue 790] - wait_for() doesn't compile
* [issue 789] - HPX with Intel compiler segfaults
* [issue 788] - Intel compiler support
* [issue 787] - Fixed SFINAEd specializations
* [issue 786] - Memory issues during benchmarking.
* [issue 785] - Create an API allowing to register external threads with HPX
* [issue 784] - util::plugin is throwing an error when a symbol is not found
* [issue 783] - How does hpx:bind work?
* [issue 782] - Added quotes around STRING REPLACE potentially empty arguments
* [issue 781] - Make sure no exceptions propagate into the thread manager
* [issue 780] - Allow arithmetics performance counters to expand its parameters
* [issue 779] - Test case for 778
* [issue 778] - Swapping futures segfaults
* [issue 777] - hpx::lcos::details::when_xxx don't restore completion handlers
* [issue 776] - Compiler chokes on dataflow overload with launch policy
* [issue 775] - Runtime error with local dataflow (copying futures?)
* [issue 774] - Using local dataflow without explicit namespace
* [issue 773] - Local dataflow with unwrap: functor operators need to be const
* [issue 772] - Allow (remote) actions to return a future
* [issue 771] - Setting HPX_LIMIT gives huge boost MPL errors
* [issue 770] - Add launch policy to (local) dataflow
* [issue 769] - Make compile time configuration information available
* [issue 768] - Const correctness problem in local dataflow
* [issue 767] - Add launch policies to async
* [issue 766] - Mark data structures for optimized (array based) serialization
* [issue 765] - Align hpx::any with N3508: Any Library Proposal (Revision 2)
* [issue 764] - Align hpx::future with newest N3558: A Standardized Representation
                of Asynchronous Operations
* [issue 762] - added a human readable output for the ping pong example
* [issue 761] - Ambiguous typename when constructing derived component
* [issue 760] - Simple components can not be derived
* [issue 759] - make install doesn't give a complete install
* [issue 758] - Stack overflow when using locking_hook<>
* [issue 757] - copy paste error; unsupported function overloading
* [issue 756] - GTCX runtime issue in Gordon
* [issue 755] - Papi counters don't work with reset and evaluate API's
* [issue 753] - cmake bugfix and improved component action docs
* [issue 752] - hpx simple component docs
* [issue 750] - Add hpx::util::any
* [issue 749] - Thread phase counter is not reset
* [issue 748] - Memory performance counter are not registered
* [issue 747] - Create performance counters exposing arithmetic operations
* [issue 745] - apply_callback needs to invoke callback when applied locally
* [issue 744] - CMake fixes
* [issue 743] - Problem Building github version of HPX
* [issue 742] - Remove HPX_STD_BIND
* [issue 741] - assertion 'px != 0' failed: HPX(assertion_failure) for low
                numbers of OS threads
* [issue 739] - Performance counters do not count to the end of the program
                or evalution
* [issue 738] - Dedicated AGAS server runs don't work; console ignores -a option.
* [issue 737] - Missing bind overloads
* [issue 736] - Performance counter wildcards do not always work
* [issue 735] - Create native ibverbs parcelport based on rdma operations
* [issue 734] - Threads stolen performance counter total is incorrect
* [issue 733] - Test benchmarks need to be checked and fixed
* [issue 732] - Build fails with Mac, using mac ports clang-3.3 on latest git
                branch
* [issue 731] - Add global start/stop API for performance counters
* [issue 730] - Performance counter values are apparently incorrect
* [issue 729] - Unhandled switch
* [issue 728] - Serialization of hpx::util::function between two localities
                causes seg faults
* [issue 727] - Memory counters on Mac OS X
* [issue 725] - Restore original thread priority on resume
* [issue 724] - Performance benchmarks do not depend on main HPX libraries
* [issue 723] - [teletype]--hpx:nodes=`cat $PBS_NODEFILE` works; --hpx:nodefile=$PBS_NODEFILE
                does not.[c++]
* [issue 722] - Fix binding const member functions as actions
* [issue 719] - Create performance counter exposing compression ratio
* [issue 718] - Add possibility to compress parcel data
* [issue 717] - strip_credit_from_gid has misleading semantics
* [issue 716] - Non-option arguments to programs run using `pbsdsh` must be
                before `--hpx:nodes`, contrary to directions
* [issue 715] - Re-thrown exceptions should retain the original call site
* [issue 714] - failed assertion in debug mode
* [issue 713] - Add performance counters monitoring connection caches
* [issue 712] - Adjust parcel related performance counters to be connection type
                specific
* [issue 711] - configuration failure
* [issue 710] - Error "timed out while trying to find room in the connection
                cache" when trying to start multiple localities on a single
                computer
* [issue 709] - Add new thread state 'staged' referring to task descriptions
* [issue 708] - Detect/mitigate bad non-system installs of GCC on Redhat systems
* [issue 707] - Many examples do not link with Git HEAD version
* [issue 706] - `hpx::init` removes portions of non-option command line
                arguments before last `=` sign
* [issue 705] - Create rolling average and median aggregating performance
                counters
* [issue 704] - Create performance counter to expose thread queue waiting time
* [issue 703] - Add support to HPX build system to find librcrtool.a and
                related headers
* [issue 699] - Generalize instrumentation support
* [issue 698] - compilation failure with hwloc absent
* [issue 697] - Performance counter counts should be zero indexed
* [issue 696] - Distributed problem
* [issue 695] - Bad perf counter time printed
* [issue 693] - `--help` doesn't print component specific command line options
* [issue 692] - SLURM support broken
* [issue 691] - exception while executing any application linked with hwloc
* [issue 690] - thread_id_test and thread_launcher_test failing
* [issue 689] - Make the buildbots use hwloc
* [issue 687] - compilation error fix (hwloc_topology)
* [issue 686] - Linker Error for Applications
* [issue 684] - Pinning of service thread fails when number of worker threads
                equals the number of cores
* [issue 682] - Add performance counters exposing number of stolen threads
* [issue 681] - Add apply_continue for asynchronous chaining of actions
* [issue 679] - Remove obsolete async_callback API functions
* [issue 678] - Add new API for setting/triggering LCOs
* [issue 677] - Add async_continue for true continuation style actions
* [issue 676] - Buildbot for gcc 4.4 broken
* [issue 675] - Partial preprocessing broken
* [issue 674] - HPX segfaults when built with gcc 4.7
* [issue 673] - `use_guard_pages` has inconsistent preprocessor guards
* [issue 672] - External build breaks if library path has spaces
* [issue 671] - release tarballs are tarbombs
* [issue 670] - CMake won't find Boost headers in layout=versioned install
* [issue 669] - Links in docs to source files broken if not installed
* [issue 667] - Not reading ini file properly
* [issue 664] - Adapt new meanings of 'const' and 'mutable'
* [issue 661] - Implement BTL Parcel port
* [issue 655] - Make HPX work with the "decltype" result_of
* [issue 647] - documentation for specifying the number of high priority threads
                `--hpx:high-priority-threads`
* [issue 643] - Error parsing host file
* [issue 642] - HWLoc issue with TAU
* [issue 639] - Logging potentially suspends a running thread
* [issue 634] - Improve error reporting from parcel layer
* [issue 627] - Add tests for async and apply overloads that accept regular
                C++ functions
* [issue 626] - hpx/future.hpp header
* [issue 601] - Intel support
* [issue 557] - Remove action codes
* [issue 531] - AGAS request and response classes should use switch statements
* [issue 529] - Investigate the state of hwloc support
* [issue 526] - Make HPX aware of hyper-threading
* [issue 518] - Create facilities allowing to use plain arrays as action
                arguments
* [issue 473] - hwloc thread binding is broken on CPUs with hyperthreading
* [issue 383] - Change result type detection for hpx::util::bind to use
                result_of protocol
* [issue 341] - Consolidate route code
* [issue 219] - Only copy arguments into actions once
* [issue 177] - Implement distributed AGAS
* [issue 43]  - Support for Darwin (Xcode + Clang)

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_5 __hpx__ V0.9.5 (Jan 16, 2013)]

We have had over 1000 commits since the last release and we have closed
roughly 150 tickets (bugs, feature requests, etc.).

[heading General Changes]

This release is continuing along the lines of code and API consolidation, and
overall usability inprovements. We dedicated much attention to performance and
we were able to significantly improve the threading and networking subsystems.

We successfully ported __hpx__ to the Android platform. __hpx__ applications now not
only can run on mobile devices, but we support heterogeneous applications running
across architecture boundaries. At the Supercomputing Conference 2012 we
demonstrated connecting Android tablets to simulations running on a Linux cluster.
The Android tablet was used to query performance counters from the Linux simulation
and to steer its parameters.

We successfully ported __hpx__ to Mac OSX (using the Clang compiler). Thanks to
Pyry Jahkola for contributing the corresponding patches. Please see the section
__macos_installation__ for more details.

We made a special effort to make HPX usable in highly concurrent use cases. Many
of the HPX API functions which possibly take longer than 100 microseconds to
execute now can be invoked asynchronously. We added uniform support for composing
futures which simplifies to write asynchronous code. HPX actions (function objects
encapsulating possibly concurrent remote function invocations) are now well
integrated with all other API facilities such like `hpx::bind`.

All of the API has been aligned as much as possible with established paradigms.
HPX now mirrors many of the facilities as defined in the __cpp11__, such
as `hpx::thread`, `hpx::function`, `hpx::future`, etc.

A lot of work has been put into improving the documentation. Many of the API
functions are documented now, concepts are explained in detail, and examples
are better described than before. The new documentation index
enables finding information with lesser effort.

This is the first release of HPX we perform after the move to __stellar_hpx_github__.
This step has enabled a wider participation from the community and further encourages
us in our decision to release HPX as a true open source library (HPX is licensed
under the very liberal __boost_license__).

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release. This is by
far the longest list of newly implemented features and fixed issues for any of
HPX' releases so far.

* [issue 666] - Segfault on calling hpx::finalize twice
* [issue 665] - Adding declaration num_of_cores
* [issue 662] - pkgconfig is building wrong
* [issue 660] - Need uninterrupt function
* [issue 659] - Move our logging library into a different namespace
* [issue 658] - Dynamic performance counter types are broken
* [issue 657] - HPX v0.9.5 (RC1) hello_world example segfaulting
* [issue 656] - Define the affinity of parcel-pool, io-pool, and timer-pool
                threads
* [issue 654] - Integrate the Boost auto_index tool with documentation
* [issue 653] - Make HPX build on OS X + Clang + libc++
* [issue 651] - Add fine-grained control for thread pinning
* [issue 650] - Command line no error message when using -hpx:(anything)
* [issue 645] - Command line aliases don't work in [teletype]`@file`[c++]
* [issue 644] - Terminated threads are not always properly cleaned up
* [issue 640] - `future_data<T>::set_on_completed_` used without locks
* [issue 638] - hpx build with intel compilers fails on linux
* [issue 637] - --copy-dt-needed-entries breaks with gold
* [issue 635] - Boost V1.53 will add Boost.Lockfree and Boost.Atomic
* [issue 633] - Re-add examples to final 0.9.5 release
* [issue 632] - Example `thread_aware_timer` is broken
* [issue 631] - FFT application throws error in parcellayer
* [issue 630] - Event synchronization example is broken
* [issue 629] - Waiting on futures hangs
* [issue 628] - Add an `HPX_ALWAYS_ASSERT` macro
* [issue 625] - Port coroutines context switch benchmark
* [issue 621] - New INI section for stack sizes
* [issue 618] - pkg_config support does not work with a HPX debug build
* [issue 617] - hpx/external/logging/boost/logging/detail/cache_before_init.hpp:139:67:
                error: 'get_thread_id' was not declared in this scope
* [issue 616] - Change wait_xxx not to use locking
* [issue 615] - Revert visibility 'fix' (fb0b6b8245dad1127b0c25ebafd9386b3945cca9)
* [issue 614] - Fix Dataflow linker error
* [issue 613] - find_here should throw an exception on failure
* [issue 612] - Thread phase doesn't show up in debug mode
* [issue 611] - Make stack guard pages configurable at runtime (initialization time)
* [issue 610] - Co-Locate Components
* [issue 609] - future_overhead
* [issue 608] - `--hpx:list-counter-infos` problem
* [issue 607] - Update Boost.Context based backend for coroutines
* [issue 606] - 1d_wave_equation is not working
* [issue 605] - Any C++ function that has serializable arguments and a
                serializable return type should be remotable
* [issue 604] - Connecting localities isn't working anymore
* [issue 603] - Do not verify any ini entries read from a file
* [issue 602] - Rename argument_size to type_size/ added implementation to get
                parcel size
* [issue 599] - Enable locality specific command line options
* [issue 598] - Need an API that accesses the performance counter reporting the
                system uptime
* [issue 597] - compiling on ranger
* [issue 595] - I need a place to store data in a thread self pointer
* [issue 594] - 32/64 interoperability
* [issue 593] - Warn if logging is disabled at compile time but requested at runtime
* [issue 592] - Add optional argument value to `--hpx:list-counters` and
                `--hpx:list-counter-infos`
* [issue 591] - Allow for wildcards in performance counter names specified with
                `--hpx:print-counter`
* [issue 590] - Local promise semantic differences
* [issue 589] - Create API to query performance counter names
* [issue 587] - Add get_num_localities and get_num_threads to AGAS API
* [issue 586] - Adjust local AGAS cache size based on number of localities
* [issue 585] - Error while using counters in HPX
* [issue 584] - counting argument size of actions, initial pass.
* [issue 581] - Remove `RemoteResult` template parameter for `future<>`
* [issue 580] - Add possibility to hook into actions
* [issue 578] - Use angle brackets in HPX error dumps
* [issue 576] - Exception incorrectly thrown when `--help` is used
* [issue 575] - HPX(bad_component_type) with gcc 4.7.2 and boost 1.51
* [issue 574] - `--hpx:connect` command line parameter not working correctly
* [issue 571] - `hpx::wait()` (callback version) should pass the future to the
                callback function
* [issue 570] - `hpx::wait` should operate on `boost::arrays` and `std::lists`
* [issue 569] - Add a logging sink for Android
* [issue 568] - 2-argument version of `HPX_DEFINE_COMPONENT_ACTION`
* [issue 567] - Connecting to a running HPX application works only once
* [issue 565] - HPX doesn't shutdown properly
* [issue 564] - Partial preprocessing of new component creation interface
* [issue 563] - Add `hpx::start`/`hpx::stop` to avoid blocking main thread
* [issue 562] - All command line arguments swallowed by hpx
* [issue 561] - Boost.Tuple is not move aware
* [issue 558] - `boost::shared_ptr<>` style semantics/syntax for client classes
* [issue 556] - Creation of partially preprocessed headers should be enabled for
                Boost newer than V1.50
* [issue 555] - `BOOST_FORCEINLINE` does not name a type
* [issue 554] - Possible race condition in thread `get_id()`
* [issue 552] - Move enable client_base
* [issue 550] - Add stack size category 'huge'
* [issue 549] - ShenEOS run seg-faults on single or distributed runs
* [issue 545] - `AUTOGLOB` broken for add_hpx_component
* [issue 542] - FindHPX_HDF5 still searches multiple times
* [issue 541] - Quotes around application name in hpx::init
* [issue 539] - Race conditition occuring with new lightweight threads
* [issue 535] - hpx_run_tests.py exits with no error code when tests are missing
* [issue 530] - Thread description(<unknown>) in logs
* [issue 523] - Make thread objects more lightweight
* [issue 521] - `hpx::error_code` is not usable for lightweight error handling
* [issue 520] - Add full user environment to HPX logs
* [issue 519] - Build succeeds, running fails
* [issue 517] - Add a guard page to linux coroutine stacks
* [issue 516] - hpx::thread::detach suspends while holding locks, leads to hang in debug
* [issue 514] - Preprocessed headers for <hpx/apply.hpp> don't compile
* [issue 513] - Buildbot configuration problem
* [issue 512] - Implement action based stack size customization
* [issue 511] - Move action priority into a separate type trait
* [issue 510] - trunk broken
* [issue 507] - no matching function for call to
                `boost::scoped_ptr<hpx::threads::topology>::scoped_ptr(hpx::threads::linux_topology*)`
* [issue 505] - undefined_symbol regression test currently failing
* [issue 502] - Adding OpenCL and OCLM support to HPX for Windows and Linux
* [issue 501] - find_package(HPX) sets cmake output variables
* [issue 500] - wait_any/wait_all are badly named
* [issue 499] - Add support for disabling pbs support in pbs runs
* [issue 498] - Error during no-cache runs
* [issue 496] - Add partial preprocessing support to cmake
* [issue 495] - Support HPX modules exporting startup/shutdown functions only
* [issue 494] - Allow modules to specify when to run startup/shutdown functions
* [issue 493] - Avoid constructing a string in make_success_code
* [issue 492] - Performance counter creation is no longer synchronized at startup
* [issue 491] - Performance counter creation is no longer synchronized at startup
* [issue 490] - Sheneos on_completed_bulk seg fault in distributed
* [issue 489] - compiling issue with g++44
* [issue 488] - Adding OpenCL and OCLM support to HPX for the MSVC platform
* [issue 487] - FindHPX.cmake problems
* [issue 485] - Change distributing_factory and binpacking_factory to use bulk creation
* [issue 484] - Change `HPX_DONT_USE_PREPROCESSED_FILES` to `HPX_USE_PREPROCESSED_FILES`
* [issue 483] - Memory counter for Windows
* [issue 479] - strange errors appear when requesting performance counters on
                multiple nodes
* [issue 477] - Create (global) timer for multi-threaded measurements
* [issue 472] - Add partial preprocessing using Wave
* [issue 471] - Segfault stack traces don't show up in release
* [issue 468] - External projects need to link with internal components
* [issue 462] - Startup/shutdown functions are called more than once
* [issue 458] - Consolidate hpx::util::high_resolution_timer and
                `hpx::util::high_resolution_clock`
* [issue 457] - index out of bounds in `allgather_and_gate` on 4 cores or more
* [issue 448] - Make HPX compile with clang
* [issue 447] - 'make tests' should execute tests on local installation
* [issue 446] - Remove SVN-related code from the codebase
* [issue 444] - race condition in smp
* [issue 441] - Patched Boost.Serialization headers should only be installed if needed
* [issue 439] - Components using `HPX_REGISTER_STARTUP_MODULE` fail to compile with MSVC
* [issue 436] - Verify that no locks are being held while threads are suspended
* [issue 435] - Installing HPX should not clobber existing Boost installation
* [issue 434] - Logging external component failed (Boost 1.50)
* [issue 433] - Runtime crash when building all examples
* [issue 432] - Dataflow hangs on 512 cores/64 nodes
* [issue 430] - Problem with distributing factory
* [issue 424] - File paths referring to XSL-files need to be properly escaped
* [issue 417] - Make dataflow LCOs work out of the box by using partial preprocessing
* [issue 413] - hpx_svnversion.py fails on Windows
* [issue 412] - Make hpx::error_code equivalent to hpx::exception
* [issue 398] - HPX clobbers out-of-tree application specific CMake variables
                (specifically `CMAKE_BUILD_TYPE`)
* [issue 394] - Remove code generating random port numbers for network
* [issue 378] - ShenEOS scaling issues
* [issue 354] - Create a coroutines wrapper for Boost.Context
* [issue 349] - Commandline option `--localities=N/-lN` should be necessary
                only on AGAS locality
* [issue 334] - Add auto_index support to cmake based documentation toolchain
* [issue 318] - Network benchmarks
* [issue 317] - Implement network performance counters
* [issue 310] - Duplicate logging entries
* [issue 230] - Add compile time option to disable thread debugging info
* [issue 171] - Add an INI option to turn off deadlock detection independently of
                logging
* [issue 170] - OSHL internal counters are incorrect
* [issue 103] - Better diagnostics for multiple component/action registerations
                under the same name
* [issue 48]  - Support for Darwin (Xcode + Clang)
* [issue 21]  - Build fails with GCC 4.6

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_0 __hpx__ V0.9.0 (Jul 5, 2012)]

We have had roughly 800 commits since the last release and we have closed
approximately 80 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Significant improvements made to the usability of __hpx__ in large-scale,
  distributed environments.
* Renamed [classref hpx::lcos::packaged_task]`<>` to [classref hpx::lcos::packaged_action]`<>` to
  reflect the semantic differences to a packaged_task as defined by the
  __cpp11__.
* __hpx__ now exposes [classref hpx::thread] which is compliant to the C++11 std::thread
  type except that it (purely locally) represents an __hpx__ thread. This new type
  does not expose any of the remote capabilities of the underlying __hpx__-thread
  implementation.
* The type [classref hpx::lcos::future]`<>` is now compliant to the C++11 std::future<>
  type. This type can be used to synchronize both, local and remote operations.
  In both cases the control flow will 'return' to the future in order to
  trigger any continuation.
* The types [classref hpx::lcos::local::promise]`<>` and [classref hpx::lcos::local::packaged_task]`<>`
  are now compliant to the C++11 `std::promise<>`  and `std::packaged_task<>` types.
  These can be used to create a future representing local work only. Use the
  types [classref hpx::lcos::promise]`<>` and [classref hpx::lcos::packaged_action]`<>` to wrap any
  (possibly remote) action into a future.
* [classref hpx::thread] and [classref hpx::lcos::future]`<>` are now cancelable.
* Added support for sequential and logic composition of [classref hpx::lcos::future]`<>`'s.
  The member function [memberref hpx::lcos::future::when]`()` permits futures to
  be sequentially composed. The helper functions [funcref hpx::wait_all], [funcref hpx::wait_any],
  and [funcref hpx::wait_n] can be used to wait for more than one future at a time.
* __hpx__ now exposes [funcref hpx::apply]`()` and [funcref hpx::async]`()` as the preferred way of
  creating (or invoking) any deferred work. These functions are usable with
  various types of functions, function objects, and actions and provide a
  uniform way to spawn deferred tasks.
* __hpx__ now utilizes [funcref hpx::util::bind] to (partially) bind
  local functions and function objects, and also actions. Remote bound actions
  can have placeholders as well.
* __hpx__ continuations are now fully polymorphic. The class
  [classref hpx::actions::forwarding_continuation] is an example of how the user can
  write is own types of continuations. It can be used to execute any function
  as an continuation of a particular action.
* Reworked the action invocation API to be fully conformant to normal functions.
  Actions can now be invoked using [funcref hpx::apply]`()`, [funcref hpx::async]`()`, or using the
  `operator()` implemented on actions. Actions themselves can now be cheaply
  instantiated as they do not have any members anymore.
* Reworked the lazy action invocation API. Actions can now be directly bound
  using [funcref hpx::util::bind]`()` by passing an action instance as the first argument.
* A minimal __hpx__ program now looks like this:
``
      #include <hpx/hpx_init.hpp>

      int hpx_main()
      {
          return hpx::finalize();
      }

      int main()
      {
          return hpx::init();
      }
``
  This removes the immediate dependency on the __boost_program_options__ library.

[note This minimal version of an __hpx__ program does not support any of the
      default command line arguments (such as --help, or command line options
      related to PBS). It is suggested to always pass `argc` and `argv` to
      __hpx__ as shown in the example below.]

* In order to support those, but still not to depend on __boost_program_options__,
  the minimal program can be written as:
``
      #include <hpx/hpx_init.hpp>

      // The arguments for hpx_main can be left off, which very similar to the
      // behavior of `main()` as defined by C++.
      int hpx_main(int argc, char* argv[])
      {
          return hpx::finalize();
      }

      int main(int argc, char* argv[])
      {
          return hpx::init(argc, argv);
      }
``
* Added performance counters exposing the number of component instances which
  are alive on a given locality.
* Added performance counters exposing then number of messages sent and received,
  the number of parcels sent and received, the number of bytes sent and
  received, the overall time required to send and receive data, and the overall
  time required to serialize and deserialize the data.
* Added a new component: [classref hpx::components::binpacking_factory] which is equivalent to the existing
  [classref hpx::components::distributing_factory] component, except that it equalizes the overall
  population of the components to create. It exposes two factory methods, one
  based on the number of existing instances of the component type to create,
  and one based on an arbitrary performance counter which will be queried for
  all relevant localities.
* Added API functions allowing to access elements of the diagnostic information
  embedded in the given exception: [funcref hpx::get_locality_id]`()`, [funcref hpx::get_host_name]`()`,
  [funcref hpx::get_process_id]`()`, [funcref hpx::get_function_name]`()`, [funcref hpx::get_file_name]`()`,
  [funcref hpx::get_line_number]`()`, [funcref hpx::get_os_thread]`()`, [funcref hpx::get_thread_id]`()`, and
  [funcref hpx::get_thread_description]`()`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* [issue 71]  - GIDs that are not serialized via `handle_gid<>` should raise an exception
* [issue 105] - Allow for [classref hpx::util::function]s to be registered in the AGAS symbolic
                namespace
* [issue 107] - Nasty threadmanger race condition (reproducible in sheneos_test)
* [issue 108] - Add millisecond resolution to __hpx__ logs on Linux
* [issue 110] - Shutdown hang in distributed with release build
* [issue 116] - Don't use TSS for the applier and runtime pointers
* [issue 162] - Move local synchronous execution shortcut from hpx::function to the
                applier
* [issue 172] - Cache sources in CMake and check if they change manually
* [issue 178] - Add an INI option to turn off ranged-based AGAS caching
* [issue 187] - Support for disabling performance counter deployment
* [issue 202] - Support for sending performance counter data to a specific file
* [issue 218] - boost.coroutines allows different stack sizes, but stack pool is
                unaware of this
* [issue 231] - Implement movable `boost::bind`
* [issue 232] - Implement movable `boost::function`
* [issue 236] - Allow binding [classref hpx::util::function] to actions
* [issue 239] - Replace [^hpx::function] with [classref hpx::util::function]
* [issue 240] - Can't specify RemoteResult with lcos::async
* [issue 242] - REGISTER_TEMPLATE support for plain actions
* [issue 243] - `handle_gid<>` support for [classref hpx::util::function]
* [issue 245] - `*_c_cache code` throws an exception if the queried GID is not in the
                local cache
* [issue 246] - Undefined references in dataflow/adaptive1d example
* [issue 252] - Problems configuring sheneos with CMake
* [issue 254] - Lifetime of components doesn't end when client goes out of scope
* [issue 259] - CMake does not detect that MSVC10 has lambdas
* [issue 260] - io_service_pool segfault
* [issue 261] - Late parcel executed outside of pxthread
* [issue 263] - Cannot select allocator with CMake
* [issue 264] - Fix allocator select
* [issue 267] - Runtime error for hello_world
* [issue 269] - pthread_affinity_np test fails to compile
* [issue 270] - Compiler noise due to -Wcast-qual
* [issue 275] - Problem with configuration tests/include paths on Gentoo
* [issue 325] - Sheneos is 200-400 times slower than the fortran equivalent
* [issue 331] - [funcref hpx::init]`()` and hpx_main() should not depend on program_options
* [issue 333] - Add doxygen support to CMake for doc toolchain
* [issue 340] - Performance counters for parcels
* [issue 346] - Component loading error when running hello_world in distributed on
                MSVC2010
* [issue 362] - Missing initializer error
* [issue 363] - Parcel port serialization error
* [issue 366] - Parcel buffering leads to types incompatible exception
* [issue 368] - Scalable alternative to rand() needed for __hpx__
* [issue 369] - IB over IP is substantially slower than just using standard TCP/IP
* [issue 374] - [funcref hpx::lcos::wait] should work with dataflows and arbitrary classes
                meeting the future interface
* [issue 375] - Conflicting/ambiguous overloads of [funcref hpx::lcos::wait]
* [issue 376] - Find_HPX.cmake should set CMake variable HPX_FOUND for out of tree builds
* [issue 377] - ShenEOS interpolate bulk and interpolate_one_bulk are broken
* [issue 379] - Add support for distributed runs under SLURM
* [issue 382] - _Unwind_Word not declared in boost.backtrace
* [issue 387] - Doxygen should look only at list of specified files
* [issue 388] - Running `make install` on an out-of-tree application is broken
* [issue 391] - Out-of-tree application segfaults when running in qsub
* [issue 392] - Remove HPX_NO_INSTALL option from cmake build system
* [issue 396] - Pragma related warnings when compiling with older gcc versions
* [issue 399] - Out of tree component build problems
* [issue 400] - Out of source builds on Windows: linker should not receive compiler flags
* [issue 401] - Out of source builds on Windows: components need to be linked with
                hpx_serialization
* [issue 404] - gfortran fails to link automatically when fortran files are present
* [issue 405] - Inability to specify linking order for external libraries
* [issue 406] - Adapt action limits such that dataflow applications work without additional defines
* [issue 415] - `locality_results` is not a member of `hpx::components::server`
* [issue 425] - Breaking changes to `traits::*result` wrt `std::vector<id_type>`
* [issue 426] - AUTOGLOB needs to be updated to support fortran

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_8_1 __hpx__ V0.8.1 (Apr 21, 2012)]

This is a point release including important bug fixes for __0_8_0__.

[heading General Changes]

* __hpx__ does not need to be installed anymore to be functional.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this point release:

* [issue 295] - Don't require install path to be known at compile time.
* [issue 371] - Add hpx iostreams to standard build.
* [issue 384] - Fix compilation with GCC 4.7.
* [issue 390] - Remove keep_factory_alive startup call from ShenEOS; add shutdown call
                to H5close.
* [issue 393] - Thread affinity control is broken.

[heading Bug Fixes (Commits)]

Here is a list of the important commits included in this point release:

* r7642 - External: Fix backtrace memory violation.
* r7775 - Components: Fix symbol visibility bug with component startup
          providers. This prevents one components providers from overriding
          another components.
* r7778 - Components: Fix startup/shutdown provider shadowing issues.

[endsect]

[/Proofread by:]
[/Adrian Serio 3-13-12]
[/Phillip LeBlanc 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_8_0 __hpx__ V0.8.0 (Mar 23, 2012)]

We have had roughly 1000 commits since the last release and we have closed
approximately 70 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Improved PBS support, allowing for arbitrary naming schemes of node-hostnames.
* Finished verification of the reference counting framework.
* Implemented decrement merging logic to optimize the distributed reference
  counting system.
* Restructured the LCO framework. Renamed [^hpx::lcos::eager_future<>] and
  [^hpx::lcos::lazy_future<>] into [classref hpx::lcos::packaged_task]`<>` and
  [classref hpx::lcos::deferred_packaged_task]`<>`. Split
  [classref hpx::lcos::promise]`<>` into [classref hpx::lcos::packaged_task]`<>`
  and [classref hpx::lcos::future]`<>`. Added 'local' futures
  (in namespace [^hpx::lcos::local]).
* Improved the general performance of local and remote action invocations.
  This (under certain circumstances) drastically reduces the number of copies
  created for each of the parameters and return values.
* Reworked the performance counter framework. Performance counters are now
  created only when needed, which reduces the overall resource requirements.
  The new framework allows for much more flexible creation and management
  of performance counters. The new sine example application demonstrates some
  of the capabilities of the new infrastructure.
* Added a buildbot-based continuous build system which gives instant, automated
  feedback on each commit to SVN.
* Added more automated tests to verify proper functioning of __hpx__.
* Started to create documentation for __hpx__ and its API.
* Added documentation toolchain to the build system.
* Added dataflow LCO.
* Changed default __hpx__ command line options to have [^hpx:] prefix. For
  instance, the former option [^--threads] is now [hpx_cmdline [^--hpx:threads]].
  This has been done to make ambiguities with possible application specific
  command line options as unlikely as possible. See the section __commandline__
  for a full list of available options.
* Added the possibility to define command line aliases. The former short
  (one-letter) command line options have been predefined as aliases for
  backwards compatibility. See the section __commandline__ for a detailed
  description of command line option aliasing.
* Network connections are now cached based on the connected host. The number of
  simultaneous connections to a particular host is now limited. Parcels are
  buffered and bundled if all connections are in use.
* Added more refined thread affinity control. This is based on the external
  library __hwloc__.
* Improved support for Windows builds with CMake.
* Added support for components to register their own command line options.
* Added the possibility to register custom startup/shutdown functions for
  any component. These functions are guaranteed to be executed by an __hpx__
  thread.
* Added two new experimental thread schedulers: hierarchy_scheduler and
  periodic_priority_scheduler. These can be activated by using the command line
  options [hpx_cmdline [^--hpx:queueing=hierarchy]] or
  [hpx_cmdline [^--hpx:queueing=periodic]].

[heading Example Applications]

* [@http://www.graph500.org/ Graph500 performance benchmark] (thanks to Matthew
  Anderson for contributing this application).
* [@http://www.nersc.gov/research-and-development/benchmarking-and-workload-characterization/nersc-6-benchmarks/gtc/ GTC (Gyrokinetic Toroidal Code)]:
  a skeleton for particle in cell type codes.
* Random Memory Access: an example demonstrating random memory accesses in a
  large array
* [@http://stellarcollapse.org/equationofstate ShenEOS example], demonstrating
  partitioning of large read-only data structures and exposing an interpolation
  API.
* Sine performance counter demo.
* Accumulator examples demonstrating how to write and use __hpx__ components.
* Quickstart examples (like hello_world, fibonacci, quicksort, factorial, etc.)
  demonstrating simple __hpx__ concepts which introduce some of the concepts in
  __hpx__.
* Load balancing and work stealing demos.

[heading API Changes]

* Moved all local LCOs into a separate namespace `hpx::lcos::local` (for
  instance, `hpx::lcos::local_mutex` is now [classref hpx::lcos::local::mutex]).
* Replaced `hpx::actions::function` with [classref hpx::util::function]. Cleaned
  up related code.
* Removed `hpx::traits::handle_gid` and moved handling of global reference
  counts into the corresponding serialization code.
* Changed terminology: `prefix` is now called `locality_id`, renamed the
  corresponding API functions (such as `hpx::get_prefix`, which is now called
  `hpx::get_locality_id`).
* Adding [funcref hpx::find_remote_localities]`()`,
  and [funcref hpx::get_num_localities]`()`.
* Changed performance counter naming scheme to make it more bash friendly.
  The new performance counter naming scheme is now

[teletype]
``
    /object{parentname#parentindex/instance#index}/counter#parameters
``
[c++]

* Added `hpx::get_worker_thread_num` replacing `hpx::threadmanager_base::get_thread_num`.
* Renamed `hpx::get_num_os_threads` to `hpx::get_os_threads_count`.
* Added `hpx::threads::get_thread_count`.
* Restructured the Futures sub-system, renaming types in accordance with the
  terminology used by the C++11 ISO standard.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* [issue 31]  - Specialize handle_gid<> for examples and tests
* [issue 72]  - Fix AGAS reference counting
* [issue 104] - heartbeat throws an exception when decrefing the performance counter it's watching
* [issue 111] - throttle causes an exception on the target application
* [issue 142] - One failed component loading causes an unrelated component to fail
* [issue 165] - Remote exception propagation bug in AGAS reference counting test
* [issue 186] - Test credit exhaustion/splitting (e.g. prepare_gid and symbol NS)
* [issue 188] - Implement remaining AGAS reference counting test cases
* [issue 258] - No type checking of GIDs in stubs classes
* [issue 271] - Seg fault/shared pointer assertion in distributed code
* [issue 281] - CMake options need descriptive text
* [issue 283] - AGAS caching broken (gva_cache needs to be rewritten with ICL)
* [issue 285] - HPX_INSTALL root directory not the same as CMAKE_INSTALL_PREFIX
* [issue 286] - New segfault in dataflow applications
* [issue 289] - Exceptions should only be logged if not handled
* [issue 290] - c++11 tests failure
* [issue 293] - Build target for component libraries
* [issue 296] - Compilation error with Boost V1.49rc1
* [issue 298] - Illegal instructions on termination
* [issue 299] - gravity aborts with multiple threads
* [issue 301] - Build error with Boost trunk
* [issue 303] - Logging assertion failure in distributed runs
* [issue 304] - Exception 'what' strings are lost when exceptions from decode_parcel are reported
* [issue 306] - Performance counter user interface issues
* [issue 307] - Logging exception in distributed runs
* [issue 308] - Logging deadlocks in distributed
* [issue 309] - Reference counting test failures and exceptions
* [issue 311] - Merge AGAS remote_interface with the runtime_support object
* [issue 314] - Object tracking for id_types
* [issue 315] - Remove handle_gid and handle credit splitting in id_type serialization
* [issue 320] - applier::get_locality_id() should return an error value (or throw an exception)
* [issue 321] - Optimization for id_types which are never split should be restored
* [issue 322] - Command line processing ignored with Boost 1.47.0
* [issue 323] - Credit exhaustion causes object to stay alive
* [issue 324] - Duplicate exception messages
* [issue 326] - Integrate Quickbook with CMake
* [issue 329] - --help and --version should still work
* [issue 330] - Create pkg-config files
* [issue 337] - Improve usability of performance counter timestamps
* [issue 338] - Non-std exceptions deriving from std::exceptions in tfunc may be sliced
* [issue 339] - Decrease the number of send_pending_parcels threads
* [issue 343] - Dynamically setting the stack size doesn't work
* [issue 351] - 'make install' does not update documents
* [issue 353] - Disable FIXMEs in the docs by default; add a doc developer CMake option to enable FIXMEs
* [issue 355] - 'make' doesn't do anything after correct configuration
* [issue 356] - Don't use hpx::util::static_ in topology code
* [issue 359] - Infinite recursion in hpx::tuple serialization
* [issue 361] - Add compile time option to disable logging completely
* [issue 364] - Installation seriously broken in r7443

[endsect]

[/Proofread by:]
[/Adrian Serio 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_7_0 __hpx__ V0.7.0 (Dec 12, 2011)]

We have had roughly 1000 commits since the last release and we have closed
approximately 120 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Completely removed code related to deprecated AGAS V1, started to work on
  AGAS V2.1.
* Started to clean up and streamline the exposed APIs (see 'API changes' below
  for more details).
* Revamped and unified performance counter framework, added a lot of new
  performance counter instances for monitoring of a diverse set of internal
  __hpx__ parameters (queue lengths, access statistics, etc.).
* Improved general error handling and logging support.
* Fixed several race conditions, improved overall stability, decreased memory
  footprint, improved overall performance (major optimizations include native
  TLS support and ranged-based AGAS caching).
* Added support for running __hpx__ applications with PBS.
* Many updates to the build system, added support for gcc 4.5.x and 4.6.x,
  added C++11 support.
* Many updates to default command line options.
* Added many tests, set up buildbot for continuous integration testing.
* Better shutdown handling of distributed applications.

[heading Example Applications]

* quickstart/factorial and quickstart/fibonacci, future-recursive parallel
  algorithms.
* quickstart/hello_world, distributed hello world example.
* quickstart/rma, simple remote memory access example
* quickstart/quicksort, parallel quicksort implementation.
* gtc, gyrokinetic torodial code.
* bfs, breadth-first-search, example code for a graph application.
* sheneos, partitioning of large data sets.
* accumulator, simple component example.
* balancing/os_thread_num, balancing/px_thread_phase, examples demonstrating
  load balancing and work stealing.

[heading API Changes]

* Added `hpx::find_all_localities`.
* Added `hpx::terminate` for non-graceful termination of applications.
* Added `hpx::lcos::async` functions for simpler asynchronous programming.
* Added new AGAS interface for handling of symbolic namespace (`hpx::agas::*`).
* Renamed `hpx::components::wait` to `hpx::lcos::wait`.
* Renamed `hpx::lcos::future_value` to `hpx::lcos::promise`.
* Renamed `hpx::lcos::recursive_mutex` to `hpx::lcos::local_recursive_mutex`,
  `hpx::lcos::mutex` to `hpx::lcos::local_mutex`
* Removed support for Boost versions older than V1.38, recommended Boost version
  is now V1.47 and newer.
* Removed `hpx::process` (this will be replaced by a real process implementation
  in the future).
* Removed non-functional LCO code (`hpx::lcos::dataflow`, `hpx::lcos::thunk`,
  `hpx::lcos::dataflow_variable`).
* Removed deprecated `hpx::naming::full_address`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* [issue 28]  - Integrate Windows/Linux CMake code for __hpx__ core
* [issue 32]  - hpx::cout() should be hpx::cout
* [issue 33]  - AGAS V2 legacy client does not properly handle error_code
* [issue 60]  - AGAS: allow for registerid to optionally take ownership of the gid
* [issue 62]  - adaptive1d compilation failure in Fusion
* [issue 64]  - Parcel subsystem doesn't resolve domain names
* [issue 83]  - No error handling if no console is available
* [issue 84]  - No error handling if a hosted locality is treated as the bootstrap server
* [issue 90]  - Add general commandline option -N
* [issue 91]  - Add possibility to read command line arguments from file
* [issue 92]  - Always log exceptions/errors to the log file
* [issue 93]  - Log the command line/program name
* [issue 95]  - Support for distributed launches
* [issue 97]  - Attempt to create a bad component type in AMR examples
* [issue 100] - factorial and factorial_get examples trigger AGAS component type assertions
* [issue 101] - Segfault when hpx::process::here() is called in fibonacci2
* [issue 102] - unknown_component_address in int_object_semaphore_client
* [issue 114] - marduk raises assertion with default parameters
* [issue 115] - Logging messages for SMP runs (on the console) shouldn't be buffered
* [issue 119] - marduk linking strategy breaks other applications
* [issue 121] - pbsdsh problem
* [issue 123] - marduk, dataflow and adaptive1d fail to build
* [issue 124] - Lower default preprocessing arity
* [issue 125] - Move hpx::detail::diagnostic_information out of the detail namespace
* [issue 126] - Test definitions for AGAS reference counting
* [issue 128] - Add averaging performance counter
* [issue 129] - Error with endian.hpp while building adaptive1d
* [issue 130] - Bad initialization of performance counters
* [issue 131] - Add global startup/shutdown functions to component modules
* [issue 132] - Avoid using auto_ptr
* [issue 133] - On Windows hpx.dll doesn't get installed
* [issue 134] - HPX_LIBRARY does not reflect real library name (on Windows)
* [issue 135] - Add detection of unique_ptr to build system
* [issue 137] - Add command line option allowing to repeatedly evaluate performance counters
* [issue 139] - Logging is broken
* [issue 140] - CMake problem on windows
* [issue 141] - Move all non-component libraries into $PREFIX/lib/hpx
* [issue 143] - adaptive1d throws an exception with the default command line options
* [issue 146] - Early exception handling is broken
* [issue 147] - Sheneos doesn't link on Linux
* [issue 149] - sheneos_test hangs
* [issue 154] - Compilation fails for r5661
* [issue 155] - Sine performance counters example chokes on chrono headers
* [issue 156] - Add build type to --version
* [issue 157] - Extend AGAS caching to store gid ranges
* [issue 158] - r5691 doesn't compile
* [issue 160] - Re-add AGAS function for resolving a locality to its prefix
* [issue 168] - Managed components should be able to access their own GID
* [issue 169] - Rewrite AGAS future pool
* [issue 179] - Complete switch to request class for AGAS server interface
* [issue 182] - Sine performance counter is loaded by other examples
* [issue 185] - Write tests for symbol namespace reference counting
* [issue 191] - Assignment of read-only variable in point_geometry
* [issue 200] - Seg faults when querying performance counters
* [issue 204] - --ifnames and suffix stripping needs to be more generic
* [issue 205] - --list-* and --print-counter-* options do not work together and produce no warning
* [issue 207] - Implement decrement entry merging
* [issue 208] - Replace the spinlocks in AGAS with hpx::lcos::local_mutexes
* [issue 210] - Add an --ifprefix option
* [issue 214] - Performance test for PX-thread creation
* [issue 216] - VS2010 compilation
* [issue 222] - r6045 context_linux_x86.hpp
* [issue 223] - fibonacci hangs when changing the state of an active thread
* [issue 225] - Active threads end up in the FEB wait queue
* [issue 226] - VS Build Error for Accumulator Client
* [issue 228] - Move all traits into namespace hpx::traits
* [issue 229] - Invalid initialization of reference in thread_init_data
* [issue 235] - Invalid GID in iostreams
* [issue 238] - Demangle type names for the default implementation of get_action_name
* [issue 241] - C++11 support breaks GCC 4.5
* [issue 247] - Reference to temporary with GCC 4.4
* [issue 248] - Seg fault at shutdown with GCC 4.4
* [issue 253] - Default component action registration kills compiler
* [issue 272] - G++ unrecognized command line option
* [issue 273] - quicksort example doesn't compile
* [issue 277] - Invalid CMake logic for Windows

[endsect]

[endsect] [/ Previous HPX Releases]
