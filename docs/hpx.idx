#   Copyright (c) 2001-2017 Hartmut Kaiser
#
#   Distributed under the Boost Software License, Version 1.0. (See accompanying
#   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#!debug ".*"

#!scan-path "../hpx" ".*\.hpp" true

# action invocation
apply                                 "" "hpx\.manual\.applying_actions\.action_invocation.*"
async                                 "" "hpx\.manual\.applying_actions\.action_invocation.*"
async_continue                        "" "hpx\.manual\.applying_actions\.action_invocation.*"

# hpx/hpx_fwd.hpp
find_here                             "" "hpx\.find_here.*"
find_root_locality                    "" "hpx\.find_root_locality.*"
find_all_localities                   "" "hpx\.find_all_localities.*"
find_remote_localities                "" "hpx\.find_remote_localities.*"
find_locality                         "" "hpx\.find_locality.*"

# hpx/runtime/basename_registration.hpp
find_all_from_basename                "" "hpx\.find_all_from_basename.*"
find_from_basename                    "" "hpx\.find_from_basenam_id.*"
register_with_basename                "" "hpx\.register_with_bas_id.*"
unregister_with_basename              "" "hpx\.unregister_with_basename.*"

get_num_localities_sync               "" "hpx\.get_num_localitie_id.*"
get_num_localities                    "" "hpx\.get_num_localitie_id.*"
get_initial_num_localities            "" "hpx\.get_initial_num_localities.*"

register_pre_startup_function         "" "hpx\.register_pre_star_id.*"
register_startup_function             "" "hpx\.register_startup_function.*"
register_pre_shutdown_function        "" "hpx\.register_pre_shut_id.*"
register_shutdown_function            "" "hpx\.register_shutdown_function.*"
startup_function_type                 "" "hpx\.startup_function_type.*"
shutdown_function_type                "" "hpx\.shutdown_function_type.*"

get_locality_id                       "" "hpx\.get_locality_id.*"

is_running                            "" "hpx\.is_running.*"
is_starting                           "" "hpx\.is_starting.*"
is_stopped                            "" "hpx\.is_stopped.*"
is_stopped_or_shutting_down           "" "hpx\.is_stopped_or_shutting_down.*"

get_worker_thread_num                 "" "hpx\.get_worker_thread_num.*"
get_thread_name                       "" "hpx\.get_thread_name.*"
get_num_worker_threads                "" "hpx\.get_num_worker_threads.*"

# hpx/runtime/get_locality_name.hpp
get_locality_name                     "" "hpx\.get_locality_name.*"

get_system_uptime                     "" "hpx\.get_system_uptime.*"
get_colocation_id                     "" "hpx\.get_colocation_id.*"
get_colocation_id_sync                "" "hpx\.get_colocation_id_sync.*"

# hpx/runtime/trigger_lco.hpp
trigger_lco_event                     "" "hpx\.trigger_lco_event.*"
set_lco_event                         "" "hpx\.set_lco_event.*"
set_lco_value                         "" "hpx\.set_lco_value.*"
set_lco_error                         "" "hpx\.set_lco_error.*"

start_active_counters                 "" "hpx\.start_active_counters.*"
reset_active_counters                 "" "hpx\.reset_active_counters.*"
stop_active_counters                  "" "hpx\.stop_active_counters.*"
evaluate_active_counters              "" "hpx\.evaluate_active_counters.*"

# hpx/runtime/set_parcel_write_handler.hpp
set_parcel_write_handler              "" "hpx\.set_parcel_write_.*"
parcel_write_handler_type             "" "hpx\.parcel_write_hand.*"

# hpx/runtime/threads/thread_data_fwd.hpp
get_self                              "" "hpx\.threads\.get_self.*"
get_self_ptr                          "" "hpx\.threads\.get_self_ptr.*"
get_ctx_ptr                           "" "hpx\.threads\.get_ctx_ptr.*"
get_self_ptr_checked                  "" "hpx\.threads\.get_self_ptr_checked.*"
get_self_id                           "" "hpx\.threads\.get_self_id.*"
get_parent_id                         "" "hpx\.threads\.get_parent_id.*"
get_parent_phase                      "" "hpx\.threads\.get_parent_phase.*"
get_parent_locality_id                "" "hpx\.threads\.get_parent_locality_id.*"
get_self_component_id                 "" "hpx\.threads\.get_self_component_id.*"
get_thread_count                      "" "hpx\.threads\.get_thread_count.*"
enumerate_threads                     "" "hpx\.threads\.enumerate_threads.*"

# hpx/runtime/threads/thread_enums.hpp
thread_state_enum                     "" "hpx\.threads\.thread_state_enum.*"
thread_priority                       "" "hpx\.threads\.thread_priority.*"
thread_state_ex_enum                  "" "hpx\.threads\.thread_state_ex_enum.*"
thread_stacksize                      "" "hpx\.threads\.thread_stacksize.*"
get_thread_state_name                 "" "hpx\.threads\.get_thread_state_name.*"
get_thread_priority_name              "" "hpx\.threads\.get_thread_priority_name.*"
get_thread_state_ex_name              "" "hpx\.threads\.get_thread_state_ex_name.*"
get_stack_size_name                   "" "hpx\.threads\.get_stack_size_name.*"

# hpx/components/component_storage/migrate_from_storage.hpp
migrate_from_storage                  "" "hpx\.components\.migrate_from_s.*"

# hpx/components/component_storage/migrate_to_storage.hpp
migrate_to_storage                    "" "hpx\.components\.migrate_to_s.*"

# hpx/parallel/execution_policy.hpp
parallel::execution::parallel_policy        "parallel_policy"               "hpx\.parallel\.execution\.parallel_policy$"
parallel::execution::parallel_task_policy   "parallel_task_policy"          "hpx\.parallel\.execution\.parallel_task_policy$"
parallel::execution::sequenced_policy       "sequenced_policy"              "hpx\.parallel\.execution\.sequenced_policy$"
parallel::execution::sequenced_task_policy  "sequenced_task_policy"         "hpx\.parallel\.execution\.sequenced_task_policy$"

parallel::execution::is_execution_policy              "is_execution_policy"            "hpx\.parallel\.execution\.is_execution_policy.*"
parallel::execution::is_parallel_execution_policy     "is_parallel_execution_policy"   "hpx\.parallel\.execution\.is_parallel_execu_.*"
parallel::execution::is_sequenced_execution_policy    "is_sequenced_execution_policy"  "hpx\.parallel\.execution\.is_sequenced_exec_.*"
parallel::execution::is_async_execution_policy        "is_async_execution_policy"      "hpx\.parallel\.execution\.is_async_execution_policy$"

# hpx/parallel/executors/execution_traits.hpp
parallel::is_executor                      "is_executor"                   "hpx\.parallel\.v3\.is_executor.*"

parallel::execution::sequenced_execution_tag          "sequenced_execution_tag"       "hpx\.parallel\.execution\.sequenced_execution_tag.*"
parallel::execution::parallel_execution_tag           "parallel_execution_tag"        "hpx\.parallel\.execution\.parallel_execution_tag.*"
parallel::execution::vector_execution_tag             "vector_execution_tag"          "hpx\.parallel\.execution\.vector_execution_tag.*"

# hpx/parallel/executors/sequential_executor.hpp
parallel::execution::sequenced_executor              "sequenced_executor"           "hpx\.parallel\.execution\.sequenced_executor.*"

# hpx/parallel/executors/parallel_executor.hpp
parallel::execution::parallel_executor                "parallel_executor"             "hpx\.parallel\.execution\.parallel_executor.*"

# hpx/parallel/executors/service_executors.hpp
parallel::execution::service_executor                 "service_executor"              "hpx\.parallel\.execution\.service_executor.*"

# hpx/parallel/executors/this_thread_executors.hpp
parallel::execution::this_thread_static_queue_executor          "this_thread_static_queue_executor"    "hpx\.parallel\.execution\.this_thread_static_queue_executor.*"
parallel::execution::this_thread_static_priority_queue_executor "this_thread_static_priority_queue_executor"  "hpx\.parallel\.execution\.this_thread_static_priority_queue_executor.*"

# hpx/parallel/executors/thread_pool_executors.hpp
parallel::execution::local_queue_executor              "local_queue_executor"             "hpx\.parallel\.execution\.local_queue_executor.*"
parallel::execution::local_priority_queue_executor     "local_priority_queue_executor"    "hpx\.parallel\.execution\.local_priority_qu_.*"
parallel::execution::static_priority_queue_executor    "static_priority_queue_executor"   "hpx\.parallel\.execution\.static_priority_q_.*"

# hpx/parallel/executors/timed_execution_traits.hpp
parallel::is_timed_executor                 "is_timed_executor"             "hpx\.parallel\.v3\.is_timed_executor.*"

# hpx/parallel/executors/executor_parameter_traits.hpp
parallel::is_executor_parameters         "is_executor_parameters"           "hpx\.parallel\.v3\.is_executor_parameters.*"

# hpx/parallel/executors/static_chunk_size.hpp
parallel::static_chunk_size                 "static_chunk_size"             "hpx\.parallel\.v3\.static_chunk_size.*"

# hpx/parallel/executors/dynamic_chunk_size.hpp
parallel::dynamic_chunk_size                "dynamic_chunk_size"            "hpx\.parallel\.v3\.dynamic_chunk_size.*"

# hpx/parallel/executors/guided_chunk_size.hpp
parallel::guided_chunk_size                 "guided_chunk_size"             "hpx\.parallel\.v3\.guided_chunk_size.*"

# hpx/parallel/executors/auto_chunk_size.hpp
parallel::auto_chunk_size                   "auto_chunk_size"               "hpx\.parallel\.v3\.auto_chunk_size.*"

# hpx/parallel/executors/persistent_auto_chunk_size.hpp
parallel::persistent_auto_chunk_size        "persistent_auto_chunk_size"    "hpx\.parallel\.v3\.persistent_auto_chunk_size.*"


# hpx/parallel/algorithms/adjacent_difference.hpp
parallel::adjacent_difference         "adjacent_difference" "hpx\.parallel\.v1\.adjacent_difference.*"

# hpx/parallel/algorithms/adjacent_find.hpp
parallel::adjacent_find               "adjacent_find" "hpx\.parallel\.v1\.adjacent_find.*"

# hpx/parallel/algorithms/all_any_none.hpp
parallel::all_of                      "all_of" "hpx\.parallel\.v1\.all_of.*"
parallel::any_of                      "any_of" "hpx\.parallel\.v1\.any_of.*"
parallel::none_of                     "none_of" "hpx\.parallel\.v1\.none_of.*"

# hpx/parallel/algorithms/copy.hpp
parallel::copy                        "copy" "hpx\.parallel\.v1\.copy_id.*"
parallel::copy_if                     "copy_if" "hpx\.parallel\.v1\.copy_if.*"
parallel::copy_n                      "copy_n" "hpx\.parallel\.v1\.copy_n.*"

# hpx/parallel/algorithms/count.hpp
parallel::count                       "count" "hpx\.parallel\.v1\.count$"
parallel::count_if                    "count_if" "hpx\.parallel\.v1\.count_if.*"

# hpx/parallel/algorithms/destroy.hpp
parallel::destroy                       "destroy" "hpx\.parallel\.v1\.destroy$.*"
parallel::destroy_n                     "destroy_n" "hpx\.parallel\.v1\.destroy_n.*"

# hpx/parallel/algorithms/equal.hpp
parallel::equal                       "equal" "hpx\.parallel\.v1\.equal_id.*"

# hpx/parallel/algorithms/exclusive_scan.hpp
parallel::exclusive_scan              "exclusive_scan" "hpx\.parallel\.v1\.exclusive_scan.*"

# hpx/parallel/algorithms/fill.hpp
parallel::fill                        "fill" "hpx\.parallel\.v1\.fill$"
parallel::fill_n                      "fill_n" "hpx\.parallel\.v1\.fill_n.*"

# hpx/parallel/algorithms/find.hpp
parallel::find                        "find" "hpx\.parallel\.v1\.find$"
parallel::find_if                     "find_if" "hpx\.parallel\.v1\.find_if$"
parallel::find_if_not                 "find_if_not" "hpx\.parallel\.v1\.find_if_not.*"
parallel::find_end                    "find_end" "hpx\.parallel\.v1\.find_end.*"
parallel::find_first_of               "find_first_of" "hpx\.parallel\.v1\.find_first_of.*"

# hpx/parallel/algorithms/for_each.hpp
parallel::for_each                    "for_each" "hpx\.parallel\.v1\.for_each_id.*"
parallel::for_each_n                  "for_each_n" "hpx\.parallel\.v1\.for_each_n.*"

# hpx/parallel/algorithms/for_loop.hpp
parallel::for_loop                    "for_loop" "hpx\.parallel\.v2\.for_loop_id.*"
parallel::for_loop_strided            "for_loop_strided" "hpx\.parallel\.v2\.for_loop_strided_id.*"
parallel::for_loop_n                  "for_loop_n" "hpx\.parallel\.v2\.for_loop_n_id.*"
parallel::for_loop_n_strided          "for_loop_n_strided" "hpx\.parallel\.v2\.for_loop_n_stride_id.*"

# hpx/parallel/algorithms/for_loop_induction.hpp
parallel::induction                   "induction" "hpx\.parallel\.v2\.induction"

# hpx/parallel/algorithms/generate.hpp
parallel::generate                    "generate" "hpx\.parallel\.v1\.generate_id.*"
parallel::generate_n                  "generate_n" "hpx\.parallel\.v1\.generate_n.*"

# hpx/parallel/algorithms/includes.hpp
parallel::includes                    "includes" "hpx\.parallel\.v1\.includes.*"

# hpx/parallel/algorithms/inclusive_scan.hpp
parallel::inclusive_scan              "inclusive_scan" "hpx\.parallel\.v1\.inclusive_scan.*"

# hpx/parallel/algorithms/inner_product.hpp
parallel::inner_product               "inner_product" "hpx\.parallel\.v1\.inner_product.*"

# hpx/parallel/algorithms/is_heap.hpp
parallel::is_heap                   "is_heap"  "hpx\.parallel\.v1\.is_heap_id.*"
parallel::is_heap_until             "is_heap_until"  "hpx\.parallel\.v1\.is_heap_until.*"

# hpx/parallel/algorithms/is_partitioned.hpp
parallel::is_partitioned              "is_partitioned" "hpx\.parallel\.v1\.is_partitioned.*"

# hpx/parallel/algorithms/is_sorted.hpp
parallel::is_sorted                   "is_sorted"  "hpx\.parallel\.v1\.is_sorted_id.*"
parallel::is_sorted_until             "is_sorted_until"  "hpx\.parallel\.v1\.is_sorted_until.*"

# hpx/parallel/algorithms/lexicographical_compare.hpp
parallel::lexicographical_compare     "lexicographical_compare" "hpx\.parallel\.v1\.lexicographical_compare.*"

# hpx/parallel/algorithms/minmax.hpp
parallel::max_element                 "max_element" "hpx\.parallel\.v1\.max_element.*"
parallel::min_element                 "min_element" "hpx\.parallel\.v1\.min_element.*"
parallel::minmax_element              "minmax_element" "hpx\.parallel\.v1\.minmax_element.*"

# hpx/parallel/algorithms/mismatch.hpp
parallel::mismatch                    "mismatch" "hpx\.parallel\.v1\.mismatch_id.*"

# hpx/parallel/algorithms/move.hpp
parallel::move                        "move" "hpx\.parallel\.v1\.move$"

# hpx/parallel/algorithms/reduce.hpp
parallel::reduce                      "reduce" "hpx\.parallel\.v1\.reduce.*"

# hpx/parallel/algorithms/reduce_by_key.hpp
parallel::reduce_by_key               "reduce_by_key" "hpx\.parallel\.v1\.reduce_by_key.*"

# hpx/parallel/algorithms/for_loop_reduction.hpp
parallel::reduction                   "reduction" "hpx\.parallel\.v2\.reduction"
parallel::reduction_plus              "reduction_plus" "hpx\.parallel\.v2\.reduction_plus"
parallel::reduction_multiplies        "reduction_multiplies" "hpx\.parallel\.v2\.reduction_multiplies"
parallel::reduction_bit_and           "reduction_bit_and" "hpx\.parallel\.v2\.reduction_bit_and"
parallel::reduction_bit_or            "reduction_bit_or" "hpx\.parallel\.v2\.reduction_bit_or"
parallel::reduction_bit_xor           "reduction_bit_xor" "hpx\.parallel\.v2\.reduction_bit_xor"
parallel::reduction_min               "reduction_min" "hpx\.parallel\.v2\.reduction_min"
parallel::reduction_max               "reduction_max" "hpx\.parallel\.v2\.reduction_max"

# hpx/parallel/algorithms/remove_copy.hpp
parallel::remove_copy                  "remove_copy" "hpx\.parallel\.v1\.remove_copy$"
parallel::remove_copy_if               "remove_copy_if" "hpx\.parallel\.v1\.remove_copy_if.*"

# hpx/parallel/algorithms/replace.hpp
parallel::replace                     "replace" "hpx\.parallel\.v1\.replace$"
parallel::replace_if                  "replace_if" "hpx\.parallel\.v1\.replace_if.*"
parallel::replace_copy                "replace_copy" "hpx\.parallel\.v1\.replace_copy$"
parallel::replace_copy_if             "replace_copy_if" "hpx\.parallel\.v1\.replace_copy_if.*"

# hpx/parallel/algorithms/reverse.hpp
parallel::reverse                     "reverse" "hpx\.parallel\.v1\.reverse$"
parallel::reverse_copy                "reverse_copy" "hpx\.parallel\.v1\.reverse_copy.*"

# hpx/parallel/algorithms/rotate.hpp
parallel::rotate                      "rotate" "hpx\.parallel\.v1\.rotate"
parallel::rotate_copy                 "rotate_copy" "hpx\.parallel\.v1\.rotate_copy.*"

# hpx/parallel/algorithms/swap_ranges.hpp
parallel::search                      "search" "hpx\.parallel\.v1\.search_id.*"
parallel::search_n                    "search_n" "hpx\.parallel\.v1\.search_n.*"

# hpx/parallel/algorithms/set_difference.hpp
parallel::set_difference              "set_difference" "hpx\.parallel\.v1\.set_difference.*"

# hpx/parallel/algorithms/set_intersection.hpp
parallel::set_intersection            "set_intersection" "hpx\.parallel\.v1\.set_intersection.*"

# hpx/parallel/algorithms/set_symmetric_difference.hpp
parallel::set_symmetric_difference    "set_symmetric_difference" "hpx\.parallel\.v1\.set_symmetric_dif.*"

# hpx/parallel/algorithms/set_union.hpp
parallel::set_union                   "set_union" "hpx\.parallel\.v1\.set_union.*"

# hpx/parallel/algorithms/sort(_by_key].hpp
parallel::sort                        "sort" "hpx\.parallel\.v1\.sort.*"
parallel::sort_by_key                 "sort_by_key" "hpx\.parallel\.v1\.sort_by_key.*"

# hpx/parallel/algorithms/swap_ranges.hpp
parallel::swap_ranges                 "swap_ranges" "hpx\.parallel\.v1\.swap_ranges.*"

# hpx/parallel/task_region.hpp
parallel::define_task_block           "define_task_block" "hpx\.parallel\.v2\.define_task_block.*"
parallel::define_task_block_restore_thread "define_task_block_restore_thread" "hpx\.parallel\.v2\.define_task_block_.*"
parallel::task_block                  "task_block" "hpx\.parallel\.v2\.task_block.*"
parallel::task_canceled_exception     "task_canceled_exception" "hpx\.parallel\.v2\.task_canceled_exception.*"

# hpx/parallel/algorithms/transform.hpp
parallel::transform                   "transform" "hpx\.parallel\.v1\.transform.*"

# hpx/parallel/algorithms/transform_exclusive_scan.hpp
parallel::transform_exclusive_scan    "transform_exclusive_scan" "hpx\.parallel\.v1\.transform_exclusive_scan.*"

# hpx/parallel/algorithms/transform_inclusive_scan.hpp
parallel::transform_inclusive_scan    "transform_inclusive_scan" "hpx\.parallel\.v1\.transform_inclusive_scan.*"

# hpx/parallel/algorithms/transform_reduce.hpp
parallel::transform_reduce            "transform_reduce" "hpx\.parallel\.v1\.transform_reduce.*"

# hpx/parallel/algorithms/uninitialized_copy.hpp
parallel::uninitialized_copy          "uninitialized_copy" "hpx\.parallel\.v1\.uninitialized_copy$"
parallel::uninitialized_copy_n        "uninitialized_copy_n" "hpx\.parallel\.v1\.uninitialized_copy_n.*"

# hpx/parallel/algorithms/uninitialized_fill.hpp
parallel::uninitialized_default_construct   "uninitialized_default_construct" "hpx\.parallel\.v1\.uninitialized_def_id.*"
parallel::uninitialized_default_construct_n "uninitialized_default_construct_n" "hpx\.parallel\.v1\.uninitialized_def_id.*"

# hpx/parallel/algorithms/uninitialized_fill.hpp
parallel::uninitialized_fill          "uninitialized_fill" "hpx\.parallel\.v1\.uninitialized_fill$"
parallel::uninitialized_fill_n        "uninitialized_fill_n" "hpx\.parallel\.v1\.uninitialized_fill_n.*"

# hpx/parallel/algorithms/uninitialized_move.hpp
parallel::uninitialized_move          "uninitialized_move" "hpx\.parallel\.v1\.uninitialized_move$"
parallel::uninitialized_move_n        "uninitialized_move_n" "hpx\.parallel\.v1\.uninitialized_move_n.*"

# hpx/parallel/algorithms/uninitialized_value_construct.hpp
parallel::uninitialized_value_construct          "uninitialized_value_construct" "hpx\.parallel\.v1\.uninitialized_val_id.*"
parallel::uninitialized_value_construct_n        "uninitialized_value_construct_n" "hpx\.parallel\.v1\.uninitialized_val_id.*"

# hpx/runtime/components/colocating_distribution_policy.hpp
colocating_distribution_policy        "" "hpx\.components\.colocating_distri_id.*"
colocated                             "" "hpx\.components\.colocated.*"

# hpx/runtime/components/default_distribution_policy.hpp
default_distribution_policy           "" "hpx\.components\.default_distribut_id.*"
default_layout                        "" "hpx\.components\.default_layout.*"

# hpx/runtime/components/binpacking_distribution_policy.hpp
binpacking_distribution_policy        "" "hpx\.components\.binpacking_distri_id.*"
binpacked                             '' "hpx\.components\.binpacked.*"

# hpx/runtime/components/new.hpp
new_                                  "" "hpx\.new_id.*"
local_new                             "" "hpx\.local_new.*"

# hpx/runtime/components/copy_component.hpp
copy                                  "" "hpx\.components\.copy.*"

# hpx/runtime/components/migrate_component.hpp
migrate                               "" "hpx\.components\.migrate_id.*"

# hpx/exception.hpp
HPX_THROW_EXCEPTION                   "" "HPX_THROW_EXCEPTION"
HPX_THROWS_IF                         "" "HPX_THROWS_IF"

error_code                            "" "hpx\.error_code"
exception                             "" "hpx\.exception"
thread_interrupted                    "" "hpx\.thread_interrupted"

throwmode                             "" "header\.hpx\.exception_hpp"
throws                                "" "header\.hpx\.exception_hpp"

make_error_code                       "" "header\.hpx\.exception_hpp"
make_success_code                     "" "header\.hpx\.exception_hpp"

diagnostic_information                "" "hpx\.diagnostic_inform.*"
get_error_locality_id                 "" "hpx\.get_error_localit.*"
get_error                             "" "hpx\.get_error_id.*"
get_error_host_name                   "" "hpx\.get_error_ho.*"
get_error_process_id                  "" "hpx\.get_error_process.*"
get_error_function_name               "" "hpx\.get_error_functio.*"
get_error_file_name                   "" "hpx\.get_error_file_na.*"
get_error_line_number                 "" "hpx\.get_error_line_nu.*"
get_error_os_thread                   "" "hpx\.get_error_os_thre.*"
get_error_thread_id                   "" "hpx\.get_error_thread_.*"
get_error_thread_description          "" "hpx\.get_error_thread_.*"
get_error_backtrace                   "" "hpx\.get_error_backtra.*"
get_error_what                        "" "hpx\.get_error_what.*"
get_error_env                         "" "hpx\.get_error_env.*"
get_error_config                      "" "hpx\.get_error_config.*"
get_error_state                       "" "hpx\.get_error_state.*"


# hpx/error.hpp
error                                 "" "hpx\.error"
success                               "" "hpx\.error"
no_success                            "" "hpx\.error"
not_implemented                       "" "hpx\.error"
out_of_memory                         "" "hpx\.error"
bad_action_code                       "" "hpx\.error"
bad_component_type                    "" "hpx\.error"
network_error                         "" "hpx\.error"
version_too_new                       "" "hpx\.error"
version_too_old                       "" "hpx\.error"
version_unknown                       "" "hpx\.error"
unknown_component_address             "" "hpx\.error"
duplicate_component_address           "" "hpx\.error"
invalid_status                        "" "hpx\.error"
bad_parameter                         "" "hpx\.error"
internal_server_error                 "" "hpx\.error"
service_unavailable                   "" "hpx\.error"
bad_request                           "" "hpx\.error"
repeated_request                      "" "hpx\.error"
lock_error                            "" "hpx\.error"
duplicate_console                     "" "hpx\.error"
no_registered_console                 "" "hpx\.error"
startup_timed_out                     "" "hpx\.error"
uninitialized_value                   "" "hpx\.error"
bad_response_type                     "" "hpx\.error"
deadlock                              "" "hpx\.error"
assertion_failure                     "" "hpx\.error"
null_thread_id                        "" "hpx\.error"
invalid_data                          "" "hpx\.error"
yield_aborted                         "" "hpx\.error"
dynamic_link_failure                  "" "hpx\.error"
commandline_option_error              "" "hpx\.error"
serialization_error                   "" "hpx\.error"
unhandled_exception                   "" "hpx\.error"
kernel_error                          "" "hpx\.error"
broken_task                           "" "hpx\.error"
task_moved                            "" "hpx\.error"
task_already_started                  "" "hpx\.error"
future_already_retrieved              "" "hpx\.error"
promise_already_satisfied             "" "hpx\.error"
future_does_not_support_cancellation  "" "hpx\.error"
future_can_not_be_cancelled           "" "hpx\.error"
no_state                              "" "hpx\.error"
broken_promise                        "" "hpx\.error"
thread_resource_error                 "" "hpx\.error"
thread_interrupted                    "" "hpx\.error"
thread_not_interruptable              "" "hpx\.error"
duplicate_component_id                "" "hpx\.error"
duplicate_component_id                "" "hpx\.error"
unknown_error                         "" "hpx\.error"
bad_plugin_type                       "" "hpx\.error"
filesystem_error                      "" "hpx\.error"
bad_function_call                     "" "hpx\.error"
security_error                        "" "hpx\.error"
filesystem_error                      "" "hpx\.error"
bad_function_call                     "" "hpx\.error"
task_canceled_exception               "" "hpx\.error"
task_region_not_active                "" "hpx\.error"
out_of_range                          "" "hpx\.error"
length_error                          "" "hpx\.error"

# hpx/runtime/naming/unmanaged.hpp
unmanaged                             "" "header\.hpx\.runtime\.naming\.unmanaged.*"

# hpx/runtime/get_ptr.hpp
get_ptr                               "" "hpx\.runtime\.get_ptr.*"

# hpx/lcos/barrier.hpp
barrier                               "" "header\.hpx\.lcos\.barrier.*"

# hpx/lcos/broadcast.hpp
broadcast                             "" "header\.hpx\.lcos\.broadcast.*"
broadcast_with_index                  "" "header\.hpx\.lcos\.broadcast.*"
broadcast_apply                       "" "header\.hpx\.lcos\.broadcast.*"
broadcast_apply_with_index            "" "header\.hpx\.lcos\.broadcast.*"

# hpx/lcos/gather.hpp
gather_here                           "" "header\.hpx\.lcos\.gather.*"
gather_there                          "" "header\.hpx\.lcos\.gather.*"

HPX_REGISTER_GATHER_DECLARATION       "" "header\.hpx\.lcos\.gather.*"
HPX_REGISTER_GATHER                   "" "header\.hpx\.lcos\.gather.*"

# hpx/lcos/reduce.hpp
reduce                                "" "header\.hpx\.lcos\.reduce.*"
reduce_with_index                     "" "header\.hpx\.lcos\.reduce.*"

# hpx/lcos/fold.hpp
fold                                  "" "header\.hpx\.lcos\.fold.*"
fold_with_index                       "" "header\.hpx\.lcos\.fold.*"
inverse_fold                          "" "header\.hpx\.lcos\.fold.*"
inverse_fold_with_index               "" "header\.hpx\.lcos\.fold.*"

# hpx/lcos/split_future.hpp
split_future                          "" "header\.hpx\.lcos\.split_future.*"

# hpx/lcos/wait_all.hpp
wait_all                              "" "header\.hpx\.lcos\.wait_all.*"
wait_all_n                            "" "header\.hpx\.lcos\.wait_all.*"

# hpx/lcos/when_all.hpp
when_all                              "" "header\.hpx\.lcos\.when_all.*"
when_all_n                            "" "header\.hpx\.lcos\.when_all.*"

# hpx/lcos/wait_any.hpp
wait_any                              "" "header\.hpx\.lcos\.wait_any.*"
wait_any_n                            "" "header\.hpx\.lcos\.wait_any.*"

# hpx/lcos/when_any.hpp
when_any                              "" "header\.hpx\.lcos\.when_any.*"
when_any_n                            "" "header\.hpx\.lcos\.when_any.*"

# hpx/lcos/wait_some.hpp
wait_some                             "" "header\.hpx\.lcos\.wait_some.*"
wait_some_n                           "" "header\.hpx\.lcos\.wait_some.*"

# hpx/lcos/when_some.hpp
when_some                             "" "header\.hpx\.lcos\.when_some.*"
when_some_n                           "" "header\.hpx\.lcos\.when_some.*"

# hpx/lcos/when_each.hpp
when_each                             "" "header\.hpx\.lcos\.when_each.*"
when_each_n                           "" "header\.hpx\.lcos\.when_each.*"

# hpx/lcos/wait_each.hpp
wait_each                             "" "header\.hpx\.lcos\.wait_each.*"
wait_each_n                           "" "header\.hpx\.lcos\.wait_each.*"

# hpx/util/invoke.hpp
invoke                                "" "header\.hpx\.util\.invoke.*"
invoke_r                              "" "header\.hpx\.util\.invoke_r.*"

# hpx/util/invoke_fused.hpp
invoke_fused                          "" "header\.hpx\.util\.invoke_fused.*"
invoke_fused_r                        "" "header\.hpx\.util\.invoke_fused_r.*"

# hpx/util/pack_traversal.hpp
map_pack                              "" "header\.hpx\.util\.pack_traversal.*"
spread_this                           "" "header\.hpx\.util\.pack_traversal.*"
traverse_pack                         "" "header\.hpx\.util\.pack_traversal.*"

# hpx/util/unwrap.hpp
unwrap                                "" "header\.hpx\.util\.unwrap.*"
unwrap_n                              "" "header\.hpx\.util\.unwrap_n.*"
unwrap_all                            "" "header\.hpx\.util\.unwrap_all.*"
unwrapping                            "" "header\.hpx\.util\.unwrapping.*"
unwrapping_n                          "" "header\.hpx\.util\.unwrapping_n.*"
unwrapping_all                        "" "header\.hpx\.util\.unwrapping_all.*"

# hpx/util/unwrapped.hpp
unwrapped                             "" "header\.hpx\.util\.unwrapped.*"
unwrapped2                            "" "header\.hpx\.util\.unwrapped2.*"

# hpx/hpx_finalize.hpp
finalize                              "" "hpx\.finalize_id.*"
terminate                             "" "hpx\.terminate$"
disconnect                            "" "hpx\.disconnect_id.*"
stop                                  "" "hpx\.stop$"

# hpx/hpx_init.hpp
init                                  "" "hpx\.init_id.*"

# hpx/hpx_start.hpp
start                                 "" "hpx\.start_id.*"

# hpx/performance_counters/manage_counter_type.hpp
install_counter_type                  "" "hpx\.performance_counters\.install_counter_type.*"

# hpx/runtime/actions/action_support.hpp
HPX_REGISTER_ACTION_DECLARATION           "" "HPX_REGISTER_ACTION_DECLARATION"
HPX_REGISTER_ACTION                       "" "HPX_REGISTER_ACTION"
HPX_REGISTER_ACTION_ID                    "" "HPX_REGISTER_ACTION_ID"

# hpx/runtime/actions/component_action.hpp
HPX_DEFINE_COMPONENT_ACTION               "" "HPX_DEFINE_COMPONENT_ACTION"

# hpx/runtime/actions/plain_action.hpp
HPX_PLAIN_ACTION                          "" "HPX_PLAIN_ACTION"
HPX_PLAIN_ACTION_ID                       "" "HPX_PLAIN_ACTION_ID"

# hpx/runtime/components/component_factory.hpp
HPX_REGISTER_COMPONENT                    "" "HPX_REGISTER_COMPONENT"

