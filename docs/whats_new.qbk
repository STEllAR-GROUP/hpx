[/==============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:whats_new What's New]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_1_0_0 __hpx__ V1.0.0]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_0 __hpx__ V0.9.0]

We have had roughly 800 commits since the last release and we have closed
approximately 80 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Significant improvements made to the usability of __hpx__ in large-scale,
  distributed environments.
* Renamed [classref hpx::lcos::packaged_task]`<>` to [classref hpx::lcos::packaged_action]`<>` to
  reflect the semantic differences to a packaged_task as defined by the C++11
  standard.
* __hpx__ now exposes [classref hpx::thread] which is compliant to the C++11 std::thread
  type except that it (purely locally) represents an __hpx__ thread. This new type
  does not expose any of the remote capabilities of the underlying __hpx__-thread
  implementation.
* The type [classref hpx::lcos::future]`<>` is now compliant to the C++11 std::future<>
  type. This type can be used to synchronize both, local and remote operations.
  In both cases the control flow will 'return' to the future in order to
  trigger any continuation.
* The types [classref hpx::lcos::local::promise]`<>` and [classref hpx::lcos::local::packaged_task]`<>`
  are now compliant to the C++11 `std::promise<>`  and `std::packaged_task<>` types.
  These can be used to create a future representing local work only. Use the
  types [classref hpx::lcos::promise]`<>` and [classref hpx::lcos::packaged_action]`<>` to wrap any
  (possibly remote) action into a future.
* [classref hpx::thread] and [classref hpx::lcos::future]`<>` are now cancelable.
* Added support for sequential and logic composition of [classref hpx::lcos::future]`<>`'s.
  The member function [memberref hpx::lcos::future::when]`()` allows to sequentially
  compose futures, while the helper functions [funcref hpx::wait_all], [funcref hpx::wait_any],
  and [funcref hpx::wait_n] can be used to wait for more than one future at a time.
* __hpx__ now exposes [funcref hpx::apply]`()` and [funcref hpx::async]`()` as the preferred way of
  creating (or invoking) any deferred work. These functions are usable with
  various types of functions, function objects, and actions and provide a
  uniform way to spawn deferred tasks.
* __hpx__ now allows to utilize [funcref hpx::util::bind] to (partially) bind no only
  local functions and function objects, but also actions. Remote bound actions
  can have placeholders as well.
* __hpx__ continuations are now fully polymorphic. The class
  [classref hpx::actions::forwarding_continuation] is an example of how the user can
  write is own types of continuations. It can be used to execute any function
  as an continuation of a particular action.
* Reworked the action invocation API to be fully conformant to normal functions.
  Actions can now be invoked using [funcref hpx::apply]`()`, [funcref hpx::async]`()`, or using the
  `operator()` implemented on actions. Actions themselves can now be cheaply
  instantiated as they do not have any members anymore.
* Reworked the lazy action invocation API. Actions can now be directly bound
  using [funcref hpx::util::bind]`()` by passing an action instance as the first argument.
* A minimal __hpx__ program now looks like this:
``
      #include <hpx/hpx_init.hpp>

      int hpx_main()
      {
          return hpx::finalize();
      }

      int main()
      {
          return hpx::init();
      }
``
  This removes the immediate dependency on the __boost_program_options__ library.

[note This minimal version of an __hpx__ program does not support any of the
      default command line arguments (such as --help, or command line options
      related to PBS). It is suggested to always pass `argc` and `argv` to
      __hpx__ as shown in the example below.]

* In order to support those, but still not to depend on __boost_program_options__,
  the minimal program can be written as:
``
      #include <hpx/hpx_init.hpp>

      // The arguments for hpx_main can be left off, which very similar to the
      // behavior of `main()` as defined by C++.
      int hpx_main(int argc, char* argv[])
      {
          return hpx::finalize();
      }

      int main(int argc, char* argv[])
      {
          return hpx::init(argc, argv);
      }
``
* Added performance counters exposing the number of component instances which
  are alive on a given locality.
* Added performance counters exposing then number of messages sent and received,
  the number of parcels sent and received, the number of bytes sent and
  received, the overall time required to send and receive data, and the overall
  time required to serialize and deserialize the data.
* Added a new component: [classref hpx::components::binpacking_factory] which is equivalent to the existing
  [classref hpx::components::distributing_factory] component, except that it equalizes the overall
  population of the components to create. It exposes two factory methods, one
  based on the number of existing instances of the component type to create,
  and one based on an arbitrary performance counter which will be queried for
  all relevant localities.
* Added API functions allowing to access elements of the diagnostic information
  embedded in the given exception: [funcref hpx::get_locality_id]`()`, [funcref hpx::get_host_name]`()`,
  [funcref hpx::get_process_id]`()`, [funcref hpx::get_function_name]`()`, [funcref hpx::get_file_name]`()`,
  [funcref hpx::get_line_number]`()`, [funcref hpx::get_os_thread]`()`, [funcref hpx::get_thread_id]`()`, and
  [funcref hpx::get_thread_description]`()`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* #71  - GIDs that are not serialized via `handle_gid<>` should raise an exception
* #105 - Allow for [classref hpx::util::function]s to be registered in the AGAS symbolic
         namespace
* #107 - Nasty threadmanger race condition (reproducible in sheneos_test)
* #108 - Add millisecond resolution to __hpx__ logs on Linux
* #110 - Shutdown hang in distributed with release build
* #116 - Don't use TSS for the applier and runtime pointers
* #162 - Move local synchronous execution shortcut from hpx::function to the
         applier
* #172 - Cache sources in CMake and check if they change manually
* #178 - Add an INI option to turn off ranged-based AGAS caching
* #187 - Support for disabling performance counter deployment
* #202 - Support for sending performance counter data to a specific file
* #218 - boost.coroutines allows different stack sizes, but stack pool is
         unaware of this
* #231 - Implement movable `boost::bind`
* #232 - Implement movable `boost::function`
* #236 - Allow binding [classref hpx::util::function] to actions
* #239 - Replace [^hpx::function] with [classref hpx::util::function]
* #240 - Can't specify RemoteResult with lcos::async
* #242 - REGISTER_TEMPLATE support for plain actions
* #243 - `handle_gid<>` support for [classref hpx::util::function]
* #245 - `*_c_cache code` throws an exception if the queried GID is not in the
         local cache
* #246 - Undefined references in dataflow/adaptive1d example
* #252 - Problems configuring sheneos with CMake
* #254 - Lifetime of components doesn't end when client goes out of scope
* #259 - CMake does not detect that MSVC10 has lambdas
* #260 - io_service_pool segfault
* #261 - Late parcel executed outside of pxthread
* #263 - Cannot select allocator with CMake
* #264 - Fix allocator select
* #267 - Runtime error for hello_world
* #269 - pthread_affinity_np test fails to compile
* #270 - Compiler noise due to -Wcast-qual
* #275 - Problem with configuration tests/include paths on Gentoo
* #325 - Sheneos is 200-400 times slower than the fortran equivalent
* #331 - [funcref hpx::init]`()` and hpx_main() should not depend on program_options
* #333 - Add doxygen support to CMake for doc toolchain
* #340 - Performance counters for parcels
* #346 - Component loading error when running hello_world in distributed on
         MSVC2010
* #362 - Missing initializer error
* #363 - Parcel port serialization error
* #366 - Parcel buffering leads to types incompatible exception
* #368 - Scalable alternative to rand() needed for __hpx__
* #369 - IB over IP is substantially slower than just using standard TCP/IP
* #374 - [funcref hpx::lcos::wait] should work with dataflows and arbitrary classes
         meeting the future interface
* #375 - Conflicting/ambiguous overloads of [funcref hpx::lcos::wait]
* #376 - Find_HPX.cmake should set CMake variable HPX_FOUND for out of tree builds
* #377 - ShenEOS interpolate bulk and interpolate_one_bulk are broken
* #379 - Add support for distributed runs under SLURM
* #382 - _Unwind_Word not declared in boost.backtrace
* #387 - Doxygen should look only at list of specified files
* #388 - Running `make install` on an out-of-tree application is broken
* #391 - Out-of-tree application segfaults when running in qsub
* #392 - Remove HPX_NO_INSTALL option from cmake build system
* #396 - Pragma related warnings when compiling with older gcc versions
* #399 - Out of tree component build problems
* #400 - Out of source builds on Windows: linker should not receive compiler flags
* #401 - Out of source builds on Windows: components need to be linked with
         hpx_serialization
* #404 - gfortran fails to link automatically when fortran files are present
* #405 - Inability to specify linking order for external libraries
* #406 - Adapt action limits such that dataflow applications work without additional defines
* #415 - `locality_results` is not a member of `hpx::components::server`
* #425 - Breaking changes to `traits::*result` wrt `std::vector<id_type>`
* #426 - AUTOGLOB needs to be updated to support fortran

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_8_1 __hpx__ V0.8.1]

This is a point release including important bug fixes for __0_8_0__.

[heading General Changes]

* __hpx__ does not need to be installed anymore to be functional.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this point release:

* #295 - Don't require install path to be known at compile time.
* #371 - Add hpx iostreams to standard build.
* #384 - Fix compilation with GCC 4.7.
* #390 - Remove keep_factory_alive startup call from ShenEOS; add shutdown call
         to H5close.
* #393 - Thread affinity control is broken.

[heading Bug Fixes (Commits)]

Here is a list of the important commits included in this point release:

* r7642 - External: Fix backtrace memory violation.
* r7775 - Components: Fix symbol visibility bug with component startup
          providers. This prevents one components providers from overriding
          another components.
* r7778 - Components: Fix startup/shutdown provider shadowing issues.

[endsect]

[/Proofread by:]
[/Adrian Serio 3-13-12]
[/Phillip LeBlanc 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_8_0 __hpx__ V0.8.0]

We have had roughly 1000 commits since the last release and we have closed
approximately 70 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Improved PBS support, allowing for arbitrary naming schemes of node-hostnames.
* Finished verification of the reference counting framework.
* Implemented decrement merging logic to optimize the distributed reference
  counting system.
* Restructured the LCO framework. Renamed [^hpx::lcos::eager_future<>] and
  [^hpx::lcos::lazy_future<>] into [classref hpx::lcos::packaged_task]`<>` and
  [classref hpx::lcos::deferred_packaged_task]`<>`. Split
  [classref hpx::lcos::promise]`<>` into [classref hpx::lcos::packaged_task]`<>`
  and [classref hpx::lcos::future]`<>`. Added 'local' futures
  (in namespace [^hpx::lcos::local]).
* Improved the general performance of local and remote action invocations.
  This (under certain circumstances) drastically reduces the number of copies
  created for each of the parameters and return values.
* Reworked the performance counter framework. Performance counters are now
  created only when needed, which reduces the overall resource requirements.
  The new framework allows for much more flexible creation and management
  of performance counters. The new sine example application demonstrates some
  of the capabilities of the new infrastructure.
* Added a buildbot-based continuous build system which gives instant, automated
  feedback on each commit to SVN.
* Added more automated tests to verify proper functioning of __hpx__.
* Started to create documentation for __hpx__ and its API.
* Added documentation toolchain to the build system.
* Added dataflow LCO.
* Changed default __hpx__ command line options to have [^hpx:] prefix. For
  instance, the former option [^--threads] is now [hpx_cmdline [^--hpx:threads]].
  This has been done to make ambiguities with possible application specific
  command line options as unlikely as possible. See the section __commandline__
  for a full list of available options.
* Added the possibility to define command line aliases. The former short
  (one-letter) command line options have been predefined as aliases for
  backwards compatibility. See the section __commandline__ for a detailed
  description of command line option aliasing.
* Network connections are now cached based on the connected host. The number of
  simultaneous connections to a particular host is now limited. Parcels are
  buffered and bundled if all connections are in use.
* Added more refined thread affinity control. This is based on the external
  library __hwloc__.
* Improved support for Windows builds with CMake.
* Added support for components to register their own command line options.
* Added the possibility to register custom startup/shutdown functions for
  any component. These functions are guaranteed to be executed by an __hpx__
  thread.
* Added two new experimental thread schedulers: hierarchy_scheduler and
  periodic_priority_scheduler. These can be activated by using the command line
  options [hpx_cmdline [^--hpx:queueing=hierarchy]] or
  [hpx_cmdline [^--hpx:queueing=periodic]].

[heading Example Applications]

* [@http://www.graph500.org/ Graph500 performance benchmark] (thanks to Matthew
  Anderson for contributing this application).
* [@http://www.nersc.gov/research-and-development/benchmarking-and-workload-characterization/nersc-6-benchmarks/gtc/ GTC (Gyrokinetic Toroidal Code)]:
  a skeleton for particle in cell type codes.
* Random Memory Access: an example demonstrating random memory accesses in a
  large array
* [@http://stellarcollapse.org/equationofstate ShenEOS example], demonstrating
  partitioning of large read-only data structures and exposing an interpolation
  API.
* Sine performance counter demo.
* Accumulator examples demonstrating how to write and use __hpx__ components.
* Quickstart examples (like hello_world, fibonacci, quicksort, factorial, etc.)
  demonstrating simple __hpx__ concepts which introduce some of the concepts in
  __hpx__.
* Load balancing and work stealing demos.

[heading API Changes]

* Moved all local LCOs into a separate namespace `hpx::lcos::local` (for
  instance, `hpx::lcos::local_mutex` is now [classref hpx::lcos::local::mutex]).
* Replaced `hpx::actions::function` with [classref hpx::util::function]. Cleaned
  up related code.
* Removed `hpx::traits::handle_gid` and moved handling of global reference
  counts into the corresponding serialization code.
* Changed terminology: `prefix` is now called `locality_id`, renamed the
  corresponding API functions (such as `hpx::get_prefix`, which is now called
  `hpx::get_locality_id`).
* Adding [funcref hpx::find_remote_localities]`()`,
  and [funcref hpx::get_num_localities]`()`.
* Changed performance counter naming scheme to make it more bash friendly.
  The new performance counter naming scheme is now

[teletype]
``
    /object{parentname#parentindex/instance#index}/counter#parameters
``
[c++]

* Added `hpx::get_worker_thread_num` replacing `hpx::threadmanager_base::get_thread_num`.
* Renamed `hpx::get_num_os_threads` to `hpx::get_os_threads_count`.
* Added `hpx::threads::get_thread_count`.
* Restructured the Futures sub-system, renaming types in accordance with the
  terminology used by the C++11 ISO standard.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

*  #31 - Specialize handle_gid<> for examples and tests
*  #72 - Fix AGAS reference counting
* #104 - heartbeat throws an exception when decrefing the performance counter it's watching
* #111 - throttle causes an exception on the target application
* #142 - One failed component loading causes an unrelated component to fail
* #165 - Remote exception propagation bug in AGAS reference counting test
* #186 - Test credit exhaustion/splitting (e.g. prepare_gid and symbol NS)
* #188 - Implement remaining AGAS reference counting test cases
* #258 - No type checking of GIDs in stubs classes
* #271 - Seg fault/shared pointer assertion in distributed code
* #281 - CMake options need descriptive text
* #283 - AGAS caching broken (gva_cache needs to be rewritten with ICL)
* #285 - HPX_INSTALL root directory not the same as CMAKE_INSTALL_PREFIX
* #286 - New segfault in dataflow applications
* #289 - Exceptions should only be logged if not handled
* #290 - c++11 tests failure
* #293 - Build target for component libraries
* #296 - Compilation error with Boost V1.49rc1
* #298 - Illegal instructions on termination
* #299 - gravity aborts with multiple threads
* #301 - Build error with Boost trunk
* #303 - Logging assertion failure in distributed runs
* #304 - Exception 'what' strings are lost when exceptions from decode_parcel are reported
* #306 - Performance counter user interface issues
* #307 - Logging exception in distributed runs
* #308 - Logging deadlocks in distributed
* #309 - Reference counting test failures and exceptions
* #311 - Merge AGAS remote_interface with the runtime_support object
* #314 - Object tracking for id_types
* #315 - Remove handle_gid and handle credit splitting in id_type serialization
* #320 - applier::get_locality_id() should return an error value (or throw an exception)
* #321 - Optimization for id_types which are never split should be restored
* #322 - Command line processing ignored with Boost 1.47.0
* #323 - Credit exhaustion causes object to stay alive
* #324 - Duplicate exception messages
* #326 - Integrate Quickbook with CMake
* #329 - --help and --version should still work
* #330 - Create pkg-config files
* #337 - Improve usability of performance counter timestamps
* #338 - Non-std exceptions deriving from std::exceptions in tfunc may be sliced
* #339 - Decrease the number of send_pending_parcels threads
* #343 - Dynamically setting the stack size doesn't work
* #351 - 'make install' does not update documents
* #353 - Disable FIXMEs in the docs by default; add a doc developer CMake option to enable FIXMEs
* #355 - 'make' doesn't do anything after correct configuration
* #356 - Don't use hpx::util::static_ in topology code
* #359 - Infinite recursion in hpx::tuple serialization
* #361 - Add compile time option to disable logging completely
* #364 - Installation seriously broken in r7443

[endsect]

[/Proofread by:]
[/Adrian Serio 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_7_0 __hpx__ V0.7.0]

We have had roughly 1000 commits since the last release and we have closed
approximately 120 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Completely removed code related to deprecated AGAS V1, started to work on
  AGAS V2.1.
* Started to clean up and streamline the exposed APIs (see 'API changes' below
  for more details).
* Revamped and unified performance counter framework, added a lot of new
  performance counter instances for monitoring of a diverse set of internal
  __hpx__ parameters (queue lengths, access statistics, etc.).
* Improved general error handling and logging support.
* Fixed several race conditions, improved overall stability, decreased memory
  footprint, improved overall performance (major optimizations include native
  TLS support and ranged-based AGAS caching).
* Added support for running __hpx__ applications with PBS.
* Many updates to the build system, added support for gcc 4.5.x and 4.6.x,
  added C++11 support.
* Many updates to default command line options.
* Added many tests, set up buildbot for continuous integration testing.
* Better shutdown handling of distributed applications.

[heading Example Applications]

* quickstart/factorial and quickstart/fibonacci, future-recursive parallel
  algorithms.
* quickstart/hello_world, distributed hello world example.
* quickstart/rma, simple remote memory access example
* quickstart/quicksort, parallel quicksort implementation.
* gtc, gyrokinetic torodial code.
* bfs, breadth-first-search, example code for a graph application.
* sheneos, partitioning of large data sets.
* accumulator, simple component example.
* balancing/os_thread_num, balancing/px_thread_phase, examples demonstrating
  load balancing and work stealing.

[heading API Changes]

* Added `hpx::find_all_localities`.
* Added `hpx::terminate` for non-graceful termination of applications.
* Added `hpx::lcos::async` functions for simpler asynchronous programming.
* Added new AGAS interface for handling of symbolic namespace (`hpx::agas::*`).
* Renamed `hpx::components::wait` to `hpx::lcos::wait`.
* Renamed `hpx::lcos::future_value` to `hpx::lcos::promise`.
* Renamed `hpx::lcos::recursive_mutex` to `hpx::lcos::local_recursive_mutex`,
  `hpx::lcos::mutex` to `hpx::lcos::local_mutex`
* Removed support for Boost versions older than V1.38, recommended Boost version
  is now V1.47 and newer.
* Removed `hpx::process` (this will be replaced by a real process implementation
  in the future).
* Removed non-functional LCO code (`hpx::lcos::dataflow`, `hpx::lcos::thunk`,
  `hpx::lcos::dataflow_variable`).
* Removed deprecated `hpx::naming::full_address`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

*  #28 - Integrate Windows/Linux CMake code for __hpx__ core
*  #32 - hpx::cout() should be hpx::cout
*  #33 - AGAS V2 legacy client does not properly handle error_code
*  #60 - AGAS: allow for registerid to optionally take ownership of the gid
*  #62 - adaptive1d compilation failure in Fusion
*  #64 - Parcel subsystem doesn't resolve domain names
*  #83 - No error handling if no console is available
*  #84 - No error handling if a hosted locality is treated as the bootstrap server
*  #90 - Add general commandline option -N
*  #91 - Add possibility to read command line arguments from file
*  #92 - Always log exceptions/errors to the log file
*  #93 - Log the command line/program name
*  #95 - Support for distributed launches
*  #97 - Attempt to create a bad component type in AMR examples
* #100 - factorial and factorial_get examples trigger AGAS component type assertions
* #101 - Segfault when hpx::process::here() is called in fibonacci2
* #102 - unknown_component_address in int_object_semaphore_client
* #114 - marduk raises assertion with default parameters
* #115 - Logging messages for SMP runs (on the console) shouldn't be buffered
* #119 - marduk linking strategy breaks other applications
* #121 - pbsdsh problem
* #123 - marduk, dataflow and adaptive1d fail to build
* #124 - Lower default preprocessing arity
* #125 - Move hpx::detail::diagnostic_information out of the detail namespace
* #126 - Test definitions for AGAS reference counting
* #128 - Add averaging performance counter
* #129 - Error with endian.hpp while building adaptive1d
* #130 - Bad initialization of performance counters
* #131 - Add global startup/shutdown functions to component modules
* #132 - Avoid using auto_ptr
* #133 - On Windows hpx.dll doesn't get installed
* #134 - HPX_LIBRARY does not reflect real library name (on Windows)
* #135 - Add detection of unique_ptr to build system
* #137 - Add command line option allowing to repeatedly evaluate performance counters
* #139 - Logging is broken
* #140 - CMake problem on windows
* #141 - Move all non-component libraries into $PREFIX/lib/hpx
* #143 - adaptive1d throws an exception with the default command line options
* #146 - Early exception handling is broken
* #147 - Sheneos doesn't link on Linux
* #149 - sheneos_test hangs
* #154 - Compilation fails for r5661
* #155 - Sine performance counters example chokes on chrono headers
* #156 - Add build type to --version
* #157 - Extend AGAS caching to store gid ranges
* #158 - r5691 doesn't compile
* #160 - Re-add AGAS function for resolving a locality to its prefix
* #168 - Managed components should be able to access their own GID
* #169 - Rewrite AGAS future pool
* #179 - Complete switch to request class for AGAS server interface
* #182 - Sine performance counter is loaded by other examples
* #185 - Write tests for symbol namespace reference counting
* #191 - Assignment of read-only variable in point_geometry
* #200 - Seg faults when querying performance counters
* #204 - --ifnames and suffix stripping needs to be more generic
* #205 - --list-* and --print-counter-* options do not work together and produce no warning
* #207 - Implement decrement entry merging
* #208 - Replace the spinlocks in AGAS with hpx::lcos::local_mutexes
* #210 - Add an --ifprefix option
* #214 - Performance test for PX-thread creation
* #216 - VS2010 compilation
* #222 - r6045 context_linux_x86.hpp
* #223 - fibonacci hangs when changing the state of an active thread
* #225 - Active threads end up in the FEB wait queue
* #226 - VS Build Error for Accumulator Client
* #228 - Move all traits into namespace hpx::traits
* #229 - Invalid initialization of reference in thread_init_data
* #235 - Invalid GID in iostreams
* #238 - Demangle type names for the default implementation of get_action_name
* #241 - C++11 support breaks GCC 4.5
* #247 - Reference to temporary with GCC 4.4
* #248 - Seg fault at shutdown with GCC 4.4
* #253 - Default component action registration kills compiler
* #272 - G++ unrecognized command line option
* #273 - quicksort example doesn't compile
* #277 - Invalid CMake logic for Windows

[endsect]

[endsect] [/ What's New]

[/Proofread by:]
[/Adrian Serio 3-13-12]

