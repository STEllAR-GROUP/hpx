# Copyright (c) 2015 Hartmut Kaiser
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

Namespce AGAS

API Component:		Comments:
example_function	this does bla...
example_class		this class belongs in **** namespace...
			I love this class...
example_module		bla bla bla....

hpx::agas::addressing_service
    gva_cache_key
        gva_cache_key()
        gva_cache_key(naming::gid_type const&,boost::uint64_t count_ = 1)
        naming::gid_type get_gid() const
        boost::uint64_t get_count() const
        operators: <, ==
    gva_erase_policy
        gva_erase_policy(naming::gid_type const&,boost::uint64_t count)
        bool operator()(entry_type const& p) const
    gva_cache_key entry;
    mutable mutex_type gva_cache_mtx_;
    mutable mutex_type console_cache_mtx_;
    gva_cache_type gva_cache_;
    boost::uint32_t console_cache_;
    std::size_t const max_refcnt_requests_;
    mutex_type refcnt_requests_mtx_;
    std::size_t refcnt_requests_count_;
    boost::shared_ptr<refcnt_requests_type> refcnt_requests_;
    service_mode const service_type;
    runtime_mode const runtime_type;
    bool const caching_;
    bool const range_caching_;
    threads::thread_priority const action_priority_;
    naming::locality here_;
    boost::uint64_t rts_lva_;
    boost::shared_ptr<bootstrap_data_type> bootstrap;
    boost::shared_ptr<hosted_data_type> hosted;
    atomic_state state_;
    naming::gid_type locality_;
    naming::address primary_ns_addr_;
    naming::address component_ns_addr_;
    naming::address symbol_ns_addr_;
    addressing_service(parcelset::parcelport&,
         util::runtime_configuration const&,runtime_mode)
    void launch_bootstrap(parcelset::parcelport&,util::runtime_configuration const&)
    void launch_hosted(parcelset::parcelport&,util::runtime_configuration const&)
    state status() const
    void status(state new_state)
    naming::gid_type const& local_locality() const
    void local_locality(naming::gid_type const& g)
    bool is_bootstrap() const
    bool is_console() const
    // Performance counter types
    void register_counter_types();
    // note: **throws is shorthand for "error_code& ec = throws"
    void garbage_collect_non_blocking(**throws)
    void garbage_collect(**throws)
    response service(request const&,**throws)
    std::vector<response> bulk_service(std::vector<request> const&,**throws)
    bool register_locality(naming::locality const&,naming::gid_type&,**throws)
    // Resolve a locality to its prefix
    boost::uint32_t resolve_locality(naming::locality const&,**throws)
    // lots of params documented that aren't present
    bool get_console_locality(naming::gid_type&,error_code& ec = throw)
    // type refers to component type. what are the types?
    bool get_localities
        (std::vector<naming::gid_type>&,components::component_type,**throws)
    bool get_localities(std::vector<naming::gid_type>&,**throws)
    components::component_type get_component_id(std::string const& name,**throws)
    void iterate_types(iterate_types_function_type const&,**throws)
    // factory for components by type
    components::component_type register_factory(naming::gid_type const& locality_id,
        std::string const& name,**throws)
    components::component_type register_factory(boost::uint32_t locality_id,
        std::string const& name,**throws)
    /// \brief Get unique range of freely assignable global ids.
    bool get_id_range(naming::locality const&,boost::uint64_t count,
        naming::gid_type& lower_bound,naming::gid_type& upper_bound,**throws)
    /// \brief Bind a global address to a local address.
    bool bind(naming::gid_type const&,naming::address const&,**throws)
    bool bind_range(naming::gid_type const& lower_id,boost::uint64_t count,
        naming::address const&,boost::uint64_t offset,**throws)
    bool unbind(naming::gid_type const&,**throws)
    bool unbind(naming::gid_type const&,naming::address&,**throws)
    bool unbind_range(naming::gid_type const& lower_id,boost::uint64_t count,**throws)
    bool unbind_range(naming::gid_type const& lower_id,
        boost::uint64_t countnaming::address& addr,**throws)

    bool is_local_address(naming::gid_type const&,**throws)
    bool is_local_address(naming::gid_type const&,naming::address& addr,**throws)
    bool is_local_address_cached(naming::gid_type const&,**throws)
    bool is_local_address_cached(naming::gid_type const&,naming::address&,**throws)
    bool is_local_lva_encoded_address(naming::gid_type const&)

    bool resolve(naming::gid_type const&,naming::address&,**throws)
    bool resolve(naming::id_type const&,naming::address&,**throws)
    bool resolve_full(naming::gid_type const&,naming::address&,**throws)
    bool resolve_full(naming::id_type const&,naming::address&,**throws)
    bool resolve_cached(naming::gid_type const&,naming::address&,**throws)

    void incref(naming::gid_type const& lower,naming::gid_type const& upper,
    boost::int64_t credits = 1,**throws)
    void incref(naming::gid_type const& id,boost::int64_t credits = 1,**throws)
    void decref(naming::gid_type const& lower,
    naming::gid_type const& upper,boost::int64_t credits = 1,**throws)
    void decref(naming::gid_type const& id,boost::int64_t credits = 1,**throws)
    bool iterate_ids(iterate_names_function_type const&,**throws)
    bool register_name(std::string const& name,naming::gid_type const&,**throws)
    bool unregister_name(std::string const& name,**throws)
    bool unregister_name(std::string const& name,naming::gid_type&,**throws)
    bool resolve_name(std::string const& name,naming::gid_type&,**throws)
    lcos::future<naming::id_type, response> resolve_name_async(std::string const& name)
    void update_cache(naming::gid_type const&,gva const&,**throws)
    bool route_parcel(parcelset::parcel const&,**throws)


hpx::agas::big_boot_barrier
    big_boot_barrier
        (parcelset::parcelport&,util::runtime_configuration const&,runtime_mode)
    void apply(boost::uint32_t prefix,naming::address const&,actions::base_action*)
    void wait()
    void trigger()
    void add_thunk(HPX_STD_FUNCTION<void()>* f)
void create_big_boot_barrier(parcelset::parcelport&,util::runtime_configuration const&,
    runtime_mode)
void destroy_big_boot_barrier()
big_boot_barrier& get_big_boot_barrier()

hpx::agas::component_namespace
    component_namespace()
    explicit component_namespace(naming::id_type const& id)
    void service[_non_blocking](request const&,threads::thread_priority priority =
      default,**throws)
    std::vector<response> bulk_service[_non_blocking](std::vector<request> const&,
        threads::thread_priority priority = default,**throws)

hpx::agas::gva
    gva()
    gva(naming::locality const&,component_type t =
     components::component_invalid, boost::uint64_t c =
     1,lva_type a = 0, boost::uint64_t o = 0)
    gva(naming::locality const& ep, component_type t,
     boost::uint64_t c, void* a,boost::uint64_t o = 0)
    gva(lva_type a)
    gva(void* a)
    gva& operator=(lva_type a)
    gva& operator=(void* a)
    gva& operator=(gva const& other)
    bool operator==(gva const& rhs) const
    bool operator!=(gva const& rhs) const
    void lva(lva_type a)
    void lva(void* a)
    lva_type lva(naming::gid_type const& gid
         = naming::invalid_gid,naming::gid_type const& gidbase
           = naming::invalid_gid) const
    gva resolve(naming::gid_type const& gid,naming::gid_type const& gidbase) const
    naming::locality endpoint;
    component_type type;
    boost::uint64_t count;
    boost::uint64_t offset;
operator<< (std::basic_ostream<Char, Traits>& os, gva const& addr)

hpx::agas
    bool register_name(std::string const&,naming::id_type const&,**throws)
    lcos::future<bool, response> register_name_async(std::string const&,
        naming::id_type const&)
    bool unregister_name(std::string const& name,**throws)
    bool unregister_name(std::string const&,naming::id_type&,**throws)
    lcos::future<naming::id_type, response> unregister_name_async(std::string const&)
    bool resolve_name(std::string const&,naming::id_type&,**throws)
    bool resolve_name(std::string const&,naming::gid_type&,**throws)
    bool is_local_address(naming::gid_type const&,**throws)
    bool is_local_address(naming::gid_type const&,naming::address&,**throws)
    bool is_local_address(naming::id_type const&,**throws)
    bool is_local_address(naming::id_type const&,naming::address&,**throws)
    bool is_local_address_cached(naming::gid_type const&,**throws)
    bool is_local_address_cached(naming::gid_type const&,naming::address&,**throws)
    bool is_local_address_cached(naming::id_type const&,**throws)
    bool is_local_address_cached(naming::id_type const&,naming::address&,**throws)
        obool is_local_lva_encoded_address(naming::gid_type const&)
    bool is_local_lva_encoded_address(naming::id_type const&)
    void garbage_collect[_non_blocking](**throws)
    void garbage_collect[_non_blocking](naming::id_type const&,**throws)
    naming::id_type get_console_locality(**throws)

hpx::agas::namespace_action_code => big enum

hpx::agas::primary_namespace
    primary_namespace()
    explicit primary_namespace(naming::id_type const& id)
    response service(request const&,threads::thread_priority priority = default,**throws)
    void service_non_blocking(request const&,threads::thread_priority priority = default)
    std::vector<response>
        bulk_service[_non_blocking](std::vector<request> const&,
        threads::thread_priority priority = default,**throws)
    bool route
        (parcelset::parcel const,threads::thread_priority priority = default,**throws)

hpx::agas::request
    request()
    request(namespace_action_code,naming::gid_type const& lower_,
        naming::gid_type const& upper_,boost::int64_t count_)
    request(namespace_action_code,naming::gid_type const&,boost::uint64_t count_)
    // Should this be here?
    request(namespace_action_code,naming::gid_type const&,gva const&)
    request(namespace_action_code,naming::gid_type const&)
    request(namespace_action_code,naming::locality const&,boost::uint64_t count_)
    request(namespace_action_code,naming::locality const&)
    request(namespace_action_code,components::component_type)
    request(namespace_action_code,boost::int32_t ctype_)
    request(namespace_action_code,std::string const& name_,boost::uint32_t prefix_)
    request(namespace_action_code,std::string const& name_,naming::gid_type const&)
    request(namespace_action_code,std::string const& name_)
    request(namespace_action_code,iterate_names_function_type const&)
    request(namespace_action_code,iterate_types_function_type const&)
    request(namespace_action_code)
    request(request const&)
    operator: =
    gva get_gva(**throws)
    boost::uint64_t get_count(**throws) const
    boost::int64_t get_credit(**throws) const
    boost::int32_t get_component_type(**throws) const
    boost::uint32_t get_locality_id(**throws) const
    iterate_names_function_type get_iterate_names_function(**throws) const
    iterate_types_function_type get_iterate_types_function(**throws) const
    naming::locality get_locality(**throws) const
    naming::gid_type get_gid(**throws) const
    naming::gid_type get_lower_bound(**throws) const
    naming::gid_type get_upper_bound(**throws) const
    std::string get_name(**throws) const
    namespace_action_code get_action_code() const

hpx::agas::response
    response()
    // should error_status = success be **throws?
    response(namespace_action_code,
        naming::gid_type lower_,
        naming::gid_type upper_,boost::uint32_t prefix_,error status_ = success)
    response(namespace_action_code,
        naming::gid_type const&,gva const&,error status_ = success)
    response(namespace_action_code,
        gva const& gva_,error status_ = success)
    response(namespace_action_code,
        components::component_type,error status_ = success)
    response(namespace_action_code,
        boost::int32_t ctype_,error status_ = success)
    response(namespace_action_code,
        std::vector<boost::uint32_t> const& prefixes_,error status_ = success)
    response(namespace_action_code,
        naming::gid_type,error status_ = success)
    response(namespace_action_code,
        boost::uint32_t prefix_,error status_ = success)
    explicit response(namespace_action_code,
        error status_ = success)
    response(response const &)
    operator=
    gva get_gva(**throws)
    std::vector<boost::uint32_t> get_localities(**throws)
    boost::int32_t get_component_type(**throws)
    boost::uint32_t get_locality_id(**throws)
    naming::gid_type get_base_gid(**throws)
    naming::gid_type get_gid(**throws)
    naming::gid_type get_lower_bound(**throws)
    naming::gid_type get_upper_bound(**throws)
    namespace_action_code get_action_code() const
    error get_status() const

hpx::agas::traits
    struct get_remote_result<naming::id_type, agas::response>
    struct get_remote_result<bool, agas::response>

hpx::agas::symbol_namespace
    symbol_namespace()
    explicit symbol_namespace(naming::id_type const& id)
    response [block_]service[_non_blocking]
        (request const&,threads::thread_priority priority = default,**throws)
