Namespce HPX

API Component:        Comments:
example_function    this does bla...
example_class        this class belongs in **** namespace...
            I love this class...
example_module        bla bla bla....


class error_code : public boost::system::error_code

class HPX_EXCEPTION_EXPORT exception : public boost::system::system_error

class HPX_EXCEPTION_EXPORT exception_list

class HPX_EXPORT runtime

template <typename SchedulingPolicy, typename NotificationPolicy>
class HPX_EXPORT runtime_impl : public runtime



struct HPX_EXCEPTION_EXPORT bad_alloc : std::bad_alloc

struct HPX_EXCEPTION_EXPORT bad_cast : std::bad_cast

struct HPX_EXCEPTION_EXPORT bad_exception : std::bad_exception

struct HPX_EXCEPTION_EXPORT bad_typeid : std::bad_typeid

template <typename Component>
    struct get_lva

struct HPX_EXCEPTION_EXPORT std_exception : std::exception




enum error

enum logging_destination

enum runtime_mode

enum state

enum throwmode


// hpx/exception.hpp
inline boost::system::error_category const& get_hpx_category();
inline boost::system::error_category const& get_hpx_rethrow_category();
inline boost::system::error_code
    make_system_error_code(error e, throwmode mode = plain);
inline boost::system::error_condition
    make_error_condition(error e, throwmode mode);
inline error_code
    make_error_code(error e, throwmode mode = plain)
inline error_code
    make_error_code(error e, char const* msg, throwmode mode = plain);
inline error_code
    make_error_code(error e, std::string const& msg, throwmode mode = plain);
inline error_code make_success_code(throwmode mode = plain);

// hpx/hpx_fwd.hpp
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Return the global id representing this locality
    HPX_API_EXPORT naming::id_type find_here();

    /// \brief Return the list of locality ids of the localities supporting the
    ///        given component type. By default this function will return the
    ///        list of all localities.
    HPX_API_EXPORT std::vector<naming::id_type> find_all_localities();
    HPX_API_EXPORT std::vector<naming::id_type> find_all_localities(
        components::component_type);
    HPX_API_EXPORT naming::id_type find_locality(components::component_type);

    /// \brief Return the list of locality ids of remote localities supporting
    ///        the given component type. By default this function will return
    ///        the list of all remote localities (all but the current locality).
    HPX_API_EXPORT std::vector<naming::id_type> find_remote_localities();
    HPX_API_EXPORT std::vector<naming::id_type> find_remote_localities(
        components::component_type);

    /// \brief Return the number of localities which are currently registered
    ///        for the running application.
    HPX_API_EXPORT boost::uint32_t get_num_localities();
    HPX_API_EXPORT boost::uint32_t get_num_localities(components::component_type);

    HPX_API_EXPORT naming::gid_type get_next_id();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Return the number of OS-threads running in the runtime instance
    ///        the current HPX-thread is associated with.
    HPX_API_EXPORT std::size_t get_os_thread_count();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Return the number of the current OS-thread running in the
    ///        runtime instance the current HPX-thread is associated with.
    ///
    /// \note   The returned value is zero based and its maximum value is
    ///         smaller than the overall number of OS-threads executed (as
    ///         returned by \a get_os_thread_count().
    /// \note   This function needs to be executed on a HPX-thread. It will
    ///         fail otherwise (it will return -1).
    HPX_API_EXPORT std::size_t get_worker_thread_num();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Return the number of the locality this function is being called
    ///        from.
    HPX_API_EXPORT boost::uint32_t get_locality_id();


// hpx/hpx_init.hpp
    ///////////////////////////////////////////////////////////////////////////
    /// This is the main entry point for any HPX application. This function
    /// (or one of its overloads below) should be called from the users main()
    /// function. It will set up the HPX runtime environment and schedule the
    /// function given by \p f as a HPX thread.
    ///
    /// \param f            [in] The function to be scheduled as an HPX
    ///                     thread. Usually this function represents the main
    ///                     entry point of any HPX application.
    /// \param desc_cmdline [in] This parameter may hold the description of
    ///                     additional command line arguments understood by the
    ///                     application. These options will be prepended to
    ///                     the default command line options understood by
    ///                     \a hpx::init (see description below).
    /// \param argc         [in] The number of command line arguments passed
    ///                     in \p argv. This is usually the unchanged value as
    ///                     passed by the operating system (to main()).
    /// \param argv         [in] The command line arguments for this
    ///                     application, usually that is the value as passed
    ///                     by the operating system (to main()).
    /// \param cfg          A list of configuration settings which will be added
    ///                     to the system configuration before the runtime
    ///                     instance is run. Each of the entries in this list
    ///                     must have the format of a fully defined key/value
    ///                     pair from an ini-file (for instance
    ///                     'hpx.component.enabled=1')
    /// \param startup_function [in] A function to be executed inside a HPX
    ///                     thread before \p f is called. If this parameter
    ///                     is not given no function will be executed.
    /// \param shutdown_function [in] A function to be executed inside an HPX
    ///                     thread while hpx::finalize is executed. If this
    ///                     parameter is not given no function will be
    ///                     executed.
    /// \param mode         [in] The mode the created runtime environment
    ///                     should be initialized in. There has to be exactly
    ///                     one locality in each HPX application which is
    ///                     executed in console mode (\a hpx::runtime_mode_console),
    ///                     all other localities have to be run in worker mode
    ///                     (\a hpx::runtime_mode_worker). Normally this is
    ///                     set up automatically, but sometimes it is necessary
    ///                     to explicitly specify the mode.
    ///
    /// \returns            The function returns the value, which has been
    ///                     returned from the user supplied \p f.
    ///
    /// \note               If the parameter \p mode is not given (defaulted),
    ///                     the created runtime system instance will be
    ///                     executed in console or worker mode depending on the
    ///                     command line arguments passed in argc/argv.
    ///                     Otherwise it will be executed as specified by the
    ///                     parameter\p mode.
    int init(int (*f)(boost::program_options::variables_map& vm),
        boost::program_options::options_description& desc_cmdline,
        int argc, char* argv[], std::vector<std::string> cfg,
        HPX_STD_FUNCTION<void()> startup = HPX_STD_FUNCTION<void()>(),
        HPX_STD_FUNCTION<void()> shutdown = HPX_STD_FUNCTION<void()>(),
        hpx::runtime_mode mode = hpx::runtime_mode_default);


    ///////////////////////////////////////////////////////////////////////////
    /// This is a simplified main entry point, which can be used to set up the
    /// runtime for an HPX application (the runtime system will be set up in
    /// console mode or worker mode depending on the command line settings).
    ///
    /// \param f            [in] The function to be scheduled as an HPX
    ///                     thread. Usually this function represents the main
    ///                     entry point of any HPX application.
    /// \param app_name     [in] The name of the application.
    /// \param argc         [in] The number of command line arguments passed
    ///                     in \p argv. This is usually the unchanged value as
    ///                     passed by the operating system (to main()).
    /// \param argv         [in] The command line arguments for this
    ///                     application, usually that is the value as passed
    ///                     by the operating system (to main()).
    ///
    /// \returns            The function returns the value, which has been
    ///                     returned from the user supplied \p f.
    ///
    /// \note               The created runtime system instance will be
    ///                     executed in console or worker mode depending on the
    ///                     command line arguments passed in argc/argv.
    int init(int (*f)(boost::program_options::variables_map& vm),
        std::string const& app_name, int argc, char* argv[]);


    ///////////////////////////////////////////////////////////////////////////
    /// The function \a hpx#finalize is the main way to (gracefully) exit any
    /// HPX application. It should be called from one locality only (usually
    /// the console) and it will notify all connected localities to finish
    /// execution. Only after all other localities have exited this function
    /// will return, allowing to exit the console locality as well.
    ///
    /// During the execution of this function the runtime system will invoke
    /// all registered shutdown functions (see \a hpx#init) on all localities.
    ///
    /// \param shutdown_timeout This parameter allows to specify a timeout (in
    ///           microseconds), specifying how long any of the connected
    ///           localities should wait for pending tasks to be executed.
    ///           After this timeout, all suspended PX-threads will be aborted.
    ///           Note, that this function will not abort any running
    ///           PX-threads. In any case the shutdown will not proceed as long
    ///           as there is at least one pending/running PX-thread.
    ///
    ///           The default value (-1.) will try to find a globally set
    ///           timeout value (can be set as the configuration parameter
    ///           "hpx.shutdown_timeout"), and if that is not set or `-1.` as
    ///           well, it will disable any timeout, each connected
    ///           locality will wait for all existing PX-threads to terminate.
    ///
    /// \param localwait This parameter allows to specify a local wait time
    ///           (in microseconds) before the connected localities will be
    ///           notified and the overall shutdown process starts.
    ///
    ///           The default value (-1.) will try to find a globally set
    ///           wait time value (can be set as the configuration parameter
    ///           "hpx.finalize_wait_time"), and if this is not set or `-1.`
    ///           as well, it will disable any addition local wait time before
    ///           proceeding.
    ///
    /// This function will block and wait for all connected localities to exit
    /// before returning to the caller. It should be the last HPX-function
    /// called by any application.
    ///
    /// Using this function is an alternative to \a hpx#disconnect, these
    /// functions do not need to be called both.
    void finalize(double shutdown_timeout = -1.0,
        double localwait = -1.0);

    ///////////////////////////////////////////////////////////////////////////
    /// The function \a hpx#terminate is the non-graceful way to exit any
    /// application immediately. It can be called from any locality and will
    /// terminate all localities currently used by the application.
    void terminate();

    ///////////////////////////////////////////////////////////////////////////
    /// The function \a hpx#disconnect can be used to disconnect a locality
    /// from a running HPX application.
    ///
    /// During the execution of this function the runtime system will invoke
    /// all registered shutdown functions (see \a hpx#init) on this locality.
    //
    /// \param shutdown_timeout This parameter allows to specify a timeout (in
    ///           microseconds), specifying how long this locality should wait
    ///           for pending tasks to be executed. After this timeout, all
    ///           suspended PX-threads will be aborted.
    ///           Note, that this function will not abort any running
    ///           PX-threads. In any case the shutdown will not proceed as long
    ///           as there is at least one pending/running PX-thread.
    ///
    ///           The default value (-1.) will try to find a globally set
    ///           timeout value (can be set as the configuration parameter
    ///           "hpx.shutdown_timeout"), and if that is not set or `-1.` as
    ///           well, it will disable any timeout, each connected
    ///           locality will wait for all existing PX-threads to terminate.
    ///
    /// \param localwait This parameter allows to specify a local wait time
    ///           (in microseconds) before the connected localities will be
    ///           notified and the overall shutdown process starts.
    ///
    ///           The default value (-1.) will try to find a globally set
    ///           wait time value (can be set as the configuration parameter
    ///           "hpx.finalize_wait_time"), and if this is not set or `-1.`
    ///           as well, it will disable any addition local wait time before
    ///           proceeding.
    ///
    /// This function will block and wait for this locality to finish executing
    /// before returning to the caller. It should be the last HPX-function
    /// called by any locality being disconnected.
    ///
    /// Using this function is an alternative to \a hpx#finalize, these
    /// functions do not need to be called both.
    void disconnect(double shutdown_timeout = -1.0,
        double localwait = -1.0);


// hpx/version.hpp
    // Returns the major HPX version.
    HPX_EXPORT boost::uint8_t major_version();

    // Returns the minor HPX version.
    HPX_EXPORT boost::uint8_t minor_version();

    // Returns the sub-minor/patch-level HPX version.
    HPX_EXPORT boost::uint8_t subminor_version();

    // Returns the full HPX version.
    HPX_EXPORT boost::uint32_t full_version();

    // Returns the AGAS subsystem version.
    HPX_EXPORT boost::uint8_t agas_version();

    // Returns the tag.
    HPX_EXPORT std::string tag();

    // Returns the HPX version string.
    HPX_EXPORT std::string build_string();

    // Returns the Boost version string.
    HPX_EXPORT std::string boost_version();

    // Returns the copyright string.
    HPX_EXPORT std::string copyright();

    // Returns the full version string.
    HPX_EXPORT std::string complete_version();

