[/
=============================================================================
    Copyright (C) 2013 Patricia Grubel
    Copyright (C) 2007-2014 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:schedulers __hpx__ Thread Scheduling Policies]

The HPX runtime has five thread scheduling policies: local-priority,
static-priority, local, static and abp-priority. These policies can be specified
from the command line using the command line option [hpx_cmdline
`--hpx:queuing`]. In order to use a particular scheduling policy, the runtime
system must be built with the appropriate scheduler flag turned on (e.g. `cmake
-DHPX_THREAD_SCHEDULERS=local`, see __cmake_options__ for more information).

[heading Priority Local Scheduling Policy (default policy)]

* default or invoke using: [hpx_cmdline `--hpx:queuing=local-priority-fifo`]

The priority local scheduling policy maintains one queue per operating system
(OS) thread. The OS thread pulls its work from this queue. By default the number
of high priority queues is equal to the number of OS threads; the number of
high priority queues can be specified on the command line using
[hpx_cmdline `--hpx:high-priority-threads`]. High priority threads are executed
by any of the OS threads before any other work is executed. When a queue is
empty work will be taken from high priority queues first. There is one low
priority queue from which threads will be scheduled only when there is no other
work.

For this scheduling policy there is an option to turn on NUMA sensitivity using
the command line option  [hpx_cmdline `--hpx:numa-sensitive`]. When NUMA
sensitivity is turned on work stealing is done from queues associated with the
same NUMA domain first, only after that work is stolen from other NUMA domains.

This scheduler is enabled at build time by default and will be available always.

This scheduler can be used with two underlying queuing policies (FIFO:
first-in-first-out, and LIFO: last-in-first-out). The default is FIFO. In order
to use the LIFO policy use the command line option
[hpx_cmdline `--hpx:queuing=local-priority-lifo`].

[heading Static Priority Scheduling Policy]

* invoke using: [hpx_cmdline `--hpx:queuing=static-priority`] (or `-qs`)
* flag to turn on for build: `HPX_THREAD_SCHEDULERS=all` or
  `HPX_THREAD_SCHEDULERS=static-priority`

The static scheduling policy maintains one queue per OS thread from which each
OS thread pulls its tasks (user threads). Threads are distributed in a round
robin fashion. There is no thread stealing in this policy.

[heading Local Scheduling Policy]

* invoke using: [hpx_cmdline `--hpx:queuing=local`] (or `-ql`)
* flag to turn on for build: `HPX_THREAD_SCHEDULERS=all` or
  `HPX_THREAD_SCHEDULERS=local`

The local scheduling policy maintains one queue per OS thread from which each
OS thread pulls its tasks (user threads).

[heading Static Scheduling Policy]

* invoke using: [hpx_cmdline `--hpx:queuing=static`]
* flag to turn on for build: `HPX_THREAD_SCHEDULERS=all` or
  `HPX_THREAD_SCHEDULERS=static`

The static scheduling policy maintains one queue per OS thread from which each
OS thread pulls its tasks (user threads). Threads are distributed in a round
robin fashion. There is no thread stealing in this policy.

[heading Priority ABP Scheduling Policy]

* invoke using: [hpx_cmdline `--hpx:queuing=abp-priority-fifo`]
* flag to turn on for build: `HPX_THREAD_SCHEDULERS=all` or
  `HPX_THREAD_SCHEDULERS=abp-priority`

Priority ABP policy maintains a double ended lock free queue for each OS thread.
By default the number of high priority queues is equal to the number of OS
threads; the number of high priority queues can be specified on the command
line using  [hpx_cmdline `--hpx:high-priority-threads`]. High priority threads
are executed by the first OS threads before any other work is executed. When
a queue is empty work will be taken from high priority queues first. There is
one low priority queue from which threads will be scheduled only when there is
no other work. For this scheduling policy there is an option to turn on NUMA
sensitivity using the command line option [hpx_cmdline `--hpx:numa-sensitive`].
When NUMA sensitivity is turned on work stealing is done from queues associated
with the same NUMA domain first, only after that work is stolen from other NUMA
domains.

This scheduler can be used with two underlying queuing policies (FIFO:
first-in-first-out, and LIFO: last-in-first-out). In order to use the LIFO
policy use the command line option [hpx_cmdline
`--hpx:queuing=abp-priority-lifo`].

[/
    Questions, concerns and notes:

    Are all the work queues FIFO except perhaps the deque ABP?

    What is the low priority thread for priority policies?
    One of the comments says that there are exactly one queue per OS threads
    then an additional number of high-priority-threads queues plus an additional
    low priority queue.

    Is numa-sensitive only for local priority??? I know it says that in the
    documentation and error messages but seems to be available for abp
    priority and periodic priority

    There should be some way of verifying which policy is being used.

    --hpx-high-priority-threads option ********* it seems to me this option
    should be =< number of OS threads but command line accepts any number.
    Okay so I'm confused, in the documentation for command line options it
    states: the number of operating system threads maintaining a high priority
    queue (default: number of OS threads), valid for
    --hpx:queuing=local-priority only examples/spell_check/example_text.txt
    but in hpx_init.cpp the comment states: local scheduler with priority queue
    (one queue for each OS threads plus one separate queue for high priority
    HPX-threads)


    SCHEDULER
    initialization parameters:
    max count per queue (1000) this is for all policies
    number of queues  (OS threads) all except global
    number of high priority queues (selectable on command line  local priority,
    periodic and abp priority policies)
    minimum add thread count (10)  for periodic priority policy the number of
    threads will be incremented in steps of this count


    maximum number of active threads = 1000 is that per queue? I don't understand
    the comment:
    The maximum number of active threads this thread manager should

    // create. This number will be a constraint only as long as the work
    // items queue is not empty. Otherwise the number of active threads
    // will be incremented in steps equal to the \a min_add_new_count
    // specified above.
    enum { max_thread_count = 1000 };

    I see both FIFO and double ended queues in ABP policies?
]

[endsect]


