[/=============================================================================
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:providing Providing Performance Counter Data]

__hpx__ provides several ways to provide your own data as a performance counter.
This has the benefit of exposing additional, possibly application specific
information using the existing Performance Counter framework, unifying the
process of gathering data about your application.

An application that wants to provide counter data can implement a Performance
Counter to provide the data. When a consumer queries performance data, the
__hpx__ runtime system calls the provider to collect the data. The runtime
system uses an internal registry to determine which provider to call.

Generally, there two ways of exposing yur own pPerformance Counter data: a
simple, function based way and a more complex, but more powerful way of
implementing a full Performance Counter. Both alternatives are described in
the following sections.

[section:simple_counters Exposing Performance Counter Data using a Simple Function]

The simplest way to expose arbitrary numeric data is to write a function which
then will be called whenever a consumer queries this counter. Currently, this
type of Performance Counter can only be used to expose integer values. The
expected signature of this function is:

    boost::int64_t some_performance_data();

For instance, here is such a function returning how often it was invoked:

    // The atomic variable 'counter' ensures the thread safety of the counter.
    boost::atomic<boost::int64_t> counter(0);

    boost::int64_t some_performance_data()
    {
        return ++counter;
    }

This example function exposes a linearly increasing value as our performance
data. The value is incrememnted on each invocation, e.g. each time a consumer
requests the counter data of this Performance Counter.

The next step in exposing this counter to the runtime system is to register
the function as a new raw counter type using the __hpx__ API function
[funcref hpx::performance_counters::install_counter_type `hpx::performance_counters::install_counter_type`].
A counter type represents certain common characteristics of counters, like
their counter type name, and any associated description information. The
following snippet shows an example of how to register the function
`some_performance_data` which is shown above for a counter type named
`"/test/data"`. This registration has to be executed before
any consumer instantiates and queries an instance of this counter type.

    #include <hpx/include/performance_counters.hpp>

    void register_counter_type()
    {
        // Call the HPX API function to register the counter type.
        ``[funcref hpx::performance_counters::install_counter_type hpx::performance_counters::install_counter_type]``(
            "/test/data",                                   // counter type name
            &some_performance_data,                         // function providing counter data
            "returns a linearly increasing counter value"   // description text (optional)
            ""                                              // unit of measure (optional)
        );
    }

Now it is possible to instantiate a new counter instance based on
the naming scheme `"/test{locality#*/total}/data"`, where '`*`' is a zero
based integer index indentifying the locality for which the counter instance
should be accessed. The function [funcref hpx::performance_counters::install_counter_type `install_counter_type`]
enables to instantiate exactly one counter instance for each locality. Repeated
requests to instantiate such a counter will return the same instance, e.g. the
instance created for the first request.

If this counter should be accessible using the standard __hpx__ command line
options, the registration has to be performed during application startup,
before `hpx_main` is executed. The best way to achieve this is to register
a __hpx__ startup function using the API function
[funcref hpx::register_startup_function `hpx::register_startup_function`] before
calling `hpx::init` to initialize the runtime system:

    int main(int argc, char* argv[])
    {
        // By registering the counter type we make it available to any consumer
        // creating and querying an instance of the type "/test/data".
        //
        // This registration should be performed during startup. We register the
        // function 'register_counter_type' to be executed as an HPX thread right
        // before hpx_main will be executed.
        ``[funcref hpx::register_startup_function `hpx::register_startup_function`]``(&register_counter_type);

        // Initialize and run HPX.
        return ``[funcref hpx::init `hpx::init`]``(argc, argv);
    }

Please see the code in
[hpx_link examples/performance_counters/simplest_performance_counter.cpp..simplest_performance_counter.cpp]
for a full example demonstrating this functionality.

[endsect] [/ Exposing Performance Counter Data using a Simple Function]

[section:full_counters Implementing a Full Performance Counter]

Somtimes, the simple way of exposing a single value as a Performance Counter is
not sufficient. For that reason, __hpx__ provides a means of implementing full
Performance Counters which support:

* Retrieving the descriptive information about the Performance Counter
* Retrieving the current counter value
* Resetting the Performance Counter (value)
* Starting the Performance Counter
* Stopping the Performance Counter
* Setting the (initial) value of the Performance Counter

Every full Performance Counter will implement a predefined interface:

[import ../../hpx/performance_counters/performance_counter.hpp]
[performance_counter_interface]

In order to implement a full Performance Counter you have to create an __hpx__
component exposing this interface. To simplify this task, __hpx__ provides a
ready made base class which handles all the boiler plate of creating a
component for you. The remainder of this section will explain the process
of creating a full Performance Counter based on the Sine example which you
can find in the directory `examples/performance_counters/sine/`.

This base class is defined in the header file
[hpx_link hpx/performance_counters/base_performance_counter.hpp..hpx/performance_counters/base_performance_counter.hpp]
as:

[import ../../hpx/performance_counters/base_performance_counter.hpp]
[base_performance_counter_class]

The single template parameter is expected to receive the type of the
derived class implementing the Performance Counter. In the Sine example
this looks like:

[import ../../examples/performance_counters/sine/server/sine.hpp]
[sine_counter_definition]

i.e. the type `sine_counter` is derived from the mentioned base class passing
the type itself as a template argument (please see
[hpx_link examples/performance_counters/sine/server/sine.hpp..sine.hpp]
for the full source code of the counter definition). For more information
about this technique (called Curiously Recurring Template Pattern - CRTP),
please see for instance the corresponding
[@http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern Wikipedia article].
This base class itself is derived from the `performance_counter` interface
described above.


Additionally, full Performance Counters not only expose the actual value but
also provide information about

* The point in time a particular value was retrieved
* A (sequential) invocation count
* The actual counter value
* An optional scaling coefficient
* Information about the counter status



[endsect] [/ Implementing a Full Performance Counter]

[endsect] [/ Providing Performance Counter Data]

