[/=============================================================================
    Copyright (C) 2007-2017 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:applications Writing __hpx__ applications]

In order to write an application which uses services from the __hpx__ runtime
system you need to initialize the __hpx__ library by inserting certain calls
into the code of your application. Depending on your use case, this can be done
in 3 different ways:

* [link hpx.manual.applications.minimal Minimally invasive]: Re-use the `main()`
  function as the main __hpx__ entry point.
* [link hpx.manual.applications.medium Balanced use case]: Supply your own main
  __hpx__ entry point while blocking the main thread.
* [link hpx.manual.applications.flexible Most flexibility]: Supply your own main
  __hpx__ entry point while avoiding to block the main thread.

[heading:minimal Re-use the `main()` function as the main __hpx__ entry point]

This method is the least intrusive to your code. It however provides you with
the smallest flexibility in terms of initializing the __hpx__ runtime system
only. The following code snippet shows what a minimal __hpx__ application using
this technique looks like:

    #include <``[headerref hpx/hpx_main.hpp `hpx/hpx_main.hpp`]``>

    int main(int argc, char* argv[])
    {
        return 0;
    }

The only change to your code you have to make is to include the file
[headerref hpx/hpx_main.hpp `hpx/hpx_main.hpp`].
In this case the function `main()` will be invoked as the first __hpx__ thread
of the application. The runtime system will be initialized behind the scenes
before the function `main()` is executed and will automatically stopped after
`main()` has returned. All __hpx__ API functions can be used from within this
function now.

[note The function `main()` does not need to expect receiving `argc`/`argv`
      as shown above, but could expose the signature `int main()`. This
      is consistent with the usually allowed prototypes for the function
      `main()` in C++ applications.]

All command line arguments specific to __hpx__ will still be processed by the
__hpx__ runtime system as usual. However, those command line options will be
removed from the list of values passed to `argc`/`argv` of the function
`main()`. The list of values passed to `main()` will hold only the commandline
options which are not recognized by the __hpx__ runtime system (see the section
__commandline__ for more details on what options are recognized by __hpx__).

[note In this mode all one-letter-shortcuts are disabled which are normally
      available on the __hpx__ command line (such as `-t` or `-l`, see
      __commandline__). This is done to minimize any possible interaction between
      the command line options recognized by the __hpx__ runtime system and
      any command line options defined by the application.]

The value returned from the function `main()` as shown above will be returned
to the operating system as usual.

[important To achieve this seamless integration, the header file
           [headerref hpx/hpx_main.hpp `hpx/hpx_main.hpp`] defines a macro
           ``
              #define main hpx_startup::user_main
           ``
           which could result in unexpected behavior.]


[heading:medium Supply your own main __hpx__ entry point while blocking the main thread]

With this method you need to provide an explicit main thread function named
[funcref hpx_main `hpx_main`] at global scope. This function will be invoked
as the main entry point of your __hpx__ application on the console locality
only (this function will be invoked as the first __hpx__ thread of your application).
All __hpx__ API functions can be used from within this function.

The thread executing the function [funcref hpx::init `hpx::init`] will block
waiting for the runtime system to exit. The value returned from
[funcref hpx_main `hpx_main`] will be returned from [funcref hpx::init `hpx::init`]
after the runtime system has stopped.

The function [funcref hpx::finalize `hpx::finalize`] has to be called on one
of the __hpx__ localities in order to signal that all work has been scheduled
and the runtime system should be stopped after the scheduled work has been executed.

This method of invoking __hpx__ has the advantage of you being able to
decide which version of [funcref hpx::init `hpx::init`] to call. This allows
to pass additional configuration parameters while initializing the __hpx__
runtime system.

    #include <``[headerref hpx/hpx_init.hpp `hpx/hpx_init.hpp`]``>

    int ``[funcref hpx_main `hpx_main`]``(int argc, char* argv[])
    {
        // Any HPX application logic goes here...
        return ``[funcref hpx::finalize `hpx::finalize`]``();
    }

    int main(int argc, char* argv[])
    {
        // Initialize HPX, run hpx_main as the first HPX thread, and
        // wait for hpx::finalize being called.
        return ``[funcref hpx::init `hpx::init`]``(argc, argv);
    }

[note The function [funcref hpx_main `hpx_main`] does not need to expect receiving
      `argc`/`argv` as shown above, but could expose one of the following signatures:
      ``
          int hpx_main();
          int hpx_main(int argc, char* argv[]);
          int hpx_main(boost::program_options::variables_map& vm);
      ``
      This is consistent with (and extends) the usually allowed prototypes for the
      function `main()` in C++ applications.]

The header file to include for this method of using __hpx__ is
[headerref hpx/hpx_init.hpp `hpx/hpx_init.hpp`].

There are many additional overloads of [funcref hpx::init `hpx::init`]
available, such as for instance to provide your own entry point function instead
of [funcref hpx_main `hpx_main`]. Please refer to the function documentation for
more details (see: [headerref hpx/hpx_init.hpp `hpx/hpx_init.hpp`]).

[heading:flexible Supply your own main __hpx__ entry point while avoiding to block the main thread]

With this method you need to provide an explicit main thread function named
[funcref hpx_main `hpx_main`] at global scope. This function will be invoked
as the main entry point of your __hpx__ application on the console locality
only (this function will be invoked as the first __hpx__ thread of your application).
All __hpx__ API functions can be used from within this function.

The thread executing the function [funcref hpx::start `hpx::start`] will *not* block
waiting for the runtime system to exit, but will return immediately.

[important You cannot use any of the __hpx__ API functions other that
           [funcref hpx::stop `hpx::stop`] from inside your `main()` function.]

The function [funcref hpx::finalize `hpx::finalize`] has to be called on one
of the __hpx__ localities in order to signal that all work has been scheduled
and the runtime system should be stopped after the scheduled work has been executed.

This method of invoking __hpx__ is useful for applications where the main thread
is used for special operations, such a GUIs. The function [funcref hpx::stop `hpx::stop`]
can be used to wait for the __hpx__ runtime system to exit and should be at least
used as the last function called in `main()`.
The value returned from [funcref hpx_main `hpx_main`] will be returned from
[funcref hpx::stop `hpx::stop`] after the runtime system has stopped.

    #include <``[headerref hpx/hpx_start.hpp `hpx/hpx_start.hpp`]``>

    int ``[funcref hpx_main `hpx_main`]``(int argc, char* argv[])
    {
        // Any HPX application logic goes here...
        return ``[funcref hpx::finalize `hpx::finalize`]``();
    }

    int main(int argc, char* argv[])
    {
        // Initialize HPX, run hpx_main.
        ``[funcref hpx::start `hpx::start`]``(argc, argv);

        // ...Execute other code here...

        // Wait for hpx::finalize being called.
        return ``[funcref hpx::stop `hpx::stop`]``();
    }

[note The function [funcref hpx_main `hpx_main`] does not need to expect receiving
      `argc`/`argv` as shown above, but could expose one of the following signatures:
      ``
          int hpx_main();
          int hpx_main(int argc, char* argv[]);
          int hpx_main(boost::program_options::variables_map& vm);
      ``
      This is consistent with (and extends) the usually allowed prototypes for the
      function `main()` in C++ applications.]

The header file to include for this method of using __hpx__ is
[headerref hpx/hpx_start.hpp `hpx/hpx_start.hpp`].

There are many additional overloads of [funcref hpx::start `hpx::start`]
available, such as for instance to provide your own entry point function instead
of [funcref hpx_main `hpx_main`]. Please refer to the function documentation for
more details (see: [headerref hpx/hpx_start.hpp `hpx/hpx_start.hpp`]).

[heading:flexible Suspending and resuming the __hpx__ runtime]

In some applications it is required to combine __hpx__ with other runtimes. To
support this use case __hpx__ provides two functions: [funcref hpx::suspend
`hpx::suspend`] and [funcref hpx::resume `hpx::resume`]. [funcref hpx::suspend
`hpx::suspend`] is a blocking call which will wait for all scheduled tasks to
finish executing and then put the thread pool OS threads to sleep. [funcref
hpx::resume `hpx::resume`] simply wakes up the sleeping threads so that they are
ready to accept new work. [funcref hpx::suspend `hpx::suspend`] and [funcref
hpx::resume `hpx::resume`] can be found in the header [headerref
hpx/hpx_suspend.hpp `hpx/hpx_suspend.hpp`].

    #include <``[headerref hpx/hpx_start.hpp `hpx/hpx_start.hpp`]``>
    #include <``[headerref hpx/hpx_suspend.hpp `hpx/hpx_suspend.hpp`]``>

    int main(int argc, char* argv[])
    {
        // Initialize HPX, don't run hpx_main
        ``[funcref hpx::start `hpx::start`]``(nullptr, argc, argv);

        // Schedule a function on the HPX runtime
        ``[funcref hpx::async `hpx::async`]``(&my_function, ...);

        // Wait for all tasks to finish, and suspend the HPX runtime
        ``[funcref hpx::suspend `hpx::suspend`]``();

        // Execute non-HPX code here

        // Resume the HPX runtime
        ``[funcref hpx::resume `hpx::resume`]``();

        // Schedule more work on the HPX runtime

        // Wait for hpx::finalize being called.
        return ``[funcref hpx::stop `hpx::stop`]``();
    }

[note [funcref hpx::suspend `hpx::suspend`] does not wait for [funcref
      hpx::finalize `hpx::finalize`] to be called. Only call [funcref
      hpx::finalize `hpx::finalize`] when you wish to fully stop the __hpx__
      runtime.]

__hpx__ also supports suspending individual thread pools and threads. For
details on how to do that see the documentation for [classref
hpx::threads::thread_pool_base `thread_pool_base`].

[endsect]
