[/=============================================================================
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:cmake Building __hpx__ with CMake]

The buildsystem for __hpx__ is based on __cmake__. CMake is a cross-platform
build-generator tool. CMake does not build the project, it generates the files
needed by your build tool (GNU make, Visual Studio, etc) for building __hpx__.

[/////////////////////////////////////////////////////////////////////////////]
[section:introduction Introduction]

__cmake__ is a cross-platform build-generator tool. CMake does not build the
project, it generates the files needed by your build tool (GNU make, Visual
Studio, etc) for building __hpx__.

If you are really anxious about getting a functional __hpx__ build, go to the
[link hpx.manual.cmake.quick_start Quick Start] section. If you are a CMake
novice, start on [link hpx.manual.cmake.basic_usage Basic CMake Usage] and then
go back to the [link hpx.manual.cmake.quick_start Quick Start] once you know
what you are doing. The [link hpx.manual.cmake.options Options and Variables]
section is a reference for customizing your build. If you already have experience
with CMake, this is the recommended starting point.

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:quick_start Quick Start]

[teletype]

We use here the command-line, non-interactive __cmake__ interface.

# Download and install CMake here: __cmake_download__. Version 2.8 is the
  minimally required version for __hpx__.

# Open a shell. Your development tools must be reachable from this shell through
  the PATH environment variable.

# Create a directory for containing the build. It is not supported to build
  __hpx__ on the source directory. cd to this directory:
``
    $ mkdir mybuilddir
    $ cd mybuilddir
``

# Execute this command on the shell replacing path/to/hpx/ with the path to
  the root of your __hpx__ source tree:
``
    $ cmake path/to/hpx
``

CMake will detect your development environment, perform a series of tests and
will generate the files required for building __hpx__. CMake will use default values
for all build parameters. See the [link hpx.manual.cmake.options Options and Variables]
section for fine-tuning your build.

This can fail if CMake can't detect your toolset, or if it thinks that the
environment is not sane enough. On this case make sure that the toolset that
you intend to use is the only one reachable from the shell and that the shell
itself is the correct one for you development environment. CMake will refuse to
build MinGW makefiles if you have a POSIX shell reachable through the PATH
environment variable, for instance. You can force CMake to use a given build
tool, see the [link hpx.manual.cmake.basic_usage Basic CMake Usage] section.

[c++]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:basic_usage Basic CMake Usage]

[teletype]

This section explains basic aspects of __cmake__, mostly for explaining those
options which you may need on your day-to-day usage.

CMake comes with extensive documentation in the form of html files and on the
cmake executable itself. Execute `cmake --help` for further help options.

CMake requires to know for which build tool it shall generate files (GNU make,
Visual Studio, Xcode, etc). If not specified on the command line, it tries to
guess it based on you environment. Once identified the build tool, CMake uses
the corresponding Generator for creating files for your build tool. You can
explicitly specify the generator with the command line option
`-G "Name of the generator"`. For knowing the available generators on your
platform, execute:
``
    $ cmake --help
``

This will list the generator names at the end of the help text. Generator names
are case-sensitive. Example:
``
    $ cmake -G "Visual Studio 9 2008" path/to/hpx
``

For a given development platform there can be more than one adequate generator.
If you use Visual Studio `"NMake Makefiles"` is a generator you can use for building
with NMake. By default, CMake chooses the more specific generator supported by
your development environment. If you want an alternative generator, you must tell
this to CMake with the `-G` option.

[c++]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:options Options and Variables]

[teletype]

Variables customize how the build will be generated. Options are boolean
variables, with possible values ON/OFF. Options and variables are defined on
the CMake command line like this:
``
    $ cmake -DVARIABLE=value path/to/hpx
``

You can set a variable after the initial CMake invocation for changing its
value. You can also undefine a variable:
``
    $ cmake -UVARIABLE path/to/hpx
``

Variables are stored on the CMake cache. This is a file named CMakeCache.txt on
the root of the build directory. Do not hand-edit it.

Variables are listed here appending its type after a colon. It is correct to
write the variable and the type on the CMake command line:
``
    $ cmake -DVARIABLE:TYPE=value path/to/llvm/source
``

CMake supports the following variable types: `BOOL` (options), `STRING`
(arbitrary string), `PATH` (directory name), `FILEPATH` (file name).

[c++]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:variables Frequently used CMake Variables]

Here are listed some of the CMake variables that are used often, along with a
brief explanation and __hpx__-specific notes. For full documentation, check the
CMake docs or execute `cmake --help-variable VARIABLE_NAME`.

[variablelist Frequently used CMake Variables
    [[`CMAKE_BUILD_TYPE:STRING`]
     [Sets the build type for make based generators. Possible values are
      `Release`, `Debug`, `RelWithDebInfo` and `MinSizeRel`. The default value
      for this variable is `Release`.]
    ]
    [[`CMAKE_INSTALL_PREFIX:PATH`]
     [Path where __hpx__ will be installed if `make install` is invoked or
      the `INSTALL` target is built. The default value for this variable is
      `/opt/hpx` (Linux), or `C:/Program Files/hpx` (Windows).]
    ]
    [[`CMAKE_C_FLAGS:STRING`]
     [Extra flags to use when compiling C source files.]
    ]
    [[`CMAKE_CXX_FLAGS:STRING`]
     [Extra flags to use when compiling C++ source files.]
    ]
    [[`CMAKE_FORTRAN_FLAGS:STRING`]
     [Extra flags to use when compiling Fortran source files.]
    ]
    [[`CMAKE_VERBOSE_MAKEFILE:BOOL`]
     [Create verbose makefiles if `ON` (default: `OFF`). CMake will produce
      verbose makefiles that show each command line as it is used.]
    ]
]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_variables HPX specific CMake Variables]

Here are listed the most frequently used CMake variables specific to __hpx__,
along with a brief explanation.

[variablelist Frequently used HPX specific CMake Variables
    [[`HPX_BUILD_DOCUMENTATION:BOOL`]
     [Build the __hpx__ documentation if the documentation toolchain is available
      (default: `OFF`). For more information about how to set up the documentation
      tool chain please refer to the section
      [link hpx.manual.cmake.documentation Setting up the HPX Documentation Tool Chain].]
    ]
    [[`HPX_BUILD_EXAMPLES:BOOL`]
     [__hpx__ examples will be built (default: `ON`). To actually build the
      examples execute `make examples`.]
    ]
    [[`HPX_BUILD_TESTS:BOOL`]
     [__hpx__ tests will be built (default: `ON`). To actually build
      the tests execute `make tests`.]
    ]
    [[`HPX_CMAKE_LOGLEVEL:STRING`]
     [Sets the debugging level for the __hpx__ build system generation. Possible
      values are `Error`, `Warn`, `Debug`, and `Info`. The default is `Warn`.]
    ]
    [[`HPX_NO_LOGGING:BOOL`]
     [Sets whether __hpx__ should not support generating detailed logging output
      (default: `OFF`). Even if this is set to `OFF` (i.e. logging is supported)
      you need to enable logging when running any __hpx__ application. Logging
      support introducied a minimal runtime overhead which usually can be ignored.
      This option allows to remove this runtime overhead but by doing so disables
      the capability to extract detailed runtime information in case of errors.]
    ]
    [[`HPX_HAVE_CXX11:BOOL`]
     [Sets whether __hpx__ should use C++11 support, if available (default: `ON`).]
    ]
    [[`HPX_HAVE_STACKTRACES:BOOL`]
     [Sets whether __hpx__ applications should support capturing stack back-
      traces (default: `ON`).]
    ]
    [[`HPX_HAVE_NATIVE_TLS:BOOL`]
     [Sets whether __hpx__ should use the native compiler support for thread
      local storage, if available (default: `ON`).]
    ]
    [[`HPX_THREAD_DEBUG_INFO:BOOL`]
     [Sets whether __hpx__ threads should maintain detailed debugging information
      like the parent thread id, the phase execution count, the thread description,
      and the LCO description (while the thread is suspended). The default value
      for this variable is `OFF` if `CMAKE_BUILD_TYPE=Release` and `ON` otherwise.]
    ]
]

Here is a more complete list of CMake variables specific to __hpx__. These
variables are used more seldom and are mainly useful for debugging purposes.

[variablelist Other HPX specific CMake Variables
    [[`HPX_THREAD_MAINTAIN_BACKTRACE_ON_SUSPENSION:BOOL`]
     [Sets whether __hpx__ threads should capture the stack back-trace whenever
      they are about to be suspended (default: `OFF`).]
    ]
    [[`HPX_THREAD_BACKTRACE_ON_SUSPENSION_DEPTH:STRING`]
     [Sets the depth of the stack back-traces captured during thread suspension
      (default: `5`).]
    ]
    [[`HPX_USE_ITT_NOTIFY:BOOL`]
     [Sets whether __hpx__ supports integration with the diagnostic tools of 
      the Intel Parallel Studio (Intel Amplifier and Intel Inspector). The default
      value for this variable is `OFF`. Even if the variable is set to `ON` 
      you must separately enable integration with the Intel tools at runtime.
      This option is available only if the include files and libraries for
      one of the Intel tools canbe located (see CMake variable `AMPLIFIER`
      below).]
    ]
    [[`HPX_AUTOMATIC_PREPROCESSING:BOOL`]
     [Sets whether the generated makefiles should allow to regenerate the 
      partially preprocessed files that are part of __hpx__. The default value 
      for this option is `OFF`. This option can be enabled only if the 
      __boost_wave__ tool is available (see CMake variable `BOOSTWAVE` below).]
    ]
]

Here is a list of additional libraries and tools which are either optionally 
supported by the build system or are optionally required for certain examples 
or tests. These libraries and tools can be detected by the __hpx__ build 
system.

Each of the tools or libraries listed here will be automatically detected if 
they are installed in some standard location. If a tool or library is installed 
in a different location you can specify its base directory by appending `_ROOT`
to the variable name as listed below. For instance, to configure a custom
directory for `BOOST`, specify `BOOST_ROOT=/custom/boost/root`.

[variablelist Additional Tools and Libraries
    [[`AMPLIFIER:PATH`]
     []
    ]
    [[`BOOST:PATH`]
     []
    ]
    [[`BOOSTWAVE:PATH`]
     []
    ]
    [[`DOCBOOK_DTD:PATH`]
     []
    ]
    [[`DOCBOOK_XSL:PATH`]
     []
    ]
    [[`DOXYGEN:PATH`]
     []
    ]
    [[`HDF5:PATH`]
     []
    ]
    [[`HWLOC:PATH`]
     []
    ]
    [[`MPI:PATH`]
     []
    ]
    [[`MPIEXEC:PATH`]
     []
    ]
    [[`PAPI:PATH`]
     []
    ]
    [[`QUICKBOOK:PATH`]
     []
    ]
    [[`XSLTPROC:PATH`]
     []
    ]
]


[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:documentation Setting up the HPX Documentation Tool Chain]

[endsect]

[endsect] [/ Building __hpx__ with CMake]

