[/==============================================================================
    Copyright (C) 2014 Thomas Heller
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:pkgconfig Using HPX with pkg-config]

[/////////////////////////////////////////////////////////////////////////////]
[section:apps How to Build __hpx__ Applications with pkg-config]

After you are done installing __hpx__, you should be able to build the following
program. It prints [^Hello __hpx__ World!] on the locality you run it on.

[c++]

[import ../../../examples/quickstart/simplest_hello_world.cpp]

[simplest_hello_world_getting_started]

Copy the text of this program into a file called hello_world.cpp.

Now, in the directory where you put hello_world.cpp, issue the following commands
(where [^$HPX_LOCATION] is the build directory or [^CMAKE_INSTALL_PREFIX] you
used while building __hpx__):

[teletype]

``
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HPX_LOCATION/lib/pkgconfig
    c++ -o hello_world hello_world.cpp \
        `pkg-config --cflags --libs hpx_application` \
        -lhpx_iostreams -DHPX_APPLICATION_NAME=hello_world
``

[important When using pkg-config with __hpx__, the pkg-config flags must go after
           the [^-o] flag.]


[note __hpx__ libraries have different names in debug and release mode. If you
      want to link against a debug __hpx__ library, you need to use the `_debug`
      suffix for the pkg-config name. That means instead of `hpx_application` or
      `hpx_component` you will have to use `hpx_application_debug` or
      `hpx_component_debug`. Moreover, all referenced __hpx__ components need to
      have a appended 'd' suffix, e.g. instead of `-lhpx_iostreams` you will need
      to specify `-lhpx_iostreamsd`.]

[important If the __hpx__ libraries are in a path that is not found by the dynamic
           linker. You need to add the path $HPX_LOCATION/lib to your linker search
           path (for example LD_LIBRARY_PATH on Linux)]

To test the program, type:

``
    ./hello_world
``

which should print [^Hello World!] and exit.

[endsect] [/ How to Build __hpx__ Applications with pkg-config]

[/////////////////////////////////////////////////////////////////////////////]
[section:comps How to Build __hpx__ Components with pkg-config]

Let's try a more complex example involving an __hpx__ component. An __hpx__ component is
a class which exposes __hpx__ actions. __hpx__ components are compiled into dynamically
loaded modules called component libraries. Here's the source code:

[c++]

[import ../../../examples/hello_world_component/hello_world_component.hpp]

[*hello_world_component.cpp]

[import ../../../examples/hello_world_component/hello_world_component.cpp]

[hello_world_cpp_getting_started]

[*hello_world_component.hpp]

[hello_world_hpp_getting_started]

[*hello_world_client.cpp]

[import ../../../examples/hello_world_component/hello_world_client.cpp]

[hello_world_client_getting_started]

Copy the three source files above into three files (called hello_world_component.cpp,
hello_world_component.hpp and hello_world_client.cpp respectively).

Now, in the directory where you put the files, run the following command to
build the component library. (where [^$HPX_LOCATION] is the build directory or
[^CMAKE_INSTALL_PREFIX] you used while building __hpx__):

[teletype]

``
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HPX_LOCATION/lib/pkgconfig
    c++ -o libhpx_hello_world.so hello_world_component.cpp \
        `pkg-config --cflags --libs hpx_component` \
        -lhpx_iostreams -DHPX_COMPONENT_NAME=hpx_hello_world
``

Now pick a directory in which to install your __hpx__ component libraries. For
this example, we'll choose a directory named ''my_hpx_libs''.

``
    mkdir ~/my_hpx_libs
    mv libhello_world.so ~/my_hpx_libs
``

[note __hpx__ libraries have different names in debug and release mode. If you
      want to link against a debug __hpx__ library, you need to use the `_debug`
      suffix for the pkg-config name. That means instead of `hpx_application` or
      `hpx_component` you will have to use `hpx_application_debug` or
      `hpx_component_debug`. Moreover, all referenced __hpx__ components need to
      have a appended 'd' suffix, e.g. instead of `-lhpx_iostreams` you will need
      to specify `-lhpx_iostreamsd`.]

[important If the __hpx__ libraries are in a path that is not found by the dynamic
           linker. You need to add the path $HPX_LOCATION/lib to your linker search
           path (for example LD_LIBRARY_PATH on Linux)]

Now, to build the application that uses this component (hello_world_client.cpp),
we do:

``
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HPX_LOCATION/lib/pkgconfig
    c++ -o hello_world_client hello_world_client.cpp \
        `pkg-config --cflags --libs hpx_application` \
        -L${HOME}/my_hpx_libs -lhpx_hello_world -lhpx_iostreams
``

[important When using pkg-config with __hpx__, the pkg-config flags must go after
           the [^-o] flag.]

Finally, you'll need to set your LD_LIBRARY_PATH before you can run the program.
To run the program, type:

``
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/my_hpx_libs"
    ./hello_world_client
``

which should print [^Hello __hpx__ World!] and exit.

[endsect] [/ How to Build __hpx__ Components with pkg-config]

[endsect] [/ Using HPX with CMake based pkg-config]
