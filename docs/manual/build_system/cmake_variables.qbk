[/==============================================================================
    Copyright (C) 2014 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/ This file has been automatically generated using the CMake tool.            /]
[/ Do not edit manually.                                                       /]

[section:cmake_variables CMake Variables used to configure __hpx__]

In order to configure HPX, you can set a variety of options to allow cmake to generate
your specific makefiles/project files.

[section:configure Variables that influence how HPX is being built]

The options are split into these categories:

* [link build_system.cmake_variables.Generic Generic Options]
* [link build_system.cmake_variables.Build_Targets Build Targets Options]
* [link build_system.cmake_variables.Thread_Manager Thread Manager Options]
* [link build_system.cmake_variables.AGAS AGAS Options]
* [link build_system.cmake_variables.Parcelport Parcelport Options]
* [link build_system.cmake_variables.Profiling Profiling Options]
* [link build_system.cmake_variables.Debugging Debugging Options]
* [link build_system.cmake_variables.Tools Tools Options]

[#build_system.cmake_variables.Generic][h3 Generic Options]
* [link build_system.cmake_variables.HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION]
* [link build_system.cmake_variables.HPX_WITH_BENCHMARK_SCRIPTS_PATH HPX_WITH_BENCHMARK_SCRIPTS_PATH]
* [link build_system.cmake_variables.HPX_WITH_BOOST_ALL_DYNAMIC_LINK HPX_WITH_BOOST_ALL_DYNAMIC_LINK]
* [link build_system.cmake_variables.HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY]
* [link build_system.cmake_variables.HPX_WITH_COMPILER_WARNINGS HPX_WITH_COMPILER_WARNINGS]
* [link build_system.cmake_variables.HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY]
* [link build_system.cmake_variables.HPX_WITH_COMPRESSION_BZIP2 HPX_WITH_COMPRESSION_BZIP2]
* [link build_system.cmake_variables.HPX_WITH_COMPRESSION_SNAPPY HPX_WITH_COMPRESSION_SNAPPY]
* [link build_system.cmake_variables.HPX_WITH_COMPRESSION_ZLIB HPX_WITH_COMPRESSION_ZLIB]
* [link build_system.cmake_variables.HPX_WITH_CUDA HPX_WITH_CUDA]
* [link build_system.cmake_variables.HPX_WITH_CUDA_CLANG HPX_WITH_CUDA_CLANG]
* [link build_system.cmake_variables.HPX_WITH_FORTRAN HPX_WITH_FORTRAN]
* [link build_system.cmake_variables.HPX_WITH_FULL_RPATH HPX_WITH_FULL_RPATH]
* [link build_system.cmake_variables.HPX_WITH_GCC_VERSION_CHECK HPX_WITH_GCC_VERSION_CHECK]
* [link build_system.cmake_variables.HPX_WITH_GENERIC_CONTEXT_COROUTINES HPX_WITH_GENERIC_CONTEXT_COROUTINES]
* [link build_system.cmake_variables.HPX_WITH_GENERIC_EXECUTION_POLICY HPX_WITH_GENERIC_EXECUTION_POLICY]
* [link build_system.cmake_variables.HPX_WITH_HCC HPX_WITH_HCC]
* [link build_system.cmake_variables.HPX_WITH_HIDDEN_VISIBILITY HPX_WITH_HIDDEN_VISIBILITY]
* [link build_system.cmake_variables.HPX_WITH_HWLOC HPX_WITH_HWLOC]
* [link build_system.cmake_variables.HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY]
* [link build_system.cmake_variables.HPX_WITH_LOGGING HPX_WITH_LOGGING]
* [link build_system.cmake_variables.HPX_WITH_MALLOC HPX_WITH_MALLOC]
* [link build_system.cmake_variables.HPX_WITH_NATIVE_TLS HPX_WITH_NATIVE_TLS]
* [link build_system.cmake_variables.HPX_WITH_NETWORKING HPX_WITH_NETWORKING]
* [link build_system.cmake_variables.HPX_WITH_PARCEL_COALESCING HPX_WITH_PARCEL_COALESCING]
* [link build_system.cmake_variables.HPX_WITH_RUN_MAIN_EVERYWHERE HPX_WITH_RUN_MAIN_EVERYWHERE]
* [link build_system.cmake_variables.HPX_WITH_SECURITY HPX_WITH_SECURITY]
* [link build_system.cmake_variables.HPX_WITH_STATIC_LINKING HPX_WITH_STATIC_LINKING]
* [link build_system.cmake_variables.HPX_WITH_SYCL HPX_WITH_SYCL]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION] `HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION:BOOL`][Use automatic serialization registration for actions and functions. This affects compatibility between HPX applications compiled with different compilers (default ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_BENCHMARK_SCRIPTS_PATH] `HPX_WITH_BENCHMARK_SCRIPTS_PATH:PATH`][Directory to place batch scripts in]]
        [[[#build_system.cmake_variables.HPX_WITH_BOOST_ALL_DYNAMIC_LINK] `HPX_WITH_BOOST_ALL_DYNAMIC_LINK:BOOL`][Add BOOST_ALL_DYN_LINK to compile flags]]
        [[[#build_system.cmake_variables.HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY] `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY:BOOL`][Enable backwards compatibility for apply_colocated, async_colocated and friends]]
        [[[#build_system.cmake_variables.HPX_WITH_COMPILER_WARNINGS] `HPX_WITH_COMPILER_WARNINGS:BOOL`][Enable compiler warnings (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY] `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY:BOOL`][Enable backwards compatibility for component::get_gid() functions]]
        [[[#build_system.cmake_variables.HPX_WITH_COMPRESSION_BZIP2] `HPX_WITH_COMPRESSION_BZIP2:BOOL`][Enable bzip2 compression for parcel data (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_COMPRESSION_SNAPPY] `HPX_WITH_COMPRESSION_SNAPPY:BOOL`][Enable snappy compression for parcel data (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_COMPRESSION_ZLIB] `HPX_WITH_COMPRESSION_ZLIB:BOOL`][Enable zlib compression for parcel data (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_CUDA] `HPX_WITH_CUDA:BOOL`][Enable CUDA support (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_CUDA_CLANG] `HPX_WITH_CUDA_CLANG:BOOL`][Use clang to compile CUDA code (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_FORTRAN] `HPX_WITH_FORTRAN:BOOL`][Enable or disable the compilation of Fortran examples using HPX]]
        [[[#build_system.cmake_variables.HPX_WITH_FULL_RPATH] `HPX_WITH_FULL_RPATH:BOOL`][Build and link HPX libraries and executables with full RPATHs (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_GCC_VERSION_CHECK] `HPX_WITH_GCC_VERSION_CHECK:BOOL`][Don't ignore version reported by gcc (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_GENERIC_CONTEXT_COROUTINES] `HPX_WITH_GENERIC_CONTEXT_COROUTINES:BOOL`][Use Boost.Context as the underlying coroutines context switch implementation.]]
        [[[#build_system.cmake_variables.HPX_WITH_GENERIC_EXECUTION_POLICY] `HPX_WITH_GENERIC_EXECUTION_POLICY:BOOL`][Enable the generic execution policy (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_HCC] `HPX_WITH_HCC:BOOL`][Enable hcc support (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_HIDDEN_VISIBILITY] `HPX_WITH_HIDDEN_VISIBILITY:BOOL`][Use -fvisibility=hidden for builds on platforms which support it (default ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_HWLOC] `HPX_WITH_HWLOC:BOOL`][Use Hwloc for hardware topolgy information and thread pinning. If disabled, performance might be reduced.]]
        [[[#build_system.cmake_variables.HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY] `HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY:BOOL`][Enable backwards compatibility for hpx::lcos::local::dataflow() functions]]
        [[[#build_system.cmake_variables.HPX_WITH_LOGGING] `HPX_WITH_LOGGING:BOOL`][Build HPX with logging enabled (default: ON).]]
        [[[#build_system.cmake_variables.HPX_WITH_MALLOC] `HPX_WITH_MALLOC:STRING`][Define which allocator should be linked in. Options are: system, tcmalloc, jemalloc, tbbmalloc, and custom (default is: tcmalloc)]]
        [[[#build_system.cmake_variables.HPX_WITH_NATIVE_TLS] `HPX_WITH_NATIVE_TLS:BOOL`][Use native TLS support if available (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_NETWORKING] `HPX_WITH_NETWORKING:BOOL`][Enable networking. If this is disabled then HPX will not be usable in distributed use cases]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCEL_COALESCING] `HPX_WITH_PARCEL_COALESCING:BOOL`][Enable the parcel coalescing plugin (default: ON).]]
        [[[#build_system.cmake_variables.HPX_WITH_RUN_MAIN_EVERYWHERE] `HPX_WITH_RUN_MAIN_EVERYWHERE:BOOL`][Run hpx_main by default on all localities (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_SECURITY] `HPX_WITH_SECURITY:BOOL`][Enable security support via libsodium.]]
        [[[#build_system.cmake_variables.HPX_WITH_STATIC_LINKING] `HPX_WITH_STATIC_LINKING:BOOL`][Compile HPX statically linked libraries (Default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_SYCL] `HPX_WITH_SYCL:BOOL`][Enable sycl support (default: OFF)]]
] [/ Generic Options]

[#build_system.cmake_variables.Build_Targets][h3 Build Targets Options]
* [link build_system.cmake_variables.HPX_WITH_COMPILE_ONLY_TESTS HPX_WITH_COMPILE_ONLY_TESTS]
* [link build_system.cmake_variables.HPX_WITH_DEFAULT_TARGETS HPX_WITH_DEFAULT_TARGETS]
* [link build_system.cmake_variables.HPX_WITH_DOCUMENTATION HPX_WITH_DOCUMENTATION]
* [link build_system.cmake_variables.HPX_WITH_DOCUMENTATION_SINGLEPAGE HPX_WITH_DOCUMENTATION_SINGLEPAGE]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES HPX_WITH_EXAMPLES]
* [link build_system.cmake_variables.HPX_WITH_IO_COUNTERS HPX_WITH_IO_COUNTERS]
* [link build_system.cmake_variables.HPX_WITH_PSEUDO_DEPENDENCIES HPX_WITH_PSEUDO_DEPENDENCIES]
* [link build_system.cmake_variables.HPX_WITH_RUNTIME HPX_WITH_RUNTIME]
* [link build_system.cmake_variables.HPX_WITH_TESTS HPX_WITH_TESTS]
* [link build_system.cmake_variables.HPX_WITH_TESTS_BENCHMARKS HPX_WITH_TESTS_BENCHMARKS]
* [link build_system.cmake_variables.HPX_WITH_TESTS_EXTERNAL_BUILD HPX_WITH_TESTS_EXTERNAL_BUILD]
* [link build_system.cmake_variables.HPX_WITH_TESTS_HEADERS HPX_WITH_TESTS_HEADERS]
* [link build_system.cmake_variables.HPX_WITH_TESTS_REGRESSIONS HPX_WITH_TESTS_REGRESSIONS]
* [link build_system.cmake_variables.HPX_WITH_TESTS_UNIT HPX_WITH_TESTS_UNIT]
* [link build_system.cmake_variables.HPX_WITH_TOOLS HPX_WITH_TOOLS]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_COMPILE_ONLY_TESTS] `HPX_WITH_COMPILE_ONLY_TESTS:BOOL`][Create build system support for compile time only HPX tests (default ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_DEFAULT_TARGETS] `HPX_WITH_DEFAULT_TARGETS:BOOL`][Associate the core HPX library with the default build target (default: ON).]]
        [[[#build_system.cmake_variables.HPX_WITH_DOCUMENTATION] `HPX_WITH_DOCUMENTATION:BOOL`][Build the HPX documentation (default OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_DOCUMENTATION_SINGLEPAGE] `HPX_WITH_DOCUMENTATION_SINGLEPAGE:BOOL`][The HPX documentation should be build as a single page HTML (default OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES] `HPX_WITH_EXAMPLES:BOOL`][Build the HPX examples (default ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_IO_COUNTERS] `HPX_WITH_IO_COUNTERS:BOOL`][Build HPX runtime (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_PSEUDO_DEPENDENCIES] `HPX_WITH_PSEUDO_DEPENDENCIES:BOOL`][Force creating pseudo targets and pseudo dependencies (default OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_RUNTIME] `HPX_WITH_RUNTIME:BOOL`][Build HPX runtime (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS] `HPX_WITH_TESTS:BOOL`][Build the HPX tests (default ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS_BENCHMARKS] `HPX_WITH_TESTS_BENCHMARKS:BOOL`][Build HPX benchmark tests (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS_EXTERNAL_BUILD] `HPX_WITH_TESTS_EXTERNAL_BUILD:BOOL`][Build external cmake build tests (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS_HEADERS] `HPX_WITH_TESTS_HEADERS:BOOL`][Build HPX header tests (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS_REGRESSIONS] `HPX_WITH_TESTS_REGRESSIONS:BOOL`][Build HPX regression tests (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TESTS_UNIT] `HPX_WITH_TESTS_UNIT:BOOL`][Build HPX unit tests (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_TOOLS] `HPX_WITH_TOOLS:BOOL`][Build HPX tools (default: OFF)]]
] [/ Build Targets Options]

[#build_system.cmake_variables.Thread_Manager][h3 Thread Manager Options]
* [link build_system.cmake_variables.HPX_WITH_MAX_CPU_COUNT HPX_WITH_MAX_CPU_COUNT]
* [link build_system.cmake_variables.HPX_WITH_MORE_THAN_64_THREADS HPX_WITH_MORE_THAN_64_THREADS]
* [link build_system.cmake_variables.HPX_WITH_SCHEDULER_LOCAL_STORAGE HPX_WITH_SCHEDULER_LOCAL_STORAGE]
* [link build_system.cmake_variables.HPX_WITH_STACKTRACES HPX_WITH_STACKTRACES]
* [link build_system.cmake_variables.HPX_WITH_SWAP_CONTEXT_EMULATION HPX_WITH_SWAP_CONTEXT_EMULATION]
* [link build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_DEPTH HPX_WITH_THREAD_BACKTRACE_DEPTH]
* [link build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION]
* [link build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION_DEPTH HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION_DEPTH]
* [link build_system.cmake_variables.HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES]
* [link build_system.cmake_variables.HPX_WITH_THREAD_CUMULATIVE_COUNTS HPX_WITH_THREAD_CUMULATIVE_COUNTS]
* [link build_system.cmake_variables.HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION]
* [link build_system.cmake_variables.HPX_WITH_THREAD_IDLE_RATES HPX_WITH_THREAD_IDLE_RATES]
* [link build_system.cmake_variables.HPX_WITH_THREAD_LOCAL_STORAGE HPX_WITH_THREAD_LOCAL_STORAGE]
* [link build_system.cmake_variables.HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF]
* [link build_system.cmake_variables.HPX_WITH_THREAD_QUEUE_WAITTIME HPX_WITH_THREAD_QUEUE_WAITTIME]
* [link build_system.cmake_variables.HPX_WITH_THREAD_SCHEDULERS HPX_WITH_THREAD_SCHEDULERS]
* [link build_system.cmake_variables.HPX_WITH_THREAD_STACK_MMAP HPX_WITH_THREAD_STACK_MMAP]
* [link build_system.cmake_variables.HPX_WITH_THREAD_STEALING_COUNTS HPX_WITH_THREAD_STEALING_COUNTS]
* [link build_system.cmake_variables.HPX_WITH_THREAD_TARGET_ADDRESS HPX_WITH_THREAD_TARGET_ADDRESS]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_MAX_CPU_COUNT] `HPX_WITH_MAX_CPU_COUNT:STRING`][HPX applications will not use more that this number of OS-Threads (default: 64)]]
        [[[#build_system.cmake_variables.HPX_WITH_MORE_THAN_64_THREADS] `HPX_WITH_MORE_THAN_64_THREADS:BOOL`][HPX applications will be able to run on more than 64 cores]]
        [[[#build_system.cmake_variables.HPX_WITH_SCHEDULER_LOCAL_STORAGE] `HPX_WITH_SCHEDULER_LOCAL_STORAGE:BOOL`][Enable scheduler local storage for all HPX schedulers (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_STACKTRACES] `HPX_WITH_STACKTRACES:BOOL`][Attach backtraces to HPX exceptions (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_SWAP_CONTEXT_EMULATION] `HPX_WITH_SWAP_CONTEXT_EMULATION:BOOL`][Emulate SwapContext API for coroutines (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_DEPTH] `HPX_WITH_THREAD_BACKTRACE_DEPTH:STRING`][Thread stack back trace depth being captured (default: 5)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION] `HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION:BOOL`][Enable thread stack back trace being captured on suspension (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION_DEPTH] `HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION_DEPTH:STRING`][Thread stack back trace depth being captured on suspension (default: 5)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES] `HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES:BOOL`][Enable measuring thread creation and cleanup times (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_CUMULATIVE_COUNTS] `HPX_WITH_THREAD_CUMULATIVE_COUNTS:BOOL`][Enable keeping track of cumulative thread counts in the schedulers (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION] `HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION:BOOL`][Enable thread stack back trace being captured on suspension (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_IDLE_RATES] `HPX_WITH_THREAD_IDLE_RATES:BOOL`][Enable measuring the percentage of overhead times spent in the scheduler (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_LOCAL_STORAGE] `HPX_WITH_THREAD_LOCAL_STORAGE:BOOL`][Enable thread local storage for all HPX threads (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF] `HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF:BOOL`][HPX scheduler threads are backing off on idle queues (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_QUEUE_WAITTIME] `HPX_WITH_THREAD_QUEUE_WAITTIME:BOOL`][Enable collecting queue wait times for threads (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_SCHEDULERS] `HPX_WITH_THREAD_SCHEDULERS:STRING`][Which thread schedulers are build. Options are: all, abp-priority, local, static-priority, static, hierarchy, and periodic-priority. For multiple enabled schedulers, separate with a semicolon (default: all)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_STACK_MMAP] `HPX_WITH_THREAD_STACK_MMAP:BOOL`][Use mmap for stack allocation on appropriate platforms]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_STEALING_COUNTS] `HPX_WITH_THREAD_STEALING_COUNTS:BOOL`][Enable keeping track of counts of thread stealing incidents in the schedulers (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_TARGET_ADDRESS] `HPX_WITH_THREAD_TARGET_ADDRESS:BOOL`][Enable storing target address in thread for NUMA awareness (default: OFF)]]
] [/ Thread Manager Options]

[#build_system.cmake_variables.AGAS][h3 AGAS Options]
* [link build_system.cmake_variables.HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES] `HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES:BOOL`][Enable dumps of the AGAS refcnt tables to logs (default: OFF)]]
] [/ AGAS Options]

[#build_system.cmake_variables.Parcelport][h3 Parcelport Options]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS HPX_WITH_PARCELPORT_IBVERBS]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_IFNAME HPX_WITH_PARCELPORT_IBVERBS_IFNAME]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MAX_MEMORY_CHUNKS HPX_WITH_PARCELPORT_IBVERBS_MAX_MEMORY_CHUNKS]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MEMORY_CHUNK_SIZE HPX_WITH_PARCELPORT_IBVERBS_MEMORY_CHUNK_SIZE]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MESSAGE_PAYLOAD HPX_WITH_PARCELPORT_IBVERBS_MESSAGE_PAYLOAD]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_IPC HPX_WITH_PARCELPORT_IPC]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI HPX_WITH_PARCELPORT_MPI]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI_ENV HPX_WITH_PARCELPORT_MPI_ENV]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI_MULTITHREADED HPX_WITH_PARCELPORT_MPI_MULTITHREADED]
* [link build_system.cmake_variables.HPX_WITH_PARCELPORT_TCP HPX_WITH_PARCELPORT_TCP]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS] `HPX_WITH_PARCELPORT_IBVERBS:BOOL`][Enable the ibverbs based parcelport. This is currently an experimental feature]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_IFNAME] `HPX_WITH_PARCELPORT_IBVERBS_IFNAME:STRING`][The interface name of the ibverbs capable network adapter (default: ib0)]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MAX_MEMORY_CHUNKS] `HPX_WITH_PARCELPORT_IBVERBS_MAX_MEMORY_CHUNKS:STRING`][Maximum number of chunks that can be allocated (default: 100)]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MEMORY_CHUNK_SIZE] `HPX_WITH_PARCELPORT_IBVERBS_MEMORY_CHUNK_SIZE:STRING`][Number of bytes a chunk in the memory pool can hold (default: 64MB)]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IBVERBS_MESSAGE_PAYLOAD] `HPX_WITH_PARCELPORT_IBVERBS_MESSAGE_PAYLOAD:STRING`][Size of the message payload not sent with RDMA (default: 512 byte)]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_IPC] `HPX_WITH_PARCELPORT_IPC:BOOL`][Enable the IPC (inter process communication) based parcelport. This is currently an experimental feature]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI] `HPX_WITH_PARCELPORT_MPI:BOOL`][Enable the MPI based parcelport.]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI_ENV] `HPX_WITH_PARCELPORT_MPI_ENV:STRING`][List of environment variables checked to detect MPI (default: MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE).]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_MPI_MULTITHREADED] `HPX_WITH_PARCELPORT_MPI_MULTITHREADED:BOOL`][Turn on MPI multithreading support (default: ON).]]
        [[[#build_system.cmake_variables.HPX_WITH_PARCELPORT_TCP] `HPX_WITH_PARCELPORT_TCP:BOOL`][Enable the TCP based parcelport.]]
] [/ Parcelport Options]

[#build_system.cmake_variables.Profiling][h3 Profiling Options]
* [link build_system.cmake_variables.HPX_WITH_APEX HPX_WITH_APEX]
* [link build_system.cmake_variables.HPX_WITH_GOOGLE_PERFTOOLS HPX_WITH_GOOGLE_PERFTOOLS]
* [link build_system.cmake_variables.HPX_WITH_ITTNOTIFY HPX_WITH_ITTNOTIFY]
* [link build_system.cmake_variables.HPX_WITH_PAPI HPX_WITH_PAPI]
* [link build_system.cmake_variables.HPX_WITH_TAU HPX_WITH_TAU]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_APEX] `HPX_WITH_APEX:BOOL`][Enable APEX instrumentation support.]]
        [[[#build_system.cmake_variables.HPX_WITH_GOOGLE_PERFTOOLS] `HPX_WITH_GOOGLE_PERFTOOLS:BOOL`][Enable Google Perftools instrumentation support.]]
        [[[#build_system.cmake_variables.HPX_WITH_ITTNOTIFY] `HPX_WITH_ITTNOTIFY:BOOL`][Enable Amplifier (ITT) instrumentation support.]]
        [[[#build_system.cmake_variables.HPX_WITH_PAPI] `HPX_WITH_PAPI:BOOL`][Enable the PAPI based performance counter.]]
        [[[#build_system.cmake_variables.HPX_WITH_TAU] `HPX_WITH_TAU:BOOL`][Enable TAU profiling support.]]
] [/ Profiling Options]

[#build_system.cmake_variables.Debugging][h3 Debugging Options]
* [link build_system.cmake_variables.HPX_WITH_THREAD_DEBUG_INFO HPX_WITH_THREAD_DEBUG_INFO]
* [link build_system.cmake_variables.HPX_WITH_THREAD_DESCRIPTION_FULL HPX_WITH_THREAD_DESCRIPTION_FULL]
* [link build_system.cmake_variables.HPX_WITH_THREAD_GUARD_PAGE HPX_WITH_THREAD_GUARD_PAGE]
* [link build_system.cmake_variables.HPX_WITH_VALGRIND HPX_WITH_VALGRIND]
* [link build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS HPX_WITH_VERIFY_LOCKS]
* [link build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS_BACKTRACE HPX_WITH_VERIFY_LOCKS_BACKTRACE]
* [link build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS_GLOBALLY HPX_WITH_VERIFY_LOCKS_GLOBALLY]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_DEBUG_INFO] `HPX_WITH_THREAD_DEBUG_INFO:BOOL`][Enable thread debugging information (default: OFF, implicitly enabled in debug builds)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_DESCRIPTION_FULL] `HPX_WITH_THREAD_DESCRIPTION_FULL:BOOL`][Use function address for thread description (default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_THREAD_GUARD_PAGE] `HPX_WITH_THREAD_GUARD_PAGE:BOOL`][Enable thread guard page (default: ON)]]
        [[[#build_system.cmake_variables.HPX_WITH_VALGRIND] `HPX_WITH_VALGRIND:BOOL`][Enable Valgrind instrumentation support.]]
        [[[#build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS] `HPX_WITH_VERIFY_LOCKS:BOOL`][Enable lock verification code (default: OFF, implicitly enabled in debug builds)]]
        [[[#build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS_BACKTRACE] `HPX_WITH_VERIFY_LOCKS_BACKTRACE:BOOL`][Enable thread stack back trace being captured on lock registration (to be used in combination with HPX_WITH_VERIFY_LOCKS=ON, default: OFF)]]
        [[[#build_system.cmake_variables.HPX_WITH_VERIFY_LOCKS_GLOBALLY] `HPX_WITH_VERIFY_LOCKS_GLOBALLY:BOOL`][Enable global lock verification code (default: OFF, implicitly enabled in debug builds)]]
] [/ Debugging Options]

[#build_system.cmake_variables.Tools][h3 Tools Options]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES_HDF5 HPX_WITH_EXAMPLES_HDF5]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES_OPENMP HPX_WITH_EXAMPLES_OPENMP]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES_QT4 HPX_WITH_EXAMPLES_QT4]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES_QTHREADS HPX_WITH_EXAMPLES_QTHREADS]
* [link build_system.cmake_variables.HPX_WITH_EXAMPLES_TBB HPX_WITH_EXAMPLES_TBB]

[variablelist
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES_HDF5] `HPX_WITH_EXAMPLES_HDF5:BOOL`][Enable examples requiring HDF5 support (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES_OPENMP] `HPX_WITH_EXAMPLES_OPENMP:BOOL`][Enable examples requiring OpenMP support (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES_QT4] `HPX_WITH_EXAMPLES_QT4:BOOL`][Enable examples requiring Qt4 support (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES_QTHREADS] `HPX_WITH_EXAMPLES_QTHREADS:BOOL`][Enable examples requiring QThreads support (default: OFF).]]
        [[[#build_system.cmake_variables.HPX_WITH_EXAMPLES_TBB] `HPX_WITH_EXAMPLES_TBB:BOOL`][Enable examples requiring TBB support (default: OFF).]]
] [/ Tools Options]



[endsect] [/ Variables that influence how HPX is being built]

[section:cmake_additional_tools Additional Tools and Libraries used by HPX]

Here is a list of additional libraries and tools which are either optionally
supported by the build system or are optionally required for certain examples
or tests. These libraries and tools can be detected by the __hpx__ build
system.

Each of the tools or libraries listed here will be automatically detected if
they are installed in some standard location. If a tool or library is installed
in a different location you can specify its base directory by appending `_ROOT`
to the variable name as listed below. For instance, to configure a custom
directory for `BOOST`, specify `BOOST_ROOT=/custom/boost/root`.

[variablelist Additional Tools and Libraries used by HPX
    [[`BOOST_ROOT:PATH`]
     [Specifies where to look for the __boost__ installation to be used for
      compiling __hpx__. Set this if CMake is not able to locate a suitable
      version of __boost__. The directory specified here can be either the
      root of a installed Boost distribution or the directory where you
      unpacked and built __boost__ without installing it (with staged
      libraries).]
    ]
    [[`HWLOC_ROOT:PATH`]
     [Specifies where to look for the __hwloc__ library. While it is not
      necessary to compile __hpx__ with HWLOC, we strongly suggest you do so.
      HWLOC provides platform independent support for extracting information
      about the used hardware architecture (number of cores, number of NUMA
      domains, hyperthreading, etc.). __hpx__ utilizes this information if
      available.]
    ]
    [[`PAPI_ROOT:PATH`]
     [Specifies where to look for the __papi__ library. The PAPI library is
      necessary to compile a special component exposing PAPI hardware events and
      counters as __hpx__ performance counters. This is not available on
      the Windows platform.]
    ]
    [[`AMPLIFIER_ROOT:PATH`]
     [Specifies where to look for one of the tools of the Intel Parallel
      Studio(tm) product, either Intel Amplifier(tm) or Intel Inspector(tm).
      This should be set if the CMake variable `HPX_USE_ITT_NOTIFY` is set
      to `ON`. Enabling ITT support in __hpx__ will integrate any application
      with the mentioned Intel tools, which customizes the generated
      information for your application and improves the generated
      diagnostics.]
    ]
    [[`SODIUM_ROOT:PATH`]
     [Specifies where to look for the __sodium__ library. The Sodium library
      is necessary to enable the security related functionality (see
      `HPX_HAVE_SECURITY`).]
    ]
]

[variablelist Additional Tools and Libraries Required by some of the Examples
    [[`HDF5_ROOT:PATH`]
     [Specifies where to look for the __hdf5__ include files and libraries.]
    ]
]

[endsect]

[endsect] [/ CMake Variables used to configure HPX]
