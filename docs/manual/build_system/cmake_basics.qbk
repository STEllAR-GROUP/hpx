[/==============================================================================
    Copyright (C) 2014 Thomas Heller
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:cmake_basics CMake Basics]

__cmake__ is a cross-platform build-generator tool. CMake does not build the
project, it generates the files needed by your build tool (GNU make, Visual
Studio, etc.) for building __hpx__.

In general, the HPX __cmake__ scripts try to adhere to the general cmake policies on
how to write __cmake__ based projects.

[heading:basic_cmake_usage Basic CMake Usage]

[teletype]

This section explains basic aspects of __cmake__, mostly for explaining those
options which you may need on your day-to-day usage.

CMake comes with extensive documentation in the form of html files and on the
cmake executable itself. Execute `cmake --help` for further help options.

CMake requires to know for which build tool it shall generate files (GNU make,
Visual Studio, Xcode, etc.). If not specified on the command line, it tries to
guess it based on you environment. Once identified the build tool, CMake uses
the corresponding Generator for creating files for your build tool. You can
explicitly specify the generator with the command line option
`-G "Name of the generator"`. For knowing the available generators on your
platform, execute:
``
    cmake --help
``

This will list the generator names at the end of the help text. Generator names
are case-sensitive. Example:
``
    cmake -G "Visual Studio 9 2008" path/to/hpx
``

For a given development platform there can be more than one adequate generator.
If you use Visual Studio `"NMake Makefiles"` is a generator you can use for building
with NMake. By default, CMake chooses the more specific generator supported by
your development environment. If you want an alternative generator, you must tell
this to CMake with the `-G` option.

[heading:cmake_quick_start Quick Start]

We use here the command-line, non-interactive __cmake__ interface.

# Download and install CMake here: __cmake_download__. Version 2.8 is the
  minimally required version for __hpx__.

# Open a shell. Your development tools must be reachable from this shell through
  the PATH environment variable.

# Create a directory for containing the build. It is not supported to build
  __hpx__ on the source directory. cd to this directory:
``
    mkdir mybuilddir
    cd mybuilddir
``

# Execute this command on the shell replacing path/to/hpx/ with the path to
  the root of your __hpx__ source tree:
``
    cmake path/to/hpx
``

CMake will detect your development environment, perform a series of tests and
will generate the files required for building __hpx__. CMake will use default
values for all build parameters. See the __cmake_options__ section for
fine-tuning your build.

This can fail if CMake can't detect your toolset, or if it thinks that the
environment is not sane enough. On this case make sure that the toolset that
you intend to use is the only one reachable from the shell and that the shell
itself is the correct one for you development environment. CMake will refuse to
build MinGW makefiles if you have a POSIX shell reachable through the PATH
environment variable, for instance. You can force CMake to use various compilers
and tools. Please visit
[@http://www.cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools CMake Useful Variables]
for a detailed overview of specific __cmake__ variables.

[heading:options Options and Variables]

Variables customize how the build will be generated. Options are boolean
variables, with possible values ON/OFF. Options and variables are defined on
the CMake command line like this:
``
    cmake -DVARIABLE=value path/to/hpx
``

You can set a variable after the initial CMake invocation for changing its
value. You can also undefine a variable:
``
    cmake -UVARIABLE path/to/hpx
``

Variables are stored on the CMake cache. This is a file named CMakeCache.txt on
the root of the build directory. Do not hand-edit it.

Variables are listed here appending its type after a colon. It is correct to
write the variable and the type on the CMake command line:
``
    cmake -DVARIABLE:TYPE=value path/to/llvm/source
``

CMake supports the following variable types: `BOOL` (options), `STRING`
(arbitrary string), `PATH` (directory name), `FILEPATH` (file name).

[c++]

[endsect] [/ CMake Basics]

