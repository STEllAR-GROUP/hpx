[/==============================================================================
    Copyright (C) 2014 Thomas Heller
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:prerequisites Build Prerequisites]

[heading Supported Platforms]

At this time, __hpx__ supports the following platforms. Other platforms may
work, but we do not test __hpx__ with other platforms, so please be warned.

[table Supported Platforms for __hpx__
    [[Name     ][Recommended Version][Minimum Version   ][Architectures ]]
    [[Linux    ][3.2                ][2.6               ][x86-32, x86-64, k1om]]
    [[BlueGeneQ][V1R2M0             ][V1R2M0            ][PowerPC A2]          ]
    [[Windows  ][7, Server 2008 R2  ][Any Windows system][x86-32, x86-64]      ]
    [[Mac OSX  ][                   ][Any OSX system    ][x86-64]              ]
]

[heading Software and Libraries]

In the simplest case, __hpx__ depends on one set of libraries: __boost__. So,
before you read further, please make sure you have a recent version of
__boost__ installed on your target machine. __hpx__ currently requires at least
Boost V1.55.0 to work properly. It may build and run with older versions, but
we do not test __hpx__ with those versions, so please be warned.

Installing the Boost libraries is described in detail in Boost's own
__boost_getting_started__ document. It is often possible to download the Boost
libraries using the package manager of your distribution. Please refer to the
corresponding documentation for your system for more information.

The installation of Boost is described in detail in Boost's own
__boost_getting_started__ document. However, if you've never used the Boost
libraries (or even if you have), here's a quick primer: __boost_installation__.

In addition, we urge every user to have a recent version of hwloc installed on
the target system in order to have proper support for thread pinning and NUMA
awareness.

__hpx__ is written in 99.99% Standard C++ (the remaining 0.01% is platform specific
assembly code). As such __hpx__ is compilable with
almost any standards compliant C++ compiler. A compiler supporting the C++11
Standard is highly recommended. The code base takes advantage of C++11 language
features when available (move semantics, rvalue references, magic statics, etc.).
This may speed up the execution of your code significantly. We currently support
the following C++ compilers: GCC, MSVC, ICPC and clang. For the status of your
favorite compiler with __hpx__ visit __stellar_hpx_buildbot__.

[table Software Prerequisites for __hpx__ on Linux systems
    [[Name                       ][Recommended Version][Minimum Version ][Notes]]

    [[[*Compilers]]]
    [[__gcc__                    ][4.9 or newer     ][4.9             ]]
    [[__icpc__                   ][2014 or newer    ][2014            ]]
    [[__clang__                  ][3.4 or newer     ][3.3             ]]

    [[[*Build System]]]
    [[__cmake__                  ][3.1              ][3.0.2           ]]

    [[[*Required Libraries]]]
    [[__boost_libraries__        ][1.57.0 or newer    ][1.55.0          ]
    [[__hwloc__                  ][1.10                ][1.2 (Xeon Phi: 1.6)]
        [Used for OS-thread pinning and NUMA awareness. This library is optional on Mac OSX.]]
]

[important When compiling __hpx__ using clang/libc++ on OSX platform it is advised not
        to use Boost V1.58 or V1.60.]

[important When compiling with the Intel Compiler on Linux systems, we only support
  C++ Standard Libraries provided by gcc 4.8 and upwards. If the 'g++' in your
  path is older than 4.8, please specify the path of a newer g++ by setting
  CMAKE_CXX_FLAGS='-gxx-name=/path/to/g++' via cmake.]

[important When building Boost using gcc please note that it is always a good
      idea to specify a `cxxflags=-std=c++11` command line argument to `b2`
      (`bjam`). Note however, that this is absolutely necessary when using
      gcc V5.2 and above.]

[table Software Prerequisites for __hpx__ on Windows systems
    [[Name                       ][Recommended Version][Minimum Version ][Notes]]

    [[[*Compilers]]]
    [[__visual_cxx__ (x64)       ][2015               ][2015            ]]

    [[[*Build System]]]
    [[__cmake__                  ][3.1                ][3.0.2           ]]

    [[[*Required Libraries]]]
    [[__boost__                  ][1.57.0 or newer    ][1.55.0          ]
     [See below for an important limitation when using Boost V1.55.0.]]
    [[__hwloc__                  ][1.10                ][1.5             ]
        [Used for OS-thread pinning and NUMA awareness.]]
]

[note You need to build the following Boost libraries for __hpx__:
      Boost.DateTime, Boost.Filesystem, Boost.ProgramOptions, Boost.Regex,
      Boost.System, Boost.Thread, Boost.Chrono, and Boost.Atomic. ]

Depending on the options you chose while building and installing __hpx__,
you will find that __hpx__ may depend on several other libraries such as those
listed below.

[note In order to use a high speed parcelport, we currently recommend
      configuring HPX to use MPI so that MPI can be used for communication
      between different localities. Please set the CMake Variable MPI_CXX_COMPILER
      to your MPI C++ Compiler wrapper if not detected automatically.]

[table Highly Recommended Optional Software Prerequisites for __hpx__ on Linux systems
    [[Name                       ][Recommended Version][Minimum Version ][Notes]]

    [[__google_perftools__       ][1.7.1              ][1.7.1           ]
        [Used as a replacement for the system allocator, and for allocation
         diagnostics.]]
    [[__libunwind__              ][0.99               ][0.97            ]
        [Dependency of google-perftools on x86-64, used for stack unwinding.]]
    [[__openmpi__                ][1.10.1             ][1.8.0           ]
        [Can be used as a highspeed communication library backend for the
         parcelport.]]
]

[table Optional Software Prerequisites for __hpx__ on Linux systems
    [[Name                       ][Recommended Version][Minimum Version ][Notes]]

    [[__papi__                   ][                   ][                ]
        [Used for accessing hardware performance data.]]
    [[__jemalloc__               ][2.1.2              ][2.1.0           ]
        [Used as a replacement for the system allocator.]]
    [[__hdf5__                   ][1.8.7              ][1.6.7           ]
        [Used for data I/O in some example applications. See important note below.]]
]

[table Optional Software Prerequisites for __hpx__ on Windows systems
    [[Name                       ][Recommended Version][Minimum Version ][Notes]]

    [[__hdf5__                   ][1.8.7              ][1.6.7           ]
        [Used for data I/O in some example applications. See important note below.]]
]

[important The C++ HDF5 libraries must be compiled with enabled threadsafety
           support. This has to be explicitly specified while configuring
           the HDF5 libraries as it is not the default. Additionally, you must
           set the following environment variables before configuring the HDF5
           libraries (this part only needs to be done on Linux):

           [teletype]
           ``
               export CFLAGS='-DHDatexit=""'
               export CPPFLAGS='-DHDatexit=""'
           ``
           ]

[/////////////////////////////////////////////////////////////////////////////]
[section:boost_installation Installing Boost Libraries]

[important When building Boost using gcc please note that it is always a good
      idea to specify a `cxxflags=-std=c++11` command line argument to `b2`
      (`bjam`). Note however, that this is absolutely necessary when using
      gcc V5.2 and above.]

The easiest way to create a working Boost installation is to compile Boost from
sources yourself. This is particularly important as many high performance
resources, even if they have Boost installed, usually only provide you with an
older version of Boost. We suggest you download the most recent release of the
Boost libraries from here: __boost_downloads__. Unpack the downloaded archive
into a directory of your choosing. We will refer to this directory a `$BOOST`.

Building and installing the Boost binaries is simple, regardless what platform
you are on:

    cd $BOOST
    bootstrap --prefix=<where to install boost>
    ./b2 -j<N> --build-type=complete
    ./b2 install

where: `<where to install boost>` is the directory the built binaries will be
installed to, and `<N>` is the number of cores to use to build the Boost
binaries.

After the above sequence of commands has been executed (this may take a while!)
you will need to specify the directory where Boost was installed as `BOOST_ROOT`
(`<where to install boost>`) while executing cmake for __hpx__ as explained in
detail in the sections __unix_installation__ and __windows_installation__.

[important On Windows, depending on the installed versions of Visual Studio, you
    might also want to pass the correct toolset to the `b2` command depending on
    which version of the IDE you want to use. In addition, passing `address-model=64`
    is highly recommended.]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[endsect] [/ Prerequistes]

