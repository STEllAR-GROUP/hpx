[/==============================================================================
    Copyright (C) 2014 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/ This file has been automatically generated using the CMake tool.            /]
[/ Do not edit manually.                                                       /]

[section:cmake_toolchains CMake Toolchains shipped with HPX]

In order to compile HPX for various platforms, we provide a variety of Toolchain files that
take care of setting up various __cmake__ variables like compilers etc. They are located
in the `cmake/toolchains` directory:

* [link hpx.manual.build_system.building_hpx.cmake_toolchains.BGION_gcc BGION-gcc]
* [link hpx.manual.build_system.building_hpx.cmake_toolchains.BGQ BGQ]
* [link hpx.manual.build_system.building_hpx.cmake_toolchains.Cray_Intel Cray-Intel]
* [link hpx.manual.build_system.building_hpx.cmake_toolchains.XeonPhi XeonPhi]


[teletype]

To use them pass the `-DCMAKE_TOOLCHAIN_FILE=<toolchain>` argument to the cmake invocation.

[heading:BGION_gcc BGION-gcc]

``
    # Copyright (c) 2014 John Biddiscombe
    #
    # Distributed under the Boost Software License, Version 1.0. (See accompanying
    # file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
    # This is the default toolchain file to be used with CNK on a BlueGene/Q. It sets
    # the appropriate compile flags and compiler such that HPX will compile.
    # Note that you still need to provide Boost, hwloc and other utility libraries
    # like a custom allocator yourself.
    #
    # Usage : cmake -DCMAKE_TOOLCHAIN_FILE=~/src/hpx/cmake/toolchains/BGION-gcc.cmake ~/src/hpx
    #
    set(CMAKE_SYSTEM_NAME Linux)
    # Set the gcc Compiler
    set(CMAKE_CXX_COMPILER g++)
    set(CMAKE_C_COMPILER gcc)
    #set(CMAKE_Fortran_COMPILER)
    # Add flags we need for BGAS compilation 
    set(CMAKE_CXX_FLAGS_INIT 
      "-D__powerpc__ -D__bgion__ -I/gpfs/bbp.cscs.ch/home/biddisco/src/bgas/rdmahelper "
      CACHE STRING "Initial compiler flags used to compile for BGAS"
    )
    # the V1R2M2 includes are necessary for some hardware specific features
    #-DHPX_SMALL_STACK_SIZE=0x200000 -DHPX_MEDIUM_STACK_SIZE=0x200000 -DHPX_LARGE_STACK_SIZE=0x200000 -DHPX_HUGE_STACK_SIZE=0x200000 
    set(CMAKE_EXE_LINKER_FLAGS_INIT "-L/gpfs/bbp.cscs.ch/apps/bgas/tools/gcc/gcc-4.8.2/install/lib64 -latomic -lrt" CACHE STRING "BGAS flags")
    set(CMAKE_C_FLAGS_INIT "-D__powerpc__ -I/gpfs/bbp.cscs.ch/home/biddisco/src/bgas/rdmahelper" CACHE STRING "BGAS flags")
    # We do not perform cross compilation here ...
    set(CMAKE_CROSSCOMPILING OFF)
    # Set our platform name
    set(HPX_PLATFORM "native")
    # Disable generic coroutines (and use posix version)
    set(HPX_WITH_GENERIC_CONTEXT_COROUTINES OFF CACHE BOOL "diable generic coroutines")
    # BGAS nodes support ibverbs
    set(HPX_PARCELPORT_IBVERBS ON CACHE BOOL "")
    # Always disable the tcp parcelport as it is nonfunctional on the BGQ.
    set(HPX_PARCELPORT_TCP ON CACHE BOOL "")
    # Always enable the tcp parcelport as it is currently the only way to communicate on the BGQ.
    set(HPX_PARCELPORT_MPI ON CACHE BOOL "")
    # We have a bunch of cores on the A2 processor ...
    set(HPX_MAX_CPU_COUNT "64" CACHE STRING "")
    # We have no custom malloc yet
    if(NOT DEFINED HPX_MALLOC)
      set(HPX_MALLOC "system" CACHE STRING "")
    endif()
    set(HPX_HIDDEN_VISIBILITY OFF CACHE BOOL "")
    #
    # Convenience setup for jb @ bbpbg2.cscs.ch
    #
    set(BOOST_ROOT "/gpfs/bbp.cscs.ch/home/biddisco/apps/gcc-4.8.2/boost_1_56_0")
    set(HWLOC_ROOT "/gpfs/bbp.cscs.ch/home/biddisco/apps/gcc-4.8.2/hwloc-1.8.1")
    set(HPX_WITH_HWLOC ON CACHE BOOL "Use hwloc")
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Default build")
    #
    # Testing flags
    #
    set(BUILD_TESTING                  ON  CACHE BOOL "Testing enabled by default")
    set(HPX_BUILD_TESTS                ON  CACHE BOOL "Testing enabled by default")
    set(HPX_BUILD_TESTS_BENCHMARKS     ON  CACHE BOOL "Testing enabled by default")
    set(HPX_BUILD_TESTS_REGRESSIONS    ON  CACHE BOOL "Testing enabled by default")
    set(HPX_BUILD_TESTS_UNIT           ON  CACHE BOOL "Testing enabled by default")
    set(HPX_BUILD_TESTS_EXTERNAL_BUILD OFF CACHE BOOL "Turn off build of cmake build tests")
    set(DART_TESTING_TIMEOUT           45  CACHE STRING "Life is too short")
    #HPX_STATIC_LINKING
``

[heading:BGQ BGQ]

``
    # Copyright (c) 2014 Thomas Heller
    #
    # Distributed under the Boost Software License, Version 1.0. (See accompanying
    # file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
    #
    # This is the default toolchain file to be used with CNK on a BlueGene/Q. It sets
    # the appropriate compile flags and compiler such that HPX will compile.
    # Note that you still need to provide Boost, hwloc and other utility libraries
    # like a custom allocator yourself.
    #
    set(CMAKE_SYSTEM_NAME Linux)
    # Set the Intel Compiler
    set(CMAKE_CXX_COMPILER bgclang++11)
    set(CMAKE_C_COMPILER bgclang)
    #set(CMAKE_Fortran_COMPILER)
    set(MPI_CXX_COMPILER mpiclang++11)
    set(MPI_C_COMPILER mpiclang)
    #set(MPI_Fortran_COMPILER)
    set(CMAKE_C_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> " CACHE STRING "")
    set(CMAKE_CXX_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_CXX_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_Fortran_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_Fortran_COMPILE_OBJECT "<CMAKE_Fortran_COMPILER> -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_Fortran_LINK_EXECUTABLE "<CMAKE_Fortran_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_Fortran_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
    set(CMAKE_Fortran_CREATE_SHARED_LIBRARY "<CMAKE_Fortran_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_Fortran_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_Fortran_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> " CACHE STRING "")
    # Disable searches in the default system paths. We are cross compiling after all
    # and cmake might pick up wrong libraries that way
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    # We do a cross compilation here ...
    set(CMAKE_CROSSCOMPILING ON)
    # Set our platform name
    set(HPX_PLATFORM "BlueGeneQ")
    # Always disable the ibverbs parcelport as it is nonfunctional on the BGQ.
    set(HPX_IBVERBS_PARCELPORT OFF)
    # Always disable the tcp parcelport as it is nonfunctional on the BGQ.
    set(HPX_TCP_PARCELPORT OFF)
    # Always enable the tcp parcelport as it is currently the only way to communicate on the BGQ.
    set(HPX_MPI_PARCELPORT ON)
    # We have a bunch of cores on the BGQ ...
    set(HPX_MAX_CPU_COUNT "64")
    # We default to tbbmalloc as our allocator on the MIC
    if(NOT DEFINED HPX_MALLOC)
      set(HPX_MALLOC "system")
    endif()
``

[heading:Cray_Intel Cray-Intel]

``
    # Copyright (c) 2014 Thomas Heller
    #
    # Distributed under the Boost Software License, Version 1.0. (See accompanying
    # file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
    #
    # This is the default toolchain file to be used with Intel Xeon PHIs. It sets
    # the appropriate compile flags and compiler such that HPX will compile.
    # Note that you still need to provide Boost, hwloc and other utility libraries
    # like a custom allocator yourself.
    #
    #set(CMAKE_SYSTEM_NAME Cray-CNK-Intel)
    if(HPX_WITH_STATIC_LINKING)
      set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS FALSE)
    else()
    endif()
    # Set the Intel Compiler
    set(CMAKE_CXX_COMPILER CC)
    set(CMAKE_C_COMPILER cc)
    set(CMAKE_Fortran_COMPILER ftn)
    set(CMAKE_C_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_C_FLAGS "-fPIC -shared" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-fPIC -shared" CACHE STRING "")
    set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> -shared -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> " CACHE STRING "")
    set(CMAKE_CXX_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_CXX_FLAGS "-fPIC -shared" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "-fPIC -shared" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "-fPIC -shared" CACHE STRING "")
    set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> -shared -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_CXX_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" CACHE STRING "")
    set(CMAKE_Fortran_FLAGS_INIT "" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_Fortran_FLAGS "-fPIC" CACHE STRING "")
    set(CMAKE_SHARED_LIBRARY_CREATE_Fortran_FLAGS "-shared" CACHE STRING "")
    set(CMAKE_Fortran_COMPILE_OBJECT "<CMAKE_Fortran_COMPILER> -shared -fPIC <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "")
    set(CMAKE_Fortran_LINK_EXECUTABLE "<CMAKE_Fortran_COMPILER> -fPIC -dynamic <FLAGS> <CMAKE_Fortran_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
    set(CMAKE_Fortran_CREATE_SHARED_LIBRARY "<CMAKE_Fortran_COMPILER> -fPIC -shared <CMAKE_SHARED_LIBRARY_Fortran_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_Fortran_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> " CACHE STRING "")
    # Disable searches in the default system paths. We are cross compiling after all
    # and cmake might pick up wrong libraries that way
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    set(HPX_PARCELPORT_TCP OFF CACHE BOOL "")
    set(HPX_PARCELPORT_MPI ON CACHE BOOL "")
    set(HPX_PARCELPORT_MPI_MULTITHREADED OFF CACHE BOOL "")
    # We default to system as our allocator on the BGQ
    if(NOT DEFINED HPX_MALLOC)
      set(HPX_MALLOC "system" CACHE STRING "")
    endif()
    # We do a cross compilation here ...
    set(CMAKE_CROSSCOMPILING ON CACHE BOOL "")
``

[heading:XeonPhi XeonPhi]

``
    # Copyright (c) 2014 Thomas Heller
    #
    # Distributed under the Boost Software License, Version 1.0. (See accompanying
    # file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
    #
    # This is the default toolchain file to be used with Intel Xeon PHIs. It sets
    # the appropriate compile flags and compiler such that HPX will compile.
    # Note that you still need to provide Boost, hwloc and other utility libraries
    # like a custom allocator yourself.
    #
    set(CMAKE_SYSTEM_NAME Linux)
    # Set the Intel Compiler
    set(CMAKE_CXX_COMPILER icpc)
    set(CMAKE_C_COMPILER icc)
    set(CMAKE_Fortran_COMPILER ifort)
    # Add the -mmic compile flag such that everything will be compiled for the correct
    # platform
    set(CMAKE_CXX_FLAGS_INIT "-mmic" CACHE STRING "Initial compiler flags used to compile for the Xeon Phi")
    set(CMAKE_C_FLAGS_INIT "-mmic" CACHE STRING "Initial compiler flags used to compile for the Xeon Phi")
    set(CMAKE_Fortran_FLAGS_INIT "-mmic" CACHE STRING "Initial compiler flags used to compile for the Xeon Phi")
    # Disable searches in the default system paths. We are cross compiling after all
    # and cmake might pick up wrong libraries that way
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    # We do a cross compilation here ...
    set(CMAKE_CROSSCOMPILING ON)
    # Set our platform name
    set(HPX_PLATFORM "XeonPhi")
    # Always disable the ibverbs parcelport as it is nonfunctional on the BGQ.
    set(HPX_PARCELPORT_IBVERBS OFF CACHE BOOL "Enable the ibverbs based parcelport. This is currently an experimental feature")
    # We have a bunch of cores on the MIC ... increase the default
    set(HPX_MAX_CPU_COUNT "256" CACHE STRING "")
    # We default to tbbmalloc as our allocator on the MIC
    if(NOT DEFINED HPX_MALLOC)
      set(HPX_MALLOC "tbbmalloc" CACHE STRING "")
    endif()
    # Set the TBBMALLOC_PLATFORM correctly so that find_package(TBBMalloc) sets the
    # right hints
    set(TBBMALLOC_PLATFORM "mic" CACHE STRING "")
    set(HPX_HIDDEN_VISIBILITY OFF CACHE BOOL "Use -fvisibility=hidden for builds on platforms which support it")
``



[c++]

[endsect] [/ CMake Toolchains shipped with HPX]

