[/=============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:error_handling Error Handling]

Like in any other asynchronous invocation scheme it is important to be able to
handle error conditions occurring while the asynchronous (and possibly remote)
operation is executed. In __hpx__ all error handling is based on standard C++
exception handling. Any exception thrown during the execution of an asynchronous
operation will be transferred back to the original invocation locality, where
it is rethrown during synchronization with the calling thread.

The source code for this example can be found here:
[hpx_link examples/quickstart/error_handling.cpp..error_handling.cpp].

[c++]
[import ../../examples/quickstart/error_handling.cpp]

[heading:exceptions Working with Exceptions]

For the following description we assume that the function `raise_exception()`
is executed by invoking the plain action `raise_exception_type`:

[error_handling_raise_exception]

The exception is thrown using the macro [macroref HPX_THROW_EXCEPTION `HPX_THROW_EXCEPTION`]. The type of the
thrown exception is [classref hpx::exception `hpx::exception`]. This allows to
associate additional diagnostic information with the exception, such as file
name and line number, locality id and thread id, and stack backtrace from the
point where the exception was thrown.

Any exception thrown during the execution of an action is transferred back to
the (asynchronous) invocation site. It will be rethrown in this context when
the calling thread tries to wait for the result of the action by invoking
either `future<>::get()` or the synchronous action invocation wrapper as shown
here:

[exception_diagnostic_information]

[note The exception is transferred back to the invocation site even if it is executed
      on a different locality.]

Additionally, this example demonstrates how an exception thrown by an (possibly
remote) action can be handled. It shows the use of
[funcref hpx::diagnostic_information `hpx::diagnostic_information()`] which
retrieves all available diagnostic information from the exception as a
formatted string. This includes, for instance, the name of the source file and
line number, the sequence number of the OS-thread and the __hpx__-thread id, the
locality id and the stack backtrace of the point where the original exception
was thrown.

Under certain circumstances it is desireable to output only some of the
diagnostics, or to output those using different formatting. For this case, __hpx__
exposes a set of lower level functions as demonstrated in the following code
snippet:

[exception_diagnostic_elements]

[heading:error_code Working with Error Codes]

Most of the API functions exposed by __hpx__ can be invoked in two different
modes. By default those will throw an exception on error as described above.
However, sometimes it is desireable not to throw an exception in case of an
error condition. In this case an object instance of the `hpx::error_code` type
can be passed as the last argument to the API function. In case of an error
the error condition will be returned in that `hpx::error_code` instance. The
following example demonstrates extracting the full diagnostic information
without exception handling:

[error_handling_diagnostic_information]

[note The error information is transferred back to the invocation site even if
      it is executed on a different locality.]

This example show how an error can be handled without having to resolve to
exceptions and that the returned [classref hpx::error_code `hpx::error_code`]
instance can be used in a very similar way as the
[classref hpx::exception `hpx::exception`] type above. Simply pass it to the
[funcref hpx::diagnostic_information `hpx::diagnostic_information()`] which
retrieves all available diagnostic information from the error code instance as
a formatted string.

Under certain circumstances it is desireable to output only some of the
diagnostics, or to output those using different formatting. For this case, __hpx__
exposes a set of lower level functions as demonstrated in the following code
snippet:

[error_handling_diagnostic_elements]

For more information please refer to the documentation of
[funcref hpx::get_locality_id `hpx::get_locality_id()`],
[funcref hpx::get_host_name `hpx::get_host_name()`],
[funcref hpx::get_process_id `hpx::get_process_id()`],
[funcref hpx::get_function_name `hpx::get_function_name()`],
[funcref hpx::get_file_name `hpx::get_file_name()`],
[funcref hpx::get_line_number `hpx::get_line_number()`],
[funcref hpx::get_os_thread `hpx::get_os_thread()`],
[funcref hpx::get_thread_id `hpx::get_thread_id()`], and
[funcref hpx::get_thread_description `hpx::get_thread_description()`]
for more details.

[endsect] [/ Working with Exceptions]

