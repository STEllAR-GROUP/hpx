[/=============================================================================
    Copyright (C) 2007-2015 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:iostreams The __hpx__ I/O-streams Component]

The __hpx__ I/O-streams subsystem extends the standard C++ output streams
`std::cout` and `std::cerr` to work in the distributed setting of an __hpx__
application. All of the output streamed to `hpx::cout` will be dispatched to
`std::cout` on the console locality. Likewise, all output generated from
`hpx::cerr` will be dispatched to `std::cerr` on the console locality.

[note  All existing standard manipulators can be used in conjunction with
       `hpx::cout` and `hpx::cerr`.
       Historically, __hpx__ also defines `hpx::endl` and `hpx::flush`, but
       those are just aliases for the corresponding standard manipulators.]

In order to use either `hpx::cout` or `hpx::cerr`,  application codes need to
`#include <hpx/include/iostreams.hpp>`. For an example, please see the simplest
possible 'Hello world' program as included as an example with __hpx__:

[import ../../examples/quickstart/simplest_hello_world.cpp]

[simplest_hello_world_getting_started]

Additionally those applications need to link
with the iostreams component. When using cmake this can be achieved by using
the `COMPONENT_DEPENDENCIES` parameter, for instance:

```
    include(HPX_AddExecutable)

    add_hpx_executable(
        simplest_hello_world
        SOURCES simplest_hello_world.cpp
        COMPONENT_DEPENDENCIES iostreams
    )
```

[note The `hpx::cout` and `hpx::cerr` streams buffer all output locally until
      a `std::endl` or `std::flush` is encountered. That means that no output
      will appear on the console as long as either of those is explicitly
      used.]

[endsect]
