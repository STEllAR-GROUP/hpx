[/=============================================================================
    Copyright (C) 2007-2013 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:commandline __hpx__ Command Line Options]

The predefined command line options for any application using `hpx::init` are
described in the table below:

[/ TODO: proofread the options]
[table:commandline Default HPX Command Line Options
    [[Option]                   [Description]]
    [[[*__hpx__ options (allowed on command line only)]]]
    [[`--hpx:help`]             [print out program usage (default: this message), possible
                                 values: 'full' (additionally prints options from components)]]
    [[`--hpx:version`]          [print out __hpx__ version and copyright information]]
    [[`--hpx:info`]             [print out __hpx__ configuration information]]
    [[`--hpx:options-file arg`] [specify a file containing command line options
                                 (alternatively: @filepath)]]

    [[[*__hpx__ options (additionally allowed in an options file)]]]
    [[`--hpx:worker`]           [run this instance in worker mode]]
    [[`--hpx:console`]          [run this instance in console mode]]
    [[`--hpx:connect`]          [run this instance in worker mode, but connecting
                                 late]]
    [[`--hpx:run-agas-server`]  [run AGAS server as part of this runtime instance]]
    [[`--hpx:run-hpx-main`]     [run the hpx_main function, regardless of locality
                                 mode]]
    [[`--hpx:hpx arg`]          [the IP address the __hpx__ parcelport is listening
                                 on, expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:agas arg`]         [the IP address the AGAS root server is running on,
                                 expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:run-agas-server-only`][run only the AGAS server]]
    [[`--hpx:nodefile arg`]     [the file name of a node file to use (list of nodes, one
                                 node name per line and core)]]
    [[`--hpx:nodes arg`]        [the (space separated) list of the nodes to use (usually
                                 this is extracted from a node file)]]
    [[`--hpx:endnodes`]         [this can be used to end the list of nodes specified
                                 using the option `--hpx:nodes`]]
    [[`--hpx:ifsuffix arg`]     [suffix to append to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:ifprefix arg`]     [prefix to prepend to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:iftransform arg`]  [sed-style search and replace (s/search/replace/) used to
                                 transform host names to the proper network interconnect]]
    [[`--hpx:localities arg`]   [the number of localities to wait for at
                                 application startup (default: 1)]]
    [[`--hpx:node arg`]         [number of the node this locality is run on
                                 (must be unique)]]
    [[`--hpx:ignore-batch-env`] [ignore batch environment variables]]
    [[`--hpx:expect-connecting-localities`]
                                [this locality expects other localities to
                                 dynamically connect (this is implied if the
                                 number of initial localities is larger than 1)]]
    [[`--hpx:pu-offset`]        [the first processing unit this instance of __hpx__ should be
                                 run on (default: 0)]]
    [[`--hpx:pu-step`]          [the step between used processing unit numbers for this
                                 instance of __hpx__ (default: 1)]]
    [[`--hpx:threads arg`]      [the number of operating system threads to spawn
                                 for this __hpx__ locality (default: 1, using 'all' will
                                 spawn one thread for each processing unit)]]
    [[`--hpx:cores arg`]        [the number of cores to utilize for this __hpx__
                                 locality (default: 'all', i.e. the number of cores is based on
                                 the number of threads (`--hpx:threads`) assuming `--hpx:bind=compact`)]]
    [[`--hpx:affinity arg`]     [the affinity domain the OS threads will be confined to,
                                 possible values: pu, core, numa, machine (default: pu)]]
    [[`--hpx:bind arg`]         [the detailed affinity description for the OS threads, see
                                 [link hpx.manual.init.commandline.details the additional documentation]
                                 for a detailed description of possible
                                 values. Do not use with `--hpx:pu-step`, `--hpx:pu-offset`, or
                                 `--hpx:affinity` options. Implies `--hpx:numa-sensitive`
                                 (--hpx:bind=none disables defining thread affinities).]]
    [[`--hpx:print-bind`]       [print to the console the bit masks calculated from the
                                 arguments specified to all `--hpx:bind` options.]]
    [[`--hpx:queuing arg`]      [the queue scheduling policy to use, options are
                                 'local', 'local-priority-fifo', 'local-priority-lifo',
                                 'static', 'static-priority', 'abp-priority-fifo'
                                 and 'abp-priority-lifo' (default: local-priority-fifo)]]
    [[`--hpx:high-priority-threads arg`] [the number of operating system threads
                                 maintaining a high priority queue (default:
                                 number of OS threads), valid for
                                 `--hpx:queuing=abp-priority`, `--hpx:queuing=static-priority`
                                 and `--hpx:queuing=local-priority` only]]
    [[`--hpx:numa-sensitive`]   [makes the scheduler NUMA sensitive]]

    [[[*__hpx__ configuration options]]]
    [[`--hpx:app-config arg`]   [load the specified application configuration
                                 (ini) file]]
    [[`--hpx:config arg`]       [load the specified hpx configuration (ini) file]]
    [[`--hpx:ini arg`]          [add a configuration definition to the default
                                 runtime configuration]]
    [[`--hpx:exit`]             [exit after configuring the runtime]]

    [[[*__hpx__ debugging options]]]
    [[`--hpx:list-symbolic-names`][list all registered symbolic names after startup]]
    [[`--hpx:list-component-types`][list all dynamic component types after startup]]
    [[`--hpx:dump-config-initial`][print the initial runtime configuration]]
    [[`--hpx:dump-config`]      [print the final runtime configuration]]
    [[`--hpx:debug-hpx-log [arg]`]    [enable all messages on the __hpx__ log
                                       channel and send all __hpx__ logs to the
                                       target destination (default: cout)]]
    [[`--hpx:debug-agas-log [arg]`]   [enable all messages on the AGAS log channel
                                       and send all AGAS logs to the target
                                       destination (default: cout)]]
    [[`--hpx:debug-parcel-log [arg]`] [enable all messages on the parcel transport
                                       log channel and send all parcel transport
                                       logs to the target destination (default:
                                       cout)]]
    [[`--hpx:debug-timing-log [arg]`] [enable all messages on the timing log
                                       channel and send all timing logs to the
                                       target destination (default: cout)]]
    [[`--hpx:debug-app-log [arg]`] [enable all messages on the application log
                                    channel and send all application logs to the
                                    target destination (default: cout)]]
    [[`--hpx:debug-clp`]        [debug command line processing]]
    [[`--hpx:attach-debugger arg`] [wait for a debugger to be attached, possible arg values:
                                    `startup` or `exception` (default: startup)]]

    [[[*__hpx__ options related to performance counters]]]
    [[`--hpx:print-counter`]    [print the specified performance counter either
        repeatedly and/or at the times specified by `--hpx:print-counter-at`
        (see also option `--hpx:print-counter-interval`)]]
    [[`--hpx:print-counter-reset`] [print the specified performance counter either
        repeatedly and/or at the times specified by `--hpx:print-counter-at`,
        reset the counter after the value is queried.
        (see also option `--hpx:print-counter-interval`)]]
    [[`--hpx:print-counter-interval`][print the performance counter(s)
        specified with `--hpx:print-counter` repeatedly after the time interval
        (specified in milliseconds), (default: 0, which means print once at
        shutdown)]]
    [[`--hpx:print-counter-destination`][print the performance counter(s)
        specified with `--hpx:print-counter` to the given file (default:
        `console`)]]
    [[`--hpx:list-counters`]    [list the names of all registered performance
        counters, possible values: `minimal` (prints counter name skeletons),
        `full` (prints all available counter names)]]
    [[`--hpx:list-counter-infos`][list the description of all registered
        performance counters, possible values: `minimal` (prints info for
        counter name skeletons), 'full' (prints all available counter infos)]]
    [[`--hpx:print-counter-format`][print the performance counter(s) specified
        with `--hpx:print-counter`, possible formats in csv format with  header
        or without any header (see option `--hpx:no-csv-header`), possible
        values: `csv` (prints counter values in CSV format with full names as
        header), `csv-short` (prints counter values in CSV format with shortnames
        provided with `--hpx:print-counter` as
        `--hpx:print-counter shortname,full-countername`)]]
    [[`--hpx:no-csv-header`][print the performance counter(s) specified with
        `--hpx:print-counter` and `csv` or `csv-short` format specified with
        `--hpx:print-counter-format` without header]]
    [[`--hpx:printer-counter-at arg`][print the performance counter(s)
        specified with `--hpx:print-counter` (or `--hpx:print-counter-reset`)
        at the given point in time,
        possible argument values: `startup`, `shutdown` (default), `noshutdown`]]
    [[`--hpx:reset-counters`][reset all performance counter(s) specified with
        `--hpx:print-counter` after they have been evaluated]]
    [[`--hpx:print-counter-at`][print the performance counter(s) specified with
        `--hpx:print-counter` (or `--hpx:print-counter-reset`) at the given
        point in time, possible argument are values: 'startup',
        'shutdown' (default), 'noshutdown'.]]
    [[`--hpx:print-counters-locally`]
     [Each locality prints only its own local counters. If this is used with
      `--hpx-print-counter-destination=<file>, the code will append a
      `".<locality_id>"` to the file name in order to avoid clashes between
      localities.]]
]

[heading Command Line Argument Shortcuts]

Additionally, the following shortcuts are available from
every __hpx__ application.

[teletype]

[table Predefined command line option shortcuts
    [[Shortcut option]  [ Equivalent long option]]
    [[`-a`]               [`--hpx:agas`]]
    [[`-c`]               [`--hpx:console`]]
    [[`-h`]               [`--hpx:help`]]
    [[`-I`]               [`--hpx:ini`]]
    [[`-l`]               [`--hpx:localities`]]
    [[`-p`]               [`--hpx:app-config`]]
    [[`-q`]               [`--hpx:queuing`]]
    [[`-r`]               [`--hpx:run-agas-server`]]
    [[`-t`]               [`--hpx:threads`]]
    [[`-v`]               [`--hpx:version`]]
    [[`-w`]               [`--hpx:worker`]]
    [[`-x`]               [`--hpx:hpx`]]
    [[`-0`]               [`--hpx:node=0`]]
    [[`-1`]               [`--hpx:node=1`]]
    [[`-2`]               [`--hpx:node=2`]]
    [[`-3`]               [`--hpx:node=3`]]
    [[`-4`]               [`--hpx:node=4`]]
    [[`-5`]               [`--hpx:node=5`]]
    [[`-6`]               [`--hpx:node=6`]]
    [[`-7`]               [`--hpx:node=7`]]
    [[`-8`]               [`--hpx:node=8`]]
    [[`-9`]               [`--hpx:node=9`]]
]

[c++]

It is possible to define your own shortcut options. In fact, all of the shortcuts
listed above are pre-defined using the technique described here.
Also, it is possible to redefine any of the pre-defined shortcuts to expand
differently as well.

Shortcut options are obtained from the internal configuration database. They are
stored as key-value properties in a special properties section named
`hpx.commandline`. You can define your own shortcuts by adding the corresponding
definitions to one of the `ini` configuration files as described in the section
__configuration__. For instance, in order to define a command line shortcut
`--pc` which should expand to `--hpx:print-counter`, the following configuration
information needs to be added to one of the `ini` configuration files:
``
    [hpx.commandline.aliases]
    --pc = --hpx:print-counter
``
[teletype]
[note Any arguments for shortcut options passed on the command line are retained
      and passed as arguments to the corresponding expanded option. For instance,
      given the definition above, the command line option

          `--pc=/threads{locality#0/total}/count/cumulative`

      would be expanded to

          `--hpx:print-counter=/threads{locality#0/total}/count/cumulative`
      ]

[important Any shortcut option should either start with
      a single `'-'` or with two `'--'` characters. Shortcuts starting with a
      single `'-'` are interpreted as short options (i.e. everything after the
      first character following the `'-'` is treated as the argument). Shortcuts
      starting with `'--'` are interpreted as long options. No other shortcut
      formats are supported.]
[c++]

[heading Specifying Options for Single Localities Only]

For runs involving more than one locality it is sometimes desirable to supply
specific command line options to single localities only. When the
__hpx__ application is launched using a scheduler (like PBS, for more details
see section __using_pbs__), specifying dedicated command line options for single
localities may be desirable. For this reason all of the command line
options which have the general format `--hpx:<some_key>` can be used in a more
general form: `--hpx:<N>:<some_key>`, where <N> is the number of the locality
this command line options will be applied to, all other localities will simply
ignore the option. For instance, the following PBS script passes the option
[hpx_cmdline `--hpx:pu-offset=4`] to the locality `'1'` only.

[teletype]
```
    #!/bin/bash
    #
    #PBS -l nodes=2:ppn=4

    APP_PATH=~/packages/hpx/bin/hello_world
    APP_OPTIONS=

    __pbsdsh__ -u $APP_PATH $APP_OPTIONS ``[hpx_cmdline --hpx:1:pu-offset=4]`` ``[hpx_cmdline --hpx:nodes]``=`cat $PBS_NODEFILE`
```

[caution If the first application specific argument (inside `$APP_OPTIONS`)
         is a non-option (i.e. does not start with a '`-`' or a '`--`', then it
         must be placed before the option [hpx_cmdline --hpx:nodes], which,
         in this case, should be the last option on the command line.

         Alternatively, use the option [hpx_cmdline --hpx:endnodes] to explicitly
         mark the end of the list of node names:
         ```
         __pbsdsh__ -u $APP_PATH ``[hpx_cmdline --hpx:1:pu-offset=4]`` ``[hpx_cmdline --hpx:nodes]``=`cat $PBS_NODEFILE` ``[hpx_cmdline --hpx:endnodes] ``$APP_OPTIONS
         ```
         ]

[c++]

[/////////////////////////////////////////////////////////////////////////////]
[section:details More Details about __hpx__ Command Line Options]

This section documents the following list of the command line options in more
detail:

* [link hpx.manual.init.commandline.details.bind `--hpx:bind`]

[heading:bind The Command Line Option `--hpx:bind`]

This command line option allows one to specify the required affinity of the __hpx__
worker threads to the underlying processing units. As a result the worker
threads will run only on the processing units identified by the corresponding
bind specification. The affinity settings are to be specified using
`--hpx:bind=<BINDINGS>`, where `<BINDINGS>` have to be formatted as described
below.

In addition to the syntax described below one can use `--hpx:bind=none` to
disable all binding of any threads to a particular core. This is mostly
supported for debugging purposes.

The specified affinities refer to specific regions within a machine hardware
topology. In order to understand the hardware topology of a particular machine
it may be useful to run the lstopo tool which is part of __hwloc__ to see the
reported topology tree. Seeing and understanding a topology tree will definitely
help in understanding the concepts that are discussed below.

Affinities can be specified using HWLOC (__hwloc__) tuples.
Tuples of HWLOC /objects/ and associated /indexes/ can be
specified in the form `object:index`, `object:index-index`, or
`object:index,...,index`. HWLOC objects  represent types of mapped items in
a topology tree. Possible values for objects are `socket`, `numanode`, `core`,
and `pu` (processing unit). Indexes are non-negative integers that specify a
unique physical object in a topology tree using its logical sequence number.

Chaining multiple tuples together in the more general form
`object1:index1[.object2:index2[...]]` is permissible. While the first tuple's
object may appear anywhere in the topology, the Nth tuple's object must have
a shallower topology depth than the (N+1)th tuple's object. Put simply: as
you  move right in a tuple chain, objects must go deeper in the topology tree.
Indexes specified in chained tuples are relative to the scope of the parent
object. For example, `socket:0.core:1` refers to the second core in the first
socket (all indices are zero based).

Multiple affinities can be specified using several `--hpx:bind` command line
options or by appending several affinities separated by a `';'`. By default,
if multiple affinities are specified, they are added.

[/
  If prefixed with `"~"`, the given affinity will be cleared instead of added to
  the current list of locations. If prefixed with `"x"`, the given location will
  be and'ed instead of added to the current list. If prefixed with `"^"`, the
  given location will be xor'ed.
]

[teletype]

`"all"` is a special affinity consisting in the entire current topology.

[note All 'names' in an affinity specification, such as `thread`, `socket`,
      `numanode`, `pu`, or `all` can be abbreviated. Thus the affinity
      specification `threads:0-3=socket:0.core:1.pu:1` is fully equivalent to
      its shortened form `t:0-3=s:0.c:1.p:1`.]

Here is a full grammar describing the possible format of mappings:

    mappings:
        distribution
        mapping(;mapping)*

    distribution:
        'compact'
        'scatter
        'balanced'

    mapping:
        thread-spec=pu-specs

    thread-spec:
        'thread':range-specs

    pu-specs:
        pu-spec(.pu-spec)*

    pu-spec:
        type:range-specs
        ~pu-spec

    range-specs:
        range-spec(,range-spec)*

    range-spec:
        int
        int-int
        'all'

    type:
        'socket' | 'numanode'
        'core'
        'pu'

The following example assumes a system with at least 4 cores, where each core has more
than 1 processing unit (hardware threads). Running hello_world with 4 OS-threads
(on 4 processing units), where each of those threads is bound to the first processing
unit of each of the cores, can be achieved by invoking:

    hello_world -t4 --hpx:bind=thread:0-3=core:0-3.pu:0

Here `thread:0-3` specifies the OS threads for which to define affinity bindings, and
`core:0-3.pu:0` defines that for each of the cores (`core:0-3`) only their first
processing unit (`pu:0`) should be used.


[c++]

[note The command line option `--hpx:print-bind` can be used to print the
      bitmasks generated from the affinity mappings as specified with
      `--hpx:bind`. For instance, on a system with hyperthreading enabled (i.e.
      2 processing units per core), the command line:[teletype]
      ``
          hello_world -t4 --hpx:bind=thread:0-3=core:0-3.pu:0 --hpx:print-bind
      ``
      will cause this output to be printed:
      ``
          0: PU L#0(P#0), Core L#0, Socket L#0, Node L#0(P#0)
          1: PU L#2(P#2), Core L#1, Socket L#0, Node L#0(P#0)
          2: PU L#4(P#4), Core L#2, Socket L#0, Node L#0(P#0)
          3: PU L#6(P#6), Core L#3, Socket L#0, Node L#0(P#0)
      ``
      [c++]where each bit in the bitmasks corresponds to a processing unit the listed
      worker thread will be bound to run on.]

The difference between the three possible predefined distribution schemes (`compact`,
`scatter`, and `balanced`) is best explained with an example. Imagine that we have a system with 4
cores and 4 hardware threads per core. If we place 8 threads the assignments produced by the `compact`,
`scatter`, and `balanced` types are shown in eh figure below. Notice that `compact` does not fully
utilize all the cores in the system. For this reason it is recommended that applications are run using
the `scatter` or `balanced` options in most cases.

[fig affinities.png..Schematic of thread affinity type distributions..commandline.affinities]

[endsect]

[endsect] [/ Command Line Handling]

