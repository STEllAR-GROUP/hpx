[/=============================================================================
    Copyright (C) 2007-2013 Hartmut Kaiser
    Copyright (C) 2012 Bryce Adelstein-Lelbach

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:applying_actions Applying Actions]

[section:action_type_definition Action Type Definition]

Actions are special types we use to describe possibly remote operations. For
every global function and every member function which has to be invoked
distantly, a special type must be defined. For any global function the special
macro [macroref HPX_PLAIN_ACTION `HPX_PLAIN_ACTION`] can be used to define
the action type. Here is an example demonstrating this:

    namespace app
    {
        void some_global_function(double d)
        {
            cout << d;
        }
    }

    // This will define the action type 'some_global_action' which represents
    // the function 'app::some_global_function'.
    ``[macroref HPX_PLAIN_ACTION `HPX_PLAIN_ACTION`]``(app::some_global_function, some_global_action);

[important The macro [macroref HPX_PLAIN_ACTION `HPX_PLAIN_ACTION`] has to be
           placed in global namespace,
           even if the wrapped function is located in some other namespace. The
           newly defined action type is placed the in global namespace
           as well.]

If the action type should be defined somewhere not in global namespace, the
action type definition has to be split into two macro invocations
([macroref HPX_DEFINE_PLAIN_ACTION `HPX_DEFINE_PLAIN_ACTION`] and
[macroref HPX_REGISTER_PLAIN_ACTION `HPX_REGISTER_PLAIN_ACTION`]) as shown in
the next example:

    namespace app
    {
        void some_global_function(double d)
        {
            cout << d;
        }

        // On conforming compilers the following macro expands to:
        //
        //    typedef hpx::actions::make_action<
        //        decltype(&some_global_function), &some_global_function
        //    >::type some_global_action;
        //
        // This will define the action type 'some_global_action' which represents
        // the function 'some_global_function'.
        ``[macroref HPX_DEFINE_PLAIN_ACTION `HPX_DEFINE_PLAIN_ACTION`]``(some_global_function, some_global_action);
    }

    // The following macro expands to a series of definitions of global objects
    // which are needed for proper serialization and initialization support
    // enabling the remote invocation of the function `some_global_function`.
    ``[macroref HPX_REGISTER_PLAIN_ACTION `HPX_REGISTER_PLAIN_ACTION`]``(app::some_global_action);

The shown code defines an action type `some_global_action` inside the namespace
`app`.

[important If the action type definition is split between two macros as shown
           above, the name of the action type to create has to be the same for
           both macro invocations (here `some_global_action`).]

For member functions of objects which have been registered with AGAS (e.g.
'components') a different registration macro
[macroref HPX_DEFINE_COMPONENT_ACTION `HPX_DEFINE_COMPONENT_ACTION`] has
to be utilized. Any component needs to be declared in a header file and have
some special support macros defined in a source file. Here is an example
demonstrating this. The first snippet has to go into the header file:

    namespace app
    {
        struct some_component
          : hpx::components::simple_component_base<some_component>
        {
            int some_member_function(std::string s)
            {
                return boost::lexical_cast<int>(s);
            }

            // This will define the action type 'some_member_action' which
            // represents the member function 'some_member_function' of the
            // obect type 'some_component'.
            ``[macroref HPX_DEFINE_COMPONENT_ACTION `HPX_DEFINE_COMPONENT_ACTION`]``(some_component, some_member_function,
                some_member_action);
        };
    }

    // Note: The second arguments to the macro below have to be systemwide-unique
    //       C++ identifiers
    ``[macroref HPX_REGISTER_ACTION_DECLARATION
    `HPX_REGISTER_ACTION_DECLARATION`]``(app::some_component::some_member_action , some_component_some_action );

The next snippet belongs to the source file (e.g. the main application in the most simple case:

    typedef hpx::components::simple_component< app::some_component > component_type;
    typedef app::some_component some_component;

    HPX_REGISTER_MINIMAL_COMPONENT_FACTORY( component_type, some_component );

    // The parameters for this macro have to be the same as used in the corresponding
    // HPX_REGISTER_ACTION_DECLARATION() macro invocation above
    typedef some_component::some_member_action some_component_some_action;
    HPX_REGISTER_ACTION( some_component_some_action );

Granted, these macro invocations are a bit more complex than for simple global
functions, however we believe they are still manageable.

The most important macro invocation is the
[macroref HPX_DEFINE_COMPONENT_ACTION `HPX_DEFINE_COMPONENT_ACTION`]
in the header file as this defines the action type we need to invoke the
member function. For a complete example of a simple component action see 
[hpx_link examples/quickstart/component_in_executable.cpp..component_in_executable.cpp]

[endsect] [/ Action Type Definition]

[section:action_invocation Action Invocation]

The process of invoking a global function (or a member function of an object)
with the help of the associated action is called 'applying the action'. Actions
can have arguments, which will be supplied while the action is applied. At the
minimum, one parameter is required to apply any action - the id of the locality
the associated function should be invoked on (for global functions), or the id
of the component instance (for member functions). Generally, __hpx__ provides
several ways to apply an action, all of which are described in the following sections.

[def __apply__          [link hpx.manual.applying_actions.action_invocation.apply Applying an Action Asynchronously without any Synchronization]]
[def __async__          [link hpx.manual.applying_actions.action_invocation.async Applying an Action Asynchronously with Synchronization]]
[def __apply_continue__ [link hpx.manual.applying_actions.action_invocation.async_continue Applying an Action with a Continuation but without any Synchronization]]
[def __async_continue__ [link hpx.manual.applying_actions.action_invocation.apply_continue Applying an Action with a Continuation and with Synchronization]]
[def __sync__           [link hpx.manual.applying_actions.action_invocation.sync Applying an Action Synchronously]]

__hpx__ allows to apply any action with a syntax which is very close to the
standard C++ way of invoking functions. In fact, all action types have an
overloaded function operator allowing to synchronously apply the action. Further,
__hpx__ implements `hpx::async`, which semantically works similar to the
way `std::async` works for plain C++ function.

[note The similarity of applying an action to conventional function invocations
      extends even further. __hpx__ implements `hpx::bind` and `hpx::function`:
      two facilities which are semantically equivalent to the `std::bind` and
      `std::function` types as defined by the C++11 Standard. While `hpx::async`
      extends beyond the conventional semantics by supporting actions and
      conventional C++ functions, the __hpx__ facilities `hpx::bind` and
      `hpx::function` extend beyond the conventional standard facilities too. The
      __hpx__ facilities not only support conventional functions, but can be
      used for actions as well.]

Additionally, __hpx__ exposes `hpx::apply` and `hpx::async_continue`, both of which refine
and extend the standard C++ facilities.

[//////////////////////////////////////////////////////////////////////////////]
[section:apply Applying an Action Asynchronously without any Synchronization]

This method ('fire and forget') will make sure the function associated with
the action is scheduled to run on the target locality. Applying the action
does not wait for the function to start running, instead it is a fully
asynchronous operation. The following example shows how to apply the action
as defined [link hpx.manual.applying_actions.action_type_definition in the previous section]
on the local locality (the locality this code runs on):

    some_global_action act;     // define an instance of some_global_action
    hpx::apply(act, hpx::find_here(), 2.0);

(the function `hpx::find_here()` returns the id of the local locality, i.e. the
locality this code executes on).

Any component member function can be invoked using the same syntactic
construct. Given that `id` is the global address for a component instance
created earlier, this invocation looks like:

    some_component_action act;     // define an instance of some_component_action
    hpx::apply(act, id, "42");

In this case any value returned from this action (e.g. in this case the
integer `42`) is ignored. Please look at __action_type_definition__ for the
code defining the component action (`some_component_action`) used.

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:async Applying an Action Asynchronously with Synchronization]

This method will make sure the action is scheduled to run on the target locality.
Applying the action itself does not wait for the function to start running or
to complete, instead this is a fully asynchronous operation similar to using
`hpx::apply` as described above. The difference is that this method will return
an instance of a `hpx::future<>` encapsulating the result of the (possibly
remote) execution. The future can be used to synchronize with the asynchronous
operation. The following example shows how to apply the action from above on
the local locality:

    some_global_action act;     // define an instance of some_global_action
    hpx::future<void> f = hpx::async(act, hpx::find_here(), 2.0);
    //
    // ... other code can be executed here
    //
    f.get();    // this will possibly wait for the asyncronous operation to 'return'

(as before, the function `hpx::find_here()` returns the id of the local
locality (the locality this code is executed on).

[note The use of a `hpx::future<void>` allows to synchronize with any remote
      operation not returning any value.]

[note Any `std::future<>` returned from `std::async()` is required to block in its
      destructor if the value has not been set for this future yet. This is not
      true for `hpx::future<>` which will never block in its destriuctor, even
      if the value has not been returned to the future yet. We believe that
      consistency in the behavior of futures is more important than standards
      conformance in this case.]

Any component member function can be invoked using the same syntactic
construct. Given that `id` is the global address for a component instance
created earlier, this invocation looks like:

    some_component_action act;     // define an instance of some_component_action
    hpx::future<int> f = hpx::async(act, id, "42");
    //
    // ... other code can be executed here
    //
    cout << f.get();    // this will possibly wait for the asyncronous operation to 'return' 42

[note The invocation of `f.get()` will return the result immediately (without
      suspending the calling thread) if the result from the asynchronous operation
      has already been returned. Otherwise, the invocation of `f.get()` will suspend
      the execution of the calling thread until the asynchronous operation returns
      its result.]

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:sync Applying an Action Synchronously]

This method will schedule the function wrapped in the specified action on the
target locality. While the invocation appears to be synchronous (as we will
see), the calling thread will be suspended while waiting for the function to
return. Invoking a plain action (e.g. a global function) synchronously is
straightforward:

    some_global_action act;     // define an instance of some_global_action
    act(hpx::find_here(), 2.0);

While this call looks just like a normal synchronous function invocation, the
function wrapped by the action will be scheduled to run on a new thread and the
calling thread will be suspended. After the new thread has executed the
wrapped global function, the waiting thread will resume and return from the
synchronous call.

Equivalently, any action wrapping a component member function can be invoked
synchronously as follows:

    some_component_action act;     // define an instance of some_component_action
    int result = act(id, "42");

The action invocation will either schedule a new thread locally to execute the
wrapped member function (as before, `id` is the global address of the component
instance the member function should be invoked on), or it will send a parcel to
the remote locality of the component causing a new thread to be scheduled there.
The calling thread will be suspended until the function returns its result.
This result will be returned from the synchronous action invocation.

It is very important to understand that this 'synchronous' invocation syntax
in fact conceals an asynchronous function call. This is beneficial as the
calling thread is suspended while waiting for the outcome of a potentially remote
operation. The __hpx__ thread scheduler will schedule other work in the mean
time, allowing the application to make further progress while the remote result
is computed. This helps overlapping computation with communication and hiding
communication latencies.

[note The syntax of applying an action is always the same, regardless whether
      the target locality is remote to the invocation locality or not. This
      is a very important feature of __hpx__ as it frees the user from the task
      of keeping track what actions have to be applied locally and which
      actions are remote.
      If the target for applying an action is local, a new thread is
      automatically created and scheduled. Once this thread is scheduled and
      run, it will execute the function encapsulated by that action. If the
      target is remote, __hpx__ will send a parcel to the remote locality which
      encapsulates the action and its parameters. Once the parcel is received
      on the remote locality __hpx__ will create and schedule a new thread
      there. Once this thread runs on the remote locality, it will execute the
      function encapsulated by the action.]

[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:async_continue Applying an Action with a Continuation but without any Synchronization]

This method is very similar to the method described in section __apply__. The main
difference is that it allows to chain a sequence of asynchronous operations, while
handing the (intermediate) results from one step to the next step in the chain.
Where `hpx::apply` invokes a single function using 'fire and forget' semantics,
`hpx::apply_continue` allows to asynchronously trigger a chain of functions 
asynchronously, without the need for the execution flow 'to come back' to the 
invocation site. Each of the asynchronous functions can be executed on a different 
locality.


[endsect]

[//////////////////////////////////////////////////////////////////////////////]
[section:apply_continue Applying an Action with a Continuation and with Synchronization]

This method is very similar to the method described in section __async__. In
addition to what `hpx::async` can do, the functions `hpx::async_continue` takes
an additional function argument. This function will be called as the continuation
of the executed action. It is expected to perform additional operations and to
make sure that a result is returned to the original invocation site. This method
allows to chain operations asynchronously by providing a continuation operation
which is automatically executed once the first action has finished executing.

As an example we chain two actions, where the result of the first action is
forwarded to the second action and the result of the second action is sent back
to the original invocation site:

    // first action
    boost::int32_t action1(boost::int32_t i)
    {
        return i+1;
    }
    HPX_PLAIN_ACTION(action1);    // defines action1_type

    // second action
    boost::int32_t action2(boost::int32_t i)
    {
        return i*2;
    }
    HPX_PLAIN_ACTION(action2);    // defines action2_type

    // this code invokes 'action1' above and passes along a continuation
    // function which will forward the result returned from 'action1' to
    // 'action2'.
    action1_type act1;     // define an instance of 'action1_type'
    action2_type act2;     // define an instance of 'action2_type'
    hpx::future<int> f =
        hpx::async_continue(act1, hpx::find_here(), 42,
            hpx::make_continuation(act2));
    hpx::cout << f.get() << "\n";   // will print: 86 ((42 + 1) * 2)

By default, the continuation is executed on the same locality as
`hpx::async_continue` is invoked from. If you want to specify the locality where
the continuation should be executed, the code above has to be written as:

    // this code invokes 'action1' above and passes along a continuation
    // function which will forward the result returned from 'action1' to
    // 'action2'.
    action1_type act1;     // define an instance of 'action1_type'
    action2_type act2;     // define an instance of 'action2_type'
    hpx::future<int> f =
        hpx::async_continue(act1, hpx::find_here(), 42,
            hpx::make_continuation(act2, hpx::find_here()));
    hpx::cout << f.get() << "\n";   // will print: 86 ((42 + 1) * 2)

Similarily, it is possible to chain more than 2 operations:

    action1_type act1;     // define an instance of 'action1_type'
    action2_type act2;     // define an instance of 'action2_type'
    hpx::future<int> f =
        hpx::async_continue(act1, hpx::find_here(), 42,
            hpx::make_continuation(act2,
                hpx::make_continuation(act1)));
    hpx::cout << f.get() << "\n";   // will print: 87 ((42 + 1) * 2 + 1)

The function `hpx::make_continuation` creates a special function object
which exposes the following prototype:

    struct continuation
    {
        template <typename Result>
        void operator()(hpx::id_type id, Result&& result) const
        {
            ...
        }
    };

where the parameters passed to the overloaded function operator (`operator()()`)
are:

* the `id` is the global id where the final result of the asynchronous chain of
  operations should be sent to (in most cases this is the id of the `hpx::future`
  returned from the initial call to `hpx::async_continue`). Any custom continuation
  function should make sure this `id` is forwarded to the last operation in the
  chain.
* the `result` is the result value of the current operation in the asynchronous
  execution chain. This value needs to be forwarded to the next operation.

[note All of those operations are implemented by the predefined continuation
      function object which is returned from `hpx::make_continuation`. Any (custom)
      function object used as a continuation should conform to the same interface.]

[endsect]

[section:compare Comparing Actions with C++ Functions]

As mentioned above, __hpx__ actions are very similar to 'normal' C++ functions
except that actions can be invoked remotely. The following table compares the
way C++ functions can be invoked with the syntax used to apply an __hpx__
action. This table assumes that `func` is an arbitrary C++ function or function
object and `act` is an instance of an __hpx__ action. `R` stands for an
arbitrary result type.

[table Comparing C++ Functions and __hpx__ Actions
    [[Invocation] [C++ Function] [__hpx__ Action]]
    [[Apply (fire & forget)]
     [`hpx::apply(func, ...);`]
     [`hpx::apply(act, id, ...);`]
    ]
    [[Asynchronous]
     [``
        std::future<R> f = std::async(func, ...);
        R r = f.get();

        hpx::future<R> f = hpx::async(func, ...);
        R r = f.get();
     ``]
     [``
        hpx::future<R> f = hpx::async(act, id, ...);
        R r = f.get();
     ``]
    ]
    [[Synchronous]
     [`R r = f(...)`]
     [`R r = act(id, ...)`]
    ]
]

[endsect]

[endsect] [/ Action Invocation]

[section:action_error_handling Action Error Handling]

Like in any other asynchronous invocation scheme it is important to be able to
handle error conditions occurring while the asynchronous (and possibly remote)
operation is executed. In __hpx__ all error handling is based on standard C++
exception handling. Any exception thrown during the execution of an asynchronous
operation will be transferred back to the original invocation locality, where
it is rethrown during synchronization with the calling thread.

[important Exceptions thrown during asynchronous execution can be transferred
           back to the invoking thread only for the synchronous and the
           asynchronous case with synchronization. Like with any other
           unhandled exception, any exception thrown during
           the execution of an asynchronous action /without/ synchronization
           will result in calling `hpx::terminate`, causing the running
           application to exit immediately.]

[note      Even if error handling internally relies on exceptions, most of the
           API functions exposed by __hpx__ can be used without throwing an
           exception. Please see __exceptions__ for more information.]

As an example, we will assume that the following remote function will be
executed:

    namespace app
    {
        void some_function_with_error(int arg)
        {
            if (arg < 0) {
                ``[macroref HPX_THROW_EXCEPTION `HPX_THROW_EXCEPTION`]``(bad_argument, "some_function_with_error",
                    "some really bad error happened");
            }
            // do something else...
        }
    }

    // This will define the action type 'some_error_action' which represents
    // the function 'app::some_function_with_error'.
    ``[macroref HPX_PLAIN_ACTION `HPX_PLAIN_ACTION`]``(app::some_function_with_error, some_error_action);

The use of [macroref HPX_THROW_EXCEPTION `HPX_THROW_EXCEPTION`] to report the error encapsulates the creation
of a [classref hpx::exception `hpx::exception`] which is initialized with the error code
`hpx::bad_parameter`. Additionally it carries the passed strings, the
information about the file name, line number, and call stack of the point the
exception was thrown from.

We invoke this action using the synchronous syntax as described before:

    // note: wrapped function will throw hpx::exception
    some_error_action act;            // define an instance of some_error_action
    try {
        act(hpx::find_here(), -3);    // exception will be rethrown from here
    }
    catch (``[classref hpx::exception `hpx::exception`]`` const& e) {
        // prints: 'some really bad error happened: HPX(bad parameter)'
        cout << e.what();
    }

If this action is invoked asynchronously with synchronization, the exception
is propagated to the waiting thread as well and is re-thrown from the future's
function `get()`:

    // note: wrapped function will throw hpx::exception
    some_error_action act;            // define an instance of some_error_action
    hpx::future<void> f = hpx::async(act, hpx::find_here(), -3);
    try {
        f.get();                      // exception will be rethrown from here
    }
    catch (``[classref hpx::exception `hpx::exception`]`` const& e) {
        // prints: 'some really bad error happened: HPX(bad parameter)'
        cout << e.what();
    }

For more information about error handling please refer to the section
__exceptions__. There we also explain how to handle error conditions without
having to rely on exception.

[endsect] [/ Action Exception Handling]

[endsect] [/ Applying Actions]


