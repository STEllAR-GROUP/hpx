[/=============================================================================
    Copyright (C) 2007-2013 Hartmut Kaiser
    Copyright (C) 2011-2012 Bryce Adelstein-Lelbach

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:init Launching __hpx__]

[/////////////////////////////////////////////////////////////////////////////]
[section:configuration Configure __hpx__ Applications]

All __hpx__ applications can be configured using special command line options
and/or using special configuration files. This section describes the available
options, the configuration file format, and the algorithm used to locate
possible predefined configuration files. Additionally this section describes
the defaults assumed if no external configuration information is supplied.

During startup any __hpx__ application applies a predefined search pattern to
locate one or more configuration files. All found files will be read and merged
in the sequence they are found into one single internal database holding
all configuration properties. This database is used during the execution of the
application to configure different aspects of the runtime system.

In addition to the ini files, any application can supply its own configuration
files, which will be merged with the configuration database as well. Moreover,
the user can specify additional configuration parameters on the command
line when executing an application. The __hpx__ runtime system will merge all
command line configuration options (see the description of the
[hpx_cmdline `--hpx::ini`], [hpx_cmdline `--hpx:config`], and
[hpx_cmdline `--hpx::app-config`] command line options).


[/////////////////////////////////////////////////////////////////////////////]
[section:ini_format The __hpx__ INI File Format]

All __hpx__ applications can be configured using a special file format which is
similar to the well known __ini_file_format__. This is a structured text format
allowing to group key/value pairs (properties) into sections. The basic element
contained in an ini file is the property. Every property has a name and a
value, delimited by an equals sign (`'='`). The name appears to the left of the
equals sign:
``
    name=value
``
The value may contain equal signs as only the first `'='` character
is interpreted as the delimiter between `name` and `value`. Whitespace before
the name, after the value and immediately before and after the delimiting equal
sign is ignored. Whitespace inside the value is retained.

Properties may be grouped into arbitrarily named sections. The section name
appears on a line by itself, in square brackets (`[` and `]`). All properties
after the section declaration are associated with that section. There is no
explicit "end of section" delimiter; sections end at the next section
declaration, or the end of the file
``
    [section]
``
In __hpx__ sections can be nested. A nested section has a name composed of
all section names it is embedded in. The section names are concatenated using
a dot (`'.'`):
``
    [outer_section.inner_section]
``
Here `inner_section` is logically nested within `outer_section`.

It is possible to use the full section name concatenated with the property
name to refer to a particular property. For example in:
``
    [a.b.c]
    d = e
``
the property value of `d` can be referred to as `a.b.c.d=e`.

In __hpx__ ini files can contain comments. Hash signs (`'#'`) at the beginning
of a line indicate a comment. All characters starting with the `'#'` until the
end of line are ignored.

If a property with the same name is reused inside a section, the second
occurrence of this property name will override the first occurrence (discard the
first value). Duplicate sections simply merge their properties together, as if
they occurred contiguously.

[teletype]
In __hpx__ ini files, a property value `${FOO:default}` will use the environmental
variable `FOO` to extract the actual value if it is set and `default` otherwise.
No default has to be specified. Therefore `${FOO}` refers to the environmental
variable `FOO`. If `FOO` is not set or empty the overall expression will evaluate
to an empty string. A property value `$[section.key:default]` refers to the value
held by the property `section.key` if it exists and `default` otherwise. No
default has to be specified. Therefore `$[section.key]` refers to the property
`section.key`. If the property `section.key` is not set or empty, the overall
expression will evaluate to an empty string.

[note Any property `$[section.key:default]` is evaluated whenever it is queried
      and not when the configuration data is initialized. This allows for lazy
      evaluation and relaxes initialization order of different sections. The
      only exception are recursive property values, e.g. values referring to
      the very key they are associated with. Those property values are evaluated
      at initialization time to avoid infinite recursion.]
[c++]

[endsect] [/ The __hpx__ INI File Format]

[/////////////////////////////////////////////////////////////////////////////]
[section:config_defaults Built-in Default Configuration Settings]

During startup any __hpx__ application applies a predefined search pattern to
locate one or more configuration files. All found files will be read and merged
in the sequence they are found into one single internal data structure holding
all configuration properties.

As a first step the internal configuration database is filled with a set of
default configuration properties. Those settings are described on a section
by section basis below.

[note You can print the default configuration settings used for an executable
      by specifying the command line option [hpx_cmdline `--hpx:dump-config`].]

['[*The `system` Configuration Section]]

[teletype]
``
    [system]
    pid = <process-id>
    prefix = <current prefix path of core HPX library>
    executable = <current prefix path of executable>
``
[c++]

[table:ini_system
    [[Property]         [Description]                                 [Remark]]
    [[`system.pid`]
     [This is initialized to store the current OS-process id of the application
      instance]
     [dynamic information]]
    [[`system.prefix`]
     [This is initialized to the base directory __hpx__ has been loaded from.]
     [dynamic information]]
    [[`system.executable_prefix`]
     [This is initialized to the base directory the current executable has been
      loaded from.]
     [dynamic information]]
]

['[*The `hpx` Configuration Section]]

[teletype]
``
    [hpx]
    location = ${HPX_LOCATION:$[system.prefix]}
    component_path = $[hpx.location]/lib/hpx:$[system.executable_prefix]/lib/hpx
    master_ini_path = $[hpx.location]/share/hpx-<version>
    ini_path = $[hpx.master_ini_path]/ini
    os_threads = 1
    localities = 1
    program_name =
    cmd_line =

    [hpx.stacks]
    small_size = ${HPX_SMALL_STACK_SIZE:<hpx_small_stack_size>}
    medium_size = ${HPX_MEDIUM_STACK_SIZE:<hpx_medium_stack_size>}
    large_size = ${HPX_LARGE_STACK_SIZE:<hpx_large_stack_size>}
    huge_size = ${HPX_HUGE_STACK_SIZE:<hpx_huge_stack_size>}
    use_guard_pages = ${HPX_USE_GUARD_PAGES:1}
``
[c++]

[table:ini_hpx
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.location`]
     [This is initialized to the id of the locality this application instance
      is running on.]
     [dynamic information]]
    [[`hpx.component_path`]
     [This is initialized to the list of directories where the __hpx__ runtime
      library will look for installed components. Duplicates are discarded.]
     [static information]]
    [[`hpx.master_ini_path`]
     [This is initialized to the default path of the main hpx.ini configuration
      file]
     [static information, depends on __hpx__'s installation path]]
    [[`hpx.ini_path`]
     [This is initialized to the default path where __hpx__ will look for more
      ini configuration files. The value of this property will be interpreted
      as a list of directories delited by `':'` (on Windows `';'`), each of
      which will be scanned for ini files.]
     [static information, depends on __hpx__'s installation path]]
    [[`hpx.os_threads`]
     [This setting reflects the number of OS-threads used for running
      __hpx__-threads.]
     [static information, usually depends on command line options and/or
      environment setting (for PBS and SLURM), by default it is set to `1`]]
    [[`hpx.localities`]
     [This setting reflects the number of localities the application is running
      on.]
     [static information, usually depends on command line options and/or
      environment setting (for PBS and SLURM), by default it is set to `1`]]
    [[`hpx.program_name`]
     [This setting reflects the program name of the application instance.]
     [dynamic information, initialized from the command line (arv\[0\])]]
    [[`hpx.cmd_line`]
     [This setting reflects the actual command line used to launch this
      application instance.]
     [dynamic information, initialized from command line (argc/argv)]]
    [[`hpx.stacks.small_size`]
     [This is initialized to the small stack size to be used by __hpx__-threads]
     [static information, depends on the compile time preprocessor constant
      `HPX_SMALL_STACK_SIZE` (defaults to `0x8000`)]]
    [[`hpx.stacks.medium_size`]
     [This is initialized to the medium stack size to be used by __hpx__-threads]
     [static information, depends on the compile time preprocessor constant
      `HPX_MEDIUM_STACK_SIZE` (defaults to `0x20000`)]]
    [[`hpx.stacks.large_size`]
     [This is initialized to the large stack size to be used by __hpx__-threads]
     [static information, depends on the compile time preprocessor constant
      `HPX_LARGE_STACK_SIZE` (defaults to `0x200000`)]]
    [[`hpx.stacks.huge_size`]
     [This is initialized to the huge stack size to be used by __hpx__-threads]
     [static information, depends on the compile time preprocessor constant
      `HPX_HUGE_STACK_SIZE` (defaults to `0x2000000`)]]
    [[`hpx.stacks.use_guard_pages`]
     [This entry controls whether the coroutine library will generate stack guard 
      pages or not. This entry is evaluated on Linux only and only if the 
      `HPX_USE_GENERIC_COROUTINE_CONTEXT` option is not enabled while configuring
      the build system. The default value for this entry is '1'.]]
]

['[*The `hpx.threadpools` Configuration Section]]

[teletype]
``
    [hpx.threadpools]
    io_pool_size = ${HPX_NUM_IO_POOL_THREADS:2}
    parcel_pool_size = ${HPX_NUM_PARCEL_POOL_THREADS:2}
    timer_pool_size = ${HPX_NUM_TIMER_POOL_THREADS:2}
``
[c++]

[table:ini_hpx_thread_pools
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.threadpools.io_pool_size`]
     [The value of this property defines the number of OS-threads created for
      the internal I/O thread pool.]
     [static information]]
    [[`hpx.threadpools.parcel_pool_size`]
     [The value of this property defines the number of OS-threads created for
      the internal parcel thread pool.]
     [static information]]
    [[`hpx.threadpools.timer_pool_size`]
     [The value of this property defines the number of OS-threads created for
      the internal timer thread pool.]
     [static information]]
]

['[*The `hpx.components` Configuration Section]]

[teletype]
``
    [hpx.components]
    load_external = ${HPX_LOAD_EXTERNAL_COMPONENTS:1}
``
[c++]

[table:ini_hpx_components
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.components.load_external`]
     [This entry defines whether external components will be loaded on this
      locality.]
     [This entry normally is set to `1` and usually there is no need to directly
      change this value. It is automatically set to `0` for a dedicated AGAS
      server locality.]
    ]
]

Additionally, the section `hpx.components` will be populated with the
information gathered from all found components. The information loaded for each
of the components will contain at least the following properties:

[teletype]
``
    [hpx.components.<component_instance_name>]
    name = <component_name>
    path = <full_path_of_the_component_module>
    enabled = $[hpx.components.load_external]
``
[c++]

[table:ini_hpx_components_custom
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.components.<component_instance_name>.name`]
     [This is the name of a component, usually the same as the second argument
      to the macro used while registering the component with
      [macroref HPX_REGISTER_MINIMAL_COMPONENT_FACTORY `HPX_REGISTER_MINIMAL_COMPONENT_FACTORY`]]
      [dynamic information, filled by the component]]
    [[`hpx.components.<component_instance_name>.path`]
     [This is either the full path file name of the component module or the
      directory the component module is located in. In this case, the component
      module name will be derived from the property
      `hpx.components.<component_instance_name>.name`]
     [dynamic information, filled by the component]]
    [[`hpx.components.<component_instance_name>.enabled`]
     [This setting allows to explicitly enable or disable the component.]
     [This is an optional property, __hpx__ assumed that the component is
      enabled if it is not defined.]]
]

The value for `<component_instance_name>` is usually the same as for the
corresponding `name` property. However generally it can be defined to any
arbitrary instance name. It is used to distinguish between different ini
sections, one for each component.


['[*The `hpx.parcel` Configuration Section]]

[teletype]
``
    [hpx.parcel]
    address = ${HPX_PARCEL_SERVER_ADDRESS:<hpx_initial_ip_address>}
    port = ${HPX_PARCEL_SERVER_PORT:<hpx_initial_ip_port>}
    max_connections = ${HPX_MAX_PARCEL_CONNECTIONS:<hpx_max_parcel_connections>}
    max_connections_per_locality = ${HPX_MAX_PARCEL_CONNECTIONS_PER_LOCALITY:<hpx_max_parcel_connections_per_locality}
``
[c++]

[table:ini_hpx_parcel
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.parcel.address`]
     [This property defines the default IP address to be used for the parcel
      layer to listen to. This IP address will be used as long as no other
      values are specified (for instance using the [hpx_cmdline `--hpx:hpx`]
      command line option). The expected format is any valid IP address or
      domain name format which can be resolved into an IP address.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_IP_ADDRESS` (`"127.0.0.1"`)]]
    [[`hpx.parcel.port`]
     [This property defines the default IP port to be used for the parcel
      layer to listen to. This IP port will be used as long as no other
      values are specified (for instance using the [hpx_cmdline `--hpx:hpx`]
      command line option). ]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_IP_PORT` (`7010`)]]
    [[`hpx.parcel.max_connections`]
     [This property defines how many network connections between different
      localities are overall kept alive by each of locality.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_MAX_PARCEL_CONNECTIONS` (`512`)]]
    [[`hpx.parcel.max_connections_per_locality`]
     [This property defines the maximum number of network connections that one
      locality will open to another locality.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_MAX_PARCEL_CONNECTIONS_PER_LOCALITY` (`4`)]]
]

['[*The `hpx.agas` Configuration Section]]

[teletype]
``
    [hpx.agas]
    address = ${HPX_AGAS_SERVER_ADDRESS:<hpx_initial_ip_address>}
    port = ${HPX_AGAS_SERVER_PORT:<hpx_initial_ip_port>}
    service_mode = hosted
    dedicated_server = 0
    max_pending_refcnt_requests = ${HPX_AGAS_MAX_PENDING_REFCNT_REQUESTS:<hpx_initial_agas_max_pending_refcnt_requests>}
    local_cache_size = ${HPX_AGAS_LOCAL_CACHE_SIZE:<hpx_initial_agas_local_cache_size>}
    local_cache_size_per_thread = ${HPX_AGAS_LOCAL_CACHE_SIZE_PER_THREAD:<hpx_initial_agas_local_cache_size_per_thread>}
    use_range_caching = ${HPX_AGAS_USE_RANGE_CACHING:1}
    use_caching = ${HPX_AGAS_USE_CACHING:1}
``
[c++]

[table:ini_hpx_agas
    [[Property]                 [Description]                         [Remark]]
    [[`hpx.agas.address`]
     [/ REVIEW: Technically, I believe --hpx:agas sets this parameter, this may need to be reworded. ]
     [This property defines the default IP address to be used for the AGAS root
      server. This IP address will be used as long as no other
      values are specified (for instance using the [hpx_cmdline `--hpx:agas`]
      command line option). The expected format is any valid IP address or
      domain name format which can be resolved into an IP address.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_IP_ADDRESS` (`"127.0.0.1"`)]]
    [[`hpx.agas.port`]
     [/ REVIEW: Technically, I believe --hpx:agas sets this parameter, this may need to be reworded. ]
     [This property defines the default IP port to be used for the AGAS root
      server. This IP port will be used as long as no other
      values are specified (for instance using the [hpx_cmdline `--hpx:agas`]
      command line option). ]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_IP_PORT` (`7010`)]]
    [[`hpx.agas.service_mode`]
     [This property specifies what type of AGAS service is running on this locality.
      Currently, two modes exist. The locality that acts as the AGAS server runs
      in `bootstrap` mode. All other localities are in `hosted` mode.]
     [dynamic information]]
    [[`hpx.agas.dedicated_server`]
     [This property specifies whether the AGAS server is exclusively running
      AGAS services and not hosting any application components. It is a boolean
      value.]
     [dynamic information, true if [hpx_cmdline `--hpx-run-agas-server-only`]
      is present.]]
    [[`hpx.agas.max_pending_refcnt_requests`]
     [This property defines the number of reference counting requests (increments
      or decrements) to buffer.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_AGAS_MAX_PENDING_REFCNT_REQUESTS` (`4096`)]]
    [[`hpx.agas.use_caching`]
     [This property specifies whether a software address translation cache is
      used. It is a boolean value.]
     [static information, defaults to true.]]
    [[`hpx.agas.use_range_caching`]
     [This property specifies whether range-based caching is used by the software
      address translation cache. This property is ignored if `hpx.agas.use_caching`
      is false. It is a boolean value.]
     [static information, defaults to true.]]
    [[`hpx.agas.local_cache_size`]
     [This property defines the size of the software address translation cache
      for AGAS services. This property is ignored if `hpx.agas.use_caching` is
      false. Note that if `hpx.agas.use_range_caching` is true, this size will
      refer to the maximum number of ranges stored in the cache, not the number
      of entries spanned by the cache. Note also, that the size of the cache
      will be determined by the large of the following two numbers: the value
      of this key and the value of `hpx.agas.local_cache_size_per_thread`
      multiplied by the number of threads used systemwide in the running application.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_INITIAL_AGAS_LOCAL_CACHE_SIZE` (`256`)]]
    [[`hpx.agas.local_cache_size_per_thread`]
     [This property defines the size of the software address translation cache
      for AGAS services on a per node basis. This property is ignored if
      `hpx.agas.use_caching` is false. Note that if `hpx.agas.use_range_caching`
      is true, this size will refer to the maximum number of ranges stored in
      the cache, not the number of entries spanned by the cache. Note also,
      that the size of the cache will be determined by the large of the following
      two numbers: the `hpx.agas.local_cache_size` and the value of this key
      multiplied by the number of threads used system wide in the running application.]
     [static information, the default depends on the compile time preprocessor
      constant `HPX_AGAS_LOCAL_CACHE_SIZE_PER_THREAD` (`32`)]]
]

[endsect] [/ Default Configuration Settings]

[/////////////////////////////////////////////////////////////////////////////]
[section:loading_ini_files Loading INI Files]

During startup and after the internal database has been initialized as
described in the section __config_defaults__, __hpx__ will try to locate and
load additional ini files to be used as a source for configuration properties.
This allows for a wide spectrum of additional customization possibilities by
the user and system administrators. The sequence of locations where __hpx__
will try loading the ini files is well defined and documented in this section.
All ini files found are merged into the internal configuration database.
The merge operation itself conforms to the rules as described in the section
__iniformat__.

# Load all component shared libraries found in the directory specified by the
  property `hpx.component_path` and retrieve their default configuration
  information (see section __loading_components__ for more details).
# Load a file named `hpx.ini` in the directory referenced by the property
  `hpx.master_ini_path`.
# Load a file named `.hpx.ini` in the current working directory, e.g. the
  directory the application was invoked from.
# Load a file referenced by the environment variable `HPX_INI`. This
  variable is expected to provide the full path name of the ini configuration
  file (if any).
# Load a file named `/etc/hpx.ini`. This lookup is done on Linux systems
  only.
# Load a file named `.hpx.ini` in the home directory of the current user,
  e.g. the directory referenced by the environment variable `HOME`.
# Load a file named `.hpx.ini` in the directory referenced by the environment
  variable `PWD`.
# Load the file specified on the command line using the option
  [hpx_cmdline `--hpx:config`].
# Load all properties specified on the command line using the option
  [hpx_cmdline `--hpx:ini`]. The properties will be added to the database in the
  same sequence as they are specified on the command line. The format for those
  options is for instance `--hpx:ini=hpx.default_stack_size=0x4000`. In
  adddition to the explicit command line options, this will set the following
  properties as implied from other settings:
    * `hpx.parcel.address` and `hpx.parcel.port` as set by
      [hpx_cmdline `--hpx:hpx`]
    * `hpx.agas.address`, `hpx.agas.port`, and `hpx.agas.service_mode` as set
      by [hpx_cmdline `--hpx:agas`]
    * `hpx.program_name` and `hpx.cmd_line` will be derived from the actual
      command line
    * `hpx.os_threads`, and `hpx.localities` as set by
       [hpx_cmdline `--hpx:threads`] and [hpx_cmdline `--hpx:localities`]
    * `hpx.runtime_mode` will be derived from any explicit
      [hpx_cmdline `--hpx:console`], [hpx_cmdline `--hpx:worker`], or
      [hpx_cmdline `--hpx:connect`], or it will be derived from other settings,
      such as [hpx_cmdline `--hpx:node=0`] which implies
      [hpx_cmdline `--hpx:console`]
# Load files based on the pattern `*.ini` in all directories listed by the
  property `hpx.ini_path`. All files found during this search will be merged.
  The property `hpx.ini_path` can hold a list of directories separated by `':'`
  (on Linux or Mac) or `';'` (on Windows)
# Load the file specified on the command line using the option
  [hpx_cmdline `--hpx:app-config`]. Note that this file will be merged as the
  content for a top level section `[application]`.

[note Any changes made to the configuration database caused by one of the steps
      will influence the loading process for all subsequent steps. For instance,
      if one of the ini files loaded changes the property `hpx.ini_path`, this
      will influence the directories searched in step 9 as described above.]

[important The __hpx__ core library will verify that all configuration settings
           specified on the command line (using the [hpx_cmdline `--hpx:ini`]
           option) will be checked for validity. That means that the library
           will accept only /known/ configuration settings. This is to protect
           the user from unintentional typos while specifying those settings.
           This behavior can be overwritten by appending a `'!'` to the
           configuration key, thus forcing the setting to be entered into the
           configuration database, for instance: `--hpx:ini=hpx.foo! = 1`.]

If any of the environment variables or files listed above is not found the
corresponding loading step will be silently skipped.

[endsect] [/ Loading INI Files]

[/////////////////////////////////////////////////////////////////////////////]
[section:loading_components Loading Components]

__hpx__ relies on loading application specific components during the runtime
of an application. Moreover, __hpx__ comes with a set of preinstalled
components supporting basic functionalities useful for almost every
application. Any component in __hpx__ is loaded from a shared library, where
any of the shared libraries can contain more than one component type. During
startup, __hpx__ tries to locate all available components (e.g. their
corresponding shared libraries) and creates an internal component registry for
later use. This section describes the algorithm used by __hpx__ to locate all
relevant shared libraries on a system. As described, this algorithm is
customizable by the configuration properties loaded from the ini files (see
section __loading_ini__).

Loading components is a two stage process. First __hpx__ tries to locate all
component shared libraries, loads those, and generates default configuration
section in the internal configuration database for each component found. For
each found component the following information is generated:

[teletype]
``
    [hpx.components.<component_instance_name>]
    name = <name_of_shared_library>
    path = $[component_path]
    enabled = $[hpx.components.load_external]
    default = 1
``
[c++]

The values in this section correspond to the expected configuration information
for a component as described in the section __config_defaults__.

In order to locate component shared libraries, __hpx__ will try loading all
shared libraries (files with the platform specific extension of a shared
library, Linux: `*.so`, Windows: `*.dll`, MacOS: `*.dylib`) found in the
directory referenced by the ini property `hpx.component_path`.

This first step corresponds to step 1) during the process of filling the
internal configuration database with default information as described in
section __loading_ini__.

After all of the configuration information has been loaded, __hpx__ performs
the second step in terms of loading components. During this step, __hpx__ scans
all existing configuration sections `[hpx.component.<some_component_instance_name>]`
and instantiates a special factory object for each of the successfully located
and loaded components. During the application's life time, these factory objects
will be responsible to create new and discard old instances of the component
they are associated with. This step is performed after step 11) of the process
of filling the internal configuration database with default information as
described in section __loading_ini__.

[endsect] [/ Loading Components]

[/////////////////////////////////////////////////////////////////////////////]
[section:component_example Application Specific Component Example]

In this section we assume to have a simple application component which exposes
one member function as a component action. The header file `app_server.hpp`
declares the C++ type to be exposed as a component. This type has a member
function `print_greating()` which is exposed as an action (`print_greating_action`).
We assume the source files for this example are located in a directory
referenced by [teletype]`$APP_ROOT`[c++]:

    // file: $APP_ROOT/app_server.hpp
    #include <hpx/hpx.hpp>
    #include <hpx/include/iostreams.hpp>

    namespace app
    {
        // Define a simple component exposing one action 'print_greating'
        class HPX_COMPONENT_EXPORT server
          : public hpx::components::simple_component_base<server>
        {
            void print_greating ()
            {
                hpx::cout << "Hey, how are you?\n" << hpx::flush;
            }

            // Component actions need to be declared, this also defines the
            // type 'print_greating_action' representing the action.
            ``[macroref HPX_DEFINE_COMPONENT_ACTION `HPX_DEFINE_COMPONENT_ACTION`]``(server, print_greating, print_greating_action);
        };
    }

    // Declare boilerplate code required for each of the component actions.
    ``[macroref HPX_REGISTER_ACTION_DECLARATION `HPX_REGISTER_ACTION_DECLARATION`]``(app::server::print_greating_action);

The corresponding source file contains mainly macro invocations which define
boilerplate code needed for __hpx__ to function properly:

    // file: $APP_ROOT/app_server.cpp
    #include "app_server.hpp"

    // Define boilerplate required once per component module.
    ``[macroref HPX_REGISTER_COMPONENT_MODULE `HPX_REGISTER_COMPONENT_MODULE`]``();

    // Define factory object associated with our component of type 'app::server'.
    ``[macroref HPX_REGISTER_MINIMAL_COMPONENT_FACTORY `HPX_REGISTER_MINIMAL_COMPONENT_FACTORY`]``(app::server, app_server);

    // Define boilerplate code required for each of the component actions. Use the
    // same argument as used for HPX_REGISTER_ACTION_DECLARATION above.
    ``[macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`]``(app::server::print_greating_action);

The following gives an example of how the component can be used. We create one
instance of the `app::server` component on the current locality and invoke the
exposed action `print_greating_action` using the global id of the newly created
instance. Note, that no special code is required to delete the component
instance after it is not needed anymore. It will be deleted automatically when
its last reference goes out of scope, here at the closing brace of the block
surrounding the code.

    // file: $APP_ROOT/use_app_server_example.cpp
    #include <hpx/hpx_init.hpp>
    #include "app_server.hpp"

    int hpx_main()
    {
        {
            // Create an instance of the app_server component on the current locality.
            hpx::naming:id_type app_server_instance =
                hpx::create_component<app::server>(``[funcref hpx::find_here `hpx::find_here`]``());

            // Create an instance of the action 'print_greating_action'.
            app::server::print_greating_action print_greating;

            // Invoke the action 'print_greating' on the newly created component.
            print_greating(app_server_instance);
        }
        return ``[funcref hpx::finalize `hpx::finalize`]``();
    }

    int main(int argc, char* argv[])
    {
        return ``[funcref hpx::init `hpx::init`]``(argc, argv);
    ]

In order to make sure that the application will be able to use the component
`app::server`, special configuration information must be passed to __hpx__.
The simples way to allow __hpx__ to 'find' the component is to provide special
ini configuration files, which add the necessary information to the internal
configuration database. The component should have a special ini file containing
the information specific to the component `app_server`:

[teletype]
``
    # file: $APP_ROOT/app_server.ini
    [hpx.components.app_server]
    name = app_server
    path = $APP_LOCATION/
``
[c++]

Here [teletype]`$APP_LOCATION`[c++] is the directory where the (binary)
component shared library is located. __hpx__ will attempt to load the shared
library from there. The section name `hpx.components.app_server`
reflects the instance name of the component (`app_server` is an arbitrary,
but unique name) . The property value for `hpx.components.app_server.name`
should be the same as used for the second argument to the macro
[macroref HPX_REGISTER_MINIMAL_COMPONENT_FACTORY `HPX_REGISTER_MINIMAL_COMPONENT_FACTORY`]
above.

Additionally a file `.hpx.ini` which could be located in the current working
directory (see step 3 as described in the section __loading_ini__) allows to
add the directory to the ini search path where the above ini file specific to
the component is located:

[teletype]
``
    # file: $PWD/.hpx.ini
    [hpx]
    ini_path = $[hpx.ini_path]:$APP_ROOT/
``
[c++]

This assumes that the above ini file specific to the component is located in
the directory [teletype]`$APP_ROOT`[c++].

[note It is possible to reference the defined property from inside its
      value. __hpx__ will gracefully use the previous value of `hpx.ini_path`
      for the reference on the right hand side and assign the overall (now
      expanded) value to the property.]

[endsect] [/ Application Specific Component Example]

[endsect] [/ Configure __hpx__ Applications]

[/////////////////////////////////////////////////////////////////////////////]
[section:logging Logging]

__hpx__ uses a sophisticated logging framework allowing to follow in detail
what operations have been performed inside the __hpx__ library in what sequence.
This information proves to be very useful for diagnosing problems or just for
improving the understanding what is happening in __hpx__ as a consequence of
invoking __hpx__ API functionality.

Generally, logging can be customized either using environment variable settings
or using by an ini configuration file. Logging is generated in several
categories, each of which can be customized independently. All customizable
configuration parameters have reasonable defaults, allowing to use logging
without any additional configuration effort. The following table lists the
available categories.

[table Logging categories
    [[Category]       [Category shortcut] [Information to be generated]         [Environment variable]]
    [[General]        [None][Logging information generated by different subsystems
                       of __hpx__, such as thread-manager, parcel layer, LCOs,
                       etc.]                                                    [`HPX_LOGLEVEL`]]
    [[AGAS]           [`AGAS`][Logging output generated by the AGAS subsystem]  [`HPX_AGAS_LOGLEVEL`]]
    [[Application]    [`APP`][Logging generated by applications.]               [`HPX_APP_LOGLEVEL`]]
]

By default, all logging output is redirected to the console instance of an
application, where it is collected and written to a file, one file for each
logging category.

Each logging category can be customized at two levels, the parameters for each
are stored in the ini configuration sections `hpx.logging.CATEGORY` and
`hpx.logging.console.CATEGORY` (where 'CATEGORY' is the category shortcut as
listed in the table above). The former influences logging at the source
locality and the latter modifies the logging behaviour for each of the
categories at the console instance of an application.

[heading Levels]

All __hpx__ logging output have seven different logging levels. These levels can
be set explicitly or through environmental variables in the main __hpx__ ini file
as shown below. The logging levels and their associated integral values are
shown in the table below, ordered from most verbose to least verbose. By
default, all __hpx__ logs are set to 0, e.g. all logging output is disabled by
default.

[table Logging levels
    [[Logging level]    [Integral value]]
    [[<debug>]          [`5`]]
    [[<info>]           [`4`]]
    [[<warning>]        [`3`]]
    [[<error>]          [`2`]]
    [[<fatal>]          [`1`]]
    [[No logging]       [`0`]]
]

[tip The easiest way to enable logging output is to set the environment variable
     corresponding to the logging category to an integral value as described in
     the table above. For instance, setting `HPX_LOGLEVEL=5` will enable full
     logging output for the general category. Please note, that the syntax and
     means of setting environment variables varies between operating systems.]

[heading Configuration]

Logs will be saved to destinations as configured by the user. By default, logging
output is saved on the console instance of an application to
`hpx.CATEGORY.PID.log` (where CATEGORY and PID are placeholders for the category
shortcut and the OS process id). The output for
the general logging category is saved to `hpx.PID.log`. The default settings for
the general logging category are shown here (the syntax is described in the
section __iniformat__):

[teletype]
``
    [hpx.logging]
    level = ${HPX_LOGLEVEL:0}
    destination = ${HPX_LOGDESTINATION:console}
    format = ${HPX_LOGFORMAT:(T%locality%/%hpxthread%.%hpxphase%/%hpxcomponent%) P%parentloc%/%hpxparent%.%hpxparentphase% %time%($hh:$mm.$ss.$mili) [%idx%]|\\n}
``
[c++]

The logging level is taken from the environment variable `HPX_LOGLEVEL` and
defaults to zero, e.g. no logging. The default logging destination is read from
the environment variable `HPX_LOGDESTINATION`. On any of the localities it
defaults to `console` which redirects all generated logging output to the
console instance of an application. The following table lists the possible
destinations for any logging output. It is possible to specify more than one
destination separated by whitespace.

[table Logging destinations
    [[Logging destination]      [Description]]
    [[file(<filename>)]         [Direct all output to a file with the given
                                 <filename>.]]
    [[cout]                     [Direct all output to the local standard output
                                 of the application instance on this locality.]]
    [[cerr]                     [Direct all output to the local standard error
                                 output of the application instance on this
                                 locality.]]
    [[console]                  [Direct all output to the console instance of
                                 the application. The console instance has its
                                 logging destinations configured separately.]]
]

The logging format is read from the environment variable `HPX_LOGFORMAT` and
it defaults to a complex format description. This format consists of several
placeholder fields (for instance `%locality%`) which will be replaced by
concrete values when the logging output is generated. All other information
is transferred verbatim to the output. The table below describes the available
field placeholders. The separator character `|` separates
the logging message prefix formatted as shown and the actual log message which
will replace the separator.

[table Available field placeholders
    [[Name]           [Description]]
    [[locality]       [The id of the locality on which the logging message was
                       generated.]]
    [[hpxthread]      [The id of the __hpx__-thread generating this logging
                       output.]]
    [[hpxphase]       [The phase[footnote The phase of a __hpx__-thread counts how
                       often this thread has been activated] of the __hpx__-thread
                       generating this logging output.]]
    [[hpxcomponent]   [The local virtual address of the component which the
                       current __hpx__-thread is accessing.]]
    [[parentloc]      [The id of the locality where the __hpx__ thread was running
                       which initiated the current __hpx__-thread. The current
                       __hpx__-thread is generating this logging output.]]
    [[hpxparent]      [The id of the __hpx__-thread which initiated the current
                       __hpx__-thread. The current __hpx__-thread is generating this
                       logging output.]]
    [[hpxparentphase] [The phase of the __hpx__-thread when it initiated the current
                       __hpx__-thread. The current __hpx__-thread is generating this
                       logging output.]]
    [[time]           [The time stamp for this logging outputline as generated
                       by the source locality.]]
    [[idx]            [The sequence number of the logging output line as
                       generated on the source locality.]]
    [[osthread]       [The sequence number of the OS-thread which executes the
                       current __hpx__-thread.]]
]

[note Not all of the field placeholder may be expanded for all generated
      logging output. If no value is available for a particular field it is
      replaced with a sequence of `'-'` characters.]

Here is an example line from a logging output generated by one of the __hpx__
examples (please note that this is generated on a single line, without line
break):

[teletype]
``
    (T00000000/0000000002d46f90.01/00000000009ebc10) P--------/0000000002d46f80.02 17:49.37.320 [000000000000004d]
        <info>  [RT] successfully created component {0000000100ff0001, 0000000000030002} of type: component_barrier[7(3)]
``
[c++]

The default settings for the general logging category on the console is shown
here:

[teletype]
``
    [hpx.logging.console]
    level = ${HPX_LOGLEVEL:$[hpx.logging.level]}
    destination = ${HPX_CONSOLE_LOGDESTINATION:file(hpx.$[system.pid].log)}
    format = ${HPX_CONSOLE_LOGFORMAT:|}
``
[c++]

These settings define how the logging is customized once the logging output
is received by the console instance of an application. The logging level
is read from the environment variable `HPX_LOGLEVEL` (as set for the console
instance of the application). The level defaults to the same values as the
corresponding settings in the general logging configuration shown before. The
destination on the console instance is set to be a file which name is generated
based from its OS process id. Setting the environment variable
`HPX_CONSOLE_LOGDESTINATION` allows customization of the naming scheme for the
output file. The logging format is set to leave the original logging output
unchanged, as received from one of the localities the application runs on.

[endsect] [/ Logging]

[/////////////////////////////////////////////////////////////////////////////]
[section:commandline __hpx__ Command Line Options]

The predefined command line options for any application using `hpx::init` are
described in the table below:

[/ TODO: proofread the options]
[table:commandline Default HPX Command Line Options
    [[Option]                   [Description]]
    [[[*__hpx__ options (allowed on command line only)]]]
    [[`--hpx:help`, `--help` or `-h`]       [print out program usage (default: this message), possible
                                             values: 'full' (additionally prints options from components)]]
    [[`--hpx:version`, `--version` or `-v`] [print out __hpx__ version and copyright information]]
    [[`--hpx:options-file arg`]             [specify a file containing command line options
                                             (alternatively: @filepath)]]

    [[[*__hpx__ options (additionally allowed in an options file)]]]
    [[`--hpx:worker`]           [run this instance in worker mode]]
    [[`--hpx:console`]          [run this instance in console mode]]
    [[`--hpx:connect`]          [run this instance in worker mode, but connecting
                                 late]]
    [[`--hpx:run-agas-server`]  [run AGAS server as part of this runtime instance]]
    [[`--hpx:run-hpx-main`]     [run the hpx_main function, regardless of locality
                                 mode]]
    [[`--hpx:hpx arg`]          [the IP address the __hpx__ parcelport is listening
                                 on, expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:agas arg`]         [the IP address the AGAS root server is running on,
                                 expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:run-agas-server-only`][run only the AGAS server]]
    [[`--hpx:nodefile arg`]     [the file name of a node file to use (list of nodes, one
                                 node name per line and core)]]
    [[`--hpx:nodes arg`]        [the (space separated) list of the nodes to use (usually
                                 this is extracted from a node file)]]
    [[`--hpx:ifsuffix arg`]     [suffix to append to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:ifprefix arg`]     [prefix to prepend to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:iftransform arg`]  [sed-style search and replace (s/search/replace/) used to
                                 transform host names to the proper network interconnect]]
    [[`--hpx:localities arg`]   [the number of localities to wait for at
                                 application startup (default: 1)]]
    [[`--hpx:node arg`]         [number of the node this locality is run on
                                 (must be unique)]]
    [[`--hpx:pu-offset`]        [the first processing unit this instance of __hpx__ should be
                                 run on (default: 0)]]
    [[`--hpx:pu-step`]          [the step between used processing unit numbers for this
                                 instance of __hpx__ (default: 1)]]
    [[`--hpx:threads arg`]      [the number of operating system threads to spawn
                                 for this __hpx__ locality (default: 1, using 'all' will
                                 spawn one thread for each processing unit)]]
    [[`--hpx:queuing arg`]      [the queue scheduling policy to use, options are
                                 'local/l', 'priority_local/pr', 'abp/a', 'priority_abp',
                                 'hierarchy/h', and 'periodic/pe' (default: priority_local/p)]]
    [[`--hpx:hierarchy-arity`]  [the arity of the of the thread queue tree, valid for
                                 --hpx:queuing=hierarchy only (default: 2)]]
    [[`--hpx:high-priority-threads arg`] [the number of operating system threads
                                 maintaining a high priority queue (default:
                                 number of OS threads), valid for
                                 --hpx:queuing=priority_local only]]
    [[`--hpx:numa-sensitive`]   [makes the priority_local scheduler NUMA sensitive, valid for
                                 --hpx:queuing=priority_local only]]

    [[[*__hpx__ configuration options]]]
    [[`--hpx:app-config arg`]   [load the specified application configuration
                                 (ini) file]]
    [[`--hpx:config arg`]       [load the specified hpx configuration (ini) file]]
    [[`--hpx:ini arg`]          [add a configuration definition to the default
                                 runtime configuration]]
    [[`--hpx:exit`]             [exit after configuring the runtime]]

    [[[*__hpx__ debugging options]]]
    [[`--hpx:list-symbolic-names`][list all registered symbolic names after startup]]
    [[`--hpx:list-component-types`][list all dynamic component types after startup]]
    [[`--hpx:dump-config-initial`][print the initial runtime configuration]]
    [[`--hpx:dump-config`]      [print the final runtime configuration]]
    [[`--hpx:debug-hpx-log`]    [enable all messages on the __hpx__ log channel and send all
                                 __hpx__ logs to the target destination]]
    [[`--hpx:debug-agas-log`]   [enable all messages on the AGAS log channel and send all
                                 AGAS logs to the target destination]]
    [[`--hpx:debug-clp`]        [debug command line processing]]

    [[[*__hpx__ options related to performance counters]]]
    [[`--hpx:print-counter`]    [print the specified performance counter either repeatedly or
                                 before shutting down the system (see option --hpx:print-counter-interval)]]
    [[`--hpx:print-counter-interval`][print the performance counter(s) specified with --hpx:print-counter
                                 repeatedly after the time interval (specified in milliseconds)
                                 (default: 0, which means print once at shutdown)]]
    [[`--hpx:print-counter-destination`][print the performance counter(s) specified with --hpx:print-counter
                                 to the given file (default: console)]]
    [[`--hpx:list-counters`]    [list the names of all registered performance counters, possible
                                 values: 'minimal' (prints counter name skeletons),
                                 'full' (prints all available counter names)]]
    [[`--hpx:list-counter-infos`][list the description of all registered performance counters,
                                   possible values: 'minimal' (prints info for counter name skeletons),
                                  'full' (prints all available counter infos)]]
]

Additionally, every __hpx__ application defines certain shortcuts allowing to
significantly shorten the command line options. The follwoing table lists all
predefined command line option shortcuts:

[table Predefined command line option shortcuts
    [[Shortcut option]  [ Equivalent long option]]
    [[-a]               [--hpx:agas]]
    [[-c]               [--hpx:console]]
    [[-h]               [--hpx:help]]
    [[--help]           [--hpx:help]]
    [[-I]               [--hpx:ini]]
    [[-l]               [--hpx:localities]]
    [[-p]               [--hpx:app-config]]
    [[-q]               [--hpx:queuing]]
    [[-r]               [--hpx:run-agas-server]]
    [[-t]               [--hpx:threads]]
    [[-v]               [--hpx:version]]
    [[--version]        [--hpx:version]]
    [[-w]               [--hpx:worker]]
    [[-x]               [--hpx:hpx]]
    [[-0]               [--hpx:node=0]]
    [[-1]               [--hpx:node=1]]
    [[-2]               [--hpx:node=2]]
    [[-3]               [--hpx:node=3]]
    [[-4]               [--hpx:node=4]]
    [[-5]               [--hpx:node=5]]
    [[-6]               [--hpx:node=6]]
    [[-7]               [--hpx:node=7]]
    [[-8]               [--hpx:node=8]]
    [[-9]               [--hpx:node=9]]
]

For runs involving more than one locality it is sometimes desireable to supply
specific command line options to single localities only. Especially when the
__hpx__ application is launched using a scheduler (like PBS, for more details
see section __pbs__), specifying dedicated command line options for single
localities could prove to be tricky. For this reason all of the command line
options which have the general format `--hpx:<some_key>` can be used in a more 
general form: `--hpx:<N>:<some_key>`, where <N> is the number of the locality
this command line options will be applied to, all other localities will simply 
ignore the option. For instance, the following PBS script passes the option
[hpx_cmdline `--hpx:pu-offset=4`] to the locality `'1'` only.

[teletype]
```
    #!/bin/bash
    #
    #PBS -l nodes=2:ppn=4

    APP_PATH=~/packages/hpx/bin/hello_world
    APP_OPTIONS=

    __pbsdsh__ -u $APP_PATH ``[hpx_cmdline --hpx:1:pu-offset=4]`` ``[hpx_cmdline --hpx:nodes]``=`cat $PBS_NODEFILE` $APP_OPTIONS
```
[c++]

[endsect] [/ Command Line Handling]

[endsect]

