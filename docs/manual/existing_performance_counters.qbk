[/=============================================================================
    Copyright (C) 2007-2016 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:counters Existing __hpx__ Performance Counters]

The __hpx__ runtime system exposes a wide variety of predefined Performance
Counters. These counters expose critical information about different modules of
the runtime system. They can help determine system bottlenecks and fine-tune
system and application performance.

[teletype]
[/////////////////////////////////////////////////////////////////////////////]
[table AGAS Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/agas/count/<agas_service>`

          where:[br] `<agas_service>` is one of the following:[br]
            /primary namespace services/: `route`, `bind_gid`, `resolve_gid`,
            `unbind_gid`, `increment_credit`, `decrement_credit`, `allocate`,
            `begin_migration`, `end_migration`
            [br]

            /component namespace services/: `bind_prefix`, `bind_name`,
            `resolve_id`, `unbind_name`, `iterate_types`, `get_component_typename`,
            `num_localities_type`
            [br]

            /locality namespace services/: `free`, `localities`, `num_localities`,
            `num_threads`, `resolve_locality`, `resolved_localities`
            [br]

            /symbol namespace services/: `bind`, `resolve`, `unbind`,
            `iterate_names`, `on_symbol_namespace_event`
        ]
        [`<agas_instance>/total`

          where:[br] `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `locality#0`, where `0` is the root locality
          (the id of the locality hosting the AGAS service).

          The value for `*` can be any locality id for the following `<agas_service>`:
          `route`, `bind_gid`, `resolve_gid`, `unbind_gid`, `increment_credit`,
          `decrement_credit`,`bind`, `resolve`, `unbind`, and `iterate_names`
          (only the primary and symbol AGAS service components live on all
          localities, whereas all other AGAS services are available on
          `locality#0` only).
        ]
        [None]
        [Returns the total number of invocations of the specified AGAS service
         since its creation.]
    ]
    [   [`/agas/<agas_service_category>/count`

          where:[br] `<agas_service_category>` is one of the following:
            `primary`, `locality`, `component`, or `symbol`.
        ]
        [`<agas_instance>/total`

          where:[br] `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `locality#0`, where `0` is the root locality
          (the id of the locality hosting the AGAS service). Except for
          `<agas_service_category>` `primary` or `symbol` for which the value for `*` can be any
          locality id (only the primary and symbol AGAS service components live on all localities,
          whereas all other AGAS services are available on `locality#0` only).
        ]
        [None]
        [Returns the overall total number of invocations of all AGAS services
         provided by the given AGAS service category since its creation.]
    ]
    [   [`/agas/time/<agas_service>`

          where:[br] `<agas_service>` is one of the following:[br]
            /primary namespace services/: `route`, `bind_gid`, `resolve_gid`,
            `unbind_gid`, `increment_credit`, `decrement_credit`, `allocate`,
            `begin_migration`, `end_migration`
            [br]

            /component namespace services/: `bind_prefix`, `bind_name`,
            `resolve_id`, `unbind_name`, `iterate_types`, `get_component_typename`,
            `num_localities_type`
            [br]

            /locality namespace services/: `free`, `localities`, `num_localities`,
            `num_threads`, `resolve_locality`, `resolved_localities`
            [br]

            /symbol namespace services/: `bind`, `resolve`, `unbind`,
            `iterate_names`, `on_symbol_namespace_event`
        ]
        [`<agas_instance>/total`

          where:[br] `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `locality#0`, where `0` is the root locality
          (the id of the locality hosting the AGAS service).

          The value for `*` can be any locality id for the following `<agas_service>`:
          `route`, `bind_gid`, `resolve_gid`, `unbind_gid`, `increment_credit`,
          `decrement_credit`,`bind`, `resolve`, `unbind`, and `iterate_names`
          (only the primary and symbol AGAS service components live on all
          localities, whereas all other AGAS services are available on
          `locality#0` only).
        ]
        [None]
        [Returns the overall execution time of the specified AGAS service
         since its creation (in nanoseconds).]
    ]
    [   [`/agas/<agas_service_category>/time`

          where:[br] `<agas_service_category>` is one of the following:
            `primary`, `locality`, `component`, or `symbol`.
        ]
        [`<agas_instance>/total`

          where:[br] `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `locality#0`, where `0` is the root locality
          (the id of the locality hosting the AGAS service). Except for
          `<agas_service_category>` `primary` or `symbol` for which the value for `*` can be any
          locality id (only the primary and symbol AGAS service components live on all localities,
          whereas all other AGAS services are available on `locality#0` only).
        ]
        [None]
        [Returns the overall execution time of all AGAS services provided by the
         given AGAS service category since its creation (in nanoseconds).]
    ]
    [   [`/agas/count/entries`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Returns the number of cache entries resident in the AGAS cache of the
        specified locality (see
         `<cache_statistics>`.]
    ]
    [   [`/agas/count/<cache_statistics>`

          where:[br] `<cache_statistics>` is one of the following:
          `cache/evictions`, `cache/hits`, `cache/inserts`, `cache/misses`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Returns the number of cache events (evictions, hits, inserts, and
         misses) in the AGAS cache of the specified locality (see
         `<cache_statistics>`.]
    ]
    [   [`/agas/count/<full_cache_statistics>`

          where:[br] `<full_cache_statistics>` is one of the following:
          `cache/get_entry`, `cache/insert_entry`, `cache/update_entry`,
          `cache/erase_entry`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Returns the number of invocations of the specified cache API function
         of the AGAS cache.]
    ]
    [   [`/agas/time/<full_cache_statistics>`

          where:[br] `<full_cache_statistics>` is one of the following:
          `cache/get_entry`, `cache/insert_entry`, `cache/update_entry`,
          `cache/erase_entry`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Returns the overall time spent executing of the specified API
         function of the AGAS cache.]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Parcel Layer Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/data/count/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the overall number of
          transmitted bytes should be queried for. The locality id is a (zero
          based) number identifying the locality.
        ]
        [Returns the overall number of raw (uncompressed) bytes sent or received
         (see `<operation>`, e.g. `sent` or `received`) for the specified
         `<connection_type>`.

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [None]
    ]
    [   [`/data/time/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the total transmission
          time should be queried for. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the total time (in nanoseconds) between the start of each
         asynchronous transmission operation and the end of the corresponding
         operation for the specified `<connection_type>` the given locality
         (see `<operation>`, e.g. `sent` or `received`).

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [None]
    ]
    [   [`/serialize/count/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the overall number of
          transmitted bytes should be queried for. The locality id is a (zero
          based) number identifying the locality.
        ]
        [Returns the overall number of bytes transferred (see `<operation>`,
         e.g. `sent` or `received`, possibly compressed) for the specified
         `<connection_type>` by the given locality.

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [If the configure-time option `-DHPX_WITH_PARCELPORT_ACTION_COUNTERS=On`
         was specified, this counter allows to specify an optional action name
         as its parameter. In this case the counter will report the number of
         bytes transmitted for the given action only.]
    ]
    [   [`/serialize/time/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the serialization time
          should be queried for. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the overall time spent performing outgoing data serialization
         for the specified `<connection_type>`on the given locality (see
         `<operation>`, e.g. `sent` or `received`).

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [If the configure-time option `-DHPX_WITH_PARCELPORT_ACTION_COUNTERS=On`
         was specified, this counter allows to specify an optional action name
         as its parameter. In this case the counter will report the serialization
         time for the given action only.]
    ]
    [   [`/parcels/count/routed`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          routed parcels should be queried for. The locality id is a (zero
          based) number identifying the locality.
        ]
        [Returns the overall number of routed (outbound) parcels transferred
         by the given locality.

         Routed parcels are those which cannot directly be delivered to its
         destination as the local AGAS is not able to resolve the destination
         address. In this case a parcel is sent to the AGAS service component
         which is responsible for creating the destination GID (and is
         responsible for resolving the destination address). This AGAS service
         component will deliver the parcel to its final target.]
        [If the configure-time option `-DHPX_WITH_PARCELPORT_ACTION_COUNTERS=On`
         was specified, this counter allows to specify an optional action name
         as its parameter. In this case the counter will report the number of
         parcels for the given action only.]
    ]
    [   [`/parcels/count/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of parcels
          should be queried for. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the overall number of parcels transferred using the specified
         `<connection_type>` by the given locality (see `<operation>`, e.g.
         `sent` or `received`).

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [None]
    ]
    [   [`/messages/count/<connection_type>/<operation>`

          where:[br] `<operation>` is one of the following:
          `sent`, `received`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of messages
          should be queried for. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the overall number of messages [footnote A message can
         potentially consist of more than one parcel.] transferred using
         the specified `<connection_type>` by the given locality (see
         `<operation>`, e.g. `sent` or `received`).

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [None]
    ]
    [   [`/parcelport/count/<connection_type>/<cache_statistics>`

          where:[br] `<cache_statistics>` is one of the following:
          `cache/insertions`, `cache/evictions`, `cache/hits`, `cache/misses`,
          `cache/misses`[br]
          `<connection_type>` is one of the following: `tcp`, `mpi`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of messages
          should be queried for. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the overall number cache events (evictions, hits, inserts,
         misses, and reclaims) for the connection cache of the given connection
         type on the given locality (see `<cache_statistics>`, e.g. `cache/insertions`,
         `cache/evictions`, `cache/hits`, `cache/misses`, or `cache/reclaims`).

         The performance counters for the connection type `mpi` are available
         only if the compile time constant `HPX_HAVE_PARCELPORT_MPI` was
         defined while compiling the __hpx__ core library (which is not defined
         by default, the corresponding cmake configuration constant is
         `HPX_WITH_PARCELPORT_MPI`).

         Please see __cmake_options__ for more details.]
        [None]
    ]
    [   [`/parcelqueue/length/<operation>`

          where:[br] `<operation>` is one of the following:
          `send`, `receive`
        ]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the parcel queue should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [Returns the current number of parcels stored in the parcel queue  (see
         `<operation>` for which queue to query, e.g. `send` or `receive`).]
        [None]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Thread Manager Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/threads/count/cumulative`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the
          overall number of retired __hpx__-threads should be queried for. The
          locality id (given by `*`) is a (zero based) number identifying the
          locality.

          `worker-thread#*` is defining the worker thread for which the
          overall number of retired __hpx__-threads should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall number of executed (retired) __hpx__-threads on the
         given locality since application start. If the instance name is `total`
         the counter returns the accumulated number of retired __hpx__-threads
         for all worker threads (cores) on that locality. If the instance name
         is `worker-thread#*` the counter will return the overall number of
         retired __hpx__-threads for all worker threads separately.
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_CUMULATIVE_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/time/average`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the
          average time spent executing one __hpx__-thread should be queried for.
          The locality id (given by `*`) is a (zero based) number identifying the
          locality.

          `worker-thread#*` is defining the worker thread for which the
          average time spent executing one __hpx__-thread should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average time spent executing one __hpx__-thread on the
         given locality since application start. If the instance name is `total`
         the counter returns the average time spent executing one __hpx__-thread
         for all worker threads (cores) on that locality. If the instance name
         is `worker-thread#*` the counter will return the average time spent
         executing one __hpx__-thread for all worker threads separately.
         This counter is available only if the configuration time constants
         `HPX_WITH_THREAD_CUMULATIVE_COUNTS` (default: ON) and
         `HPX_WITH_THREAD_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/time/average-overhead`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average overhead
          spent executing one __hpx__-thread should be queried for.  The locality
          id (given by `*`) is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          average overhead spent executing one __hpx__-thread should be
          queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line for
          the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average time spent on overhead while executing one
         __hpx__-thread on the given locality since application start. If the
         instance name is `total` the counter returns the average time spent on
         overhead while executing one __hpx__-thread for all worker threads (cores)
         on that locality. If the instance name is `worker-thread#*` the counter
         will return the average time spent on overhead executing
         one __hpx__-thread for all worker threads separately.
         This counter is available only if the configuration time constants
         `HPX_WITH_THREAD_CUMULATIVE_COUNTS` (default: ON) and
         `HPX_WITH_THREAD_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/count/cumulative-phases`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the overall number
          of executed __hpx__-thread phases (invocations) should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          overall number of executed __hpx__-thread phases (invocations) should
          be queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall number of executed __hpx__-thread phases
         (invocations) on the given locality since application start. If the
         instance name is `total` the counter returns the accumulated number
         of executed __hpx__-thread phases (invocations) for all worker threads
         (cores) on that locality. If the instance name is `worker-thread#*`
         the counter will return the overall number of executed __hpx__-thread
         phases for all worker threads separately.
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_CUMULATIVE_COUNTS` is set to `ON` (default: ON).]
        [None]
    ]
    [   [`/threads/time/average-phase`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average time spent
          executing one __hpx__-thread phase (invocation) should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          average time executing one __hpx__-thread phase (invocation) should
          be queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average time spent executing one __hpx__-thread phase
         (invocation) on the given locality since application start. If the
         instance name is `total` the counter returns the average time spent
         executing one __hpx__-thread phase (invocation) for all worker threads
         (cores) on that locality. If the instance name is `worker-thread#*`
         the counter will return the average time spent executing one
         __hpx__-thread phase for all worker threads separately.
         This counter is available only if the configuration time constants
         `HPX_WITH_THREAD_CUMULATIVE_COUNTS` (default: ON) and
         `HPX_WITH_THREAD_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/time/average-phase-overhead`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average time
          overhead executing one __hpx__-thread phase (invocation)
          should be queried for. The locality id (given by `*`) is a
          (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          average overhead executing one __hpx__-thread phase (invocation)
          should be queried for. The worker thread number (given by the `*`)
          is a (zero based) number identifying the worker thread. The number
          of available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average time spent on overhead executing one __hpx__-thread
        phase (invocation) on the given locality since application start.
        If the instance name is `total` the counter returns the average
        time spent on overhead while executing one __hpx__-thread
        phase (invocation) for all worker threads (cores) on that locality.
        If the instance name is `worker-thread#*` the counter will return
        the average time spent on overhead executing one __hpx__-thread phase
        for all worker threads separately.  This counter is available only
        if the configuration time constants
        `HPX_WITH_THREAD_CUMULATIVE_COUNTS` (default: ON) and
        `HPX_WITH_THREAD_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/time/overall`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the overall time spent
          running the scheduler should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          overall time spent running the scheduler should
          be queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall time spent running the scheduler on the
         given locality since application start. If the
         instance name is `total` the counter returns the overall time spent
         running the scheduler for all worker threads
         (cores) on that locality. If the instance name is `worker-thread#*`
         the counter will return the overall time spent running the scheduler
         for all worker threads separately. This counter is available only
        if the configuration time constant
        `HPX_WITH_THREAD_IDLE_RATES` is set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/time/cumulative`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the overall time spent
          executing all __hpx__-threads should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          overall time spent executing all __hpx__-threads should
          be queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall time spent executing all __hpx__-threads on the
         given locality since application start. If the
         instance name is `total` the counter returns the overall time spent
         executing all __hpx__-threads for all worker threads
         (cores) on that locality. If the instance name is `worker-thread#*`
         the counter will return the overall time spent executing all
         __hpx__-threads for all worker threads separately.
         This counter is available only if the configuration time constants
         `HPX_THREAD_MAINTAIN_CUMULATIVE_COUNTS` (default: ON) and
         `HPX_THREAD_MAINTAIN_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/time/cumulative-overheads`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the overall overhead
          time incurred by executing all __hpx__-threads should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          the overall overhead time incurred by executing all __hpx__-threads
          should be queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall overhead time incurred executing all __hpx__-threads
         on the given locality since application start. If the
         instance name is `total` the counter returns the overall overhead
         time incurred executing all __hpx__-threads for all worker threads
         (cores) on that locality. If the instance name is `worker-thread#*`
         the counter will return the overall overhead time incurred executing
         all __hpx__-threads for all worker threads separately.
         This counter is available only if the configuration time constants
         `HPX_THREAD_MAINTAIN_CUMULATIVE_COUNTS` (default: ON) and
         `HPX_THREAD_MAINTAIN_IDLE_RATES` are set to `ON` (default: OFF).]
        [None]
    ]
    [   [`/threads/count/instantaneous/<thread-state>`

          where:[br] `<thread-state>` is one of the following:
          `all`, `active`, `pending`, `suspended`, `terminated`, `staged`
        ]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the
          current number of threads with the given state should be queried for.
          The locality id (given by `*`) is a (zero based) number identifying
          the locality.

          `worker-thread#*` is defining the worker thread for which the
          current number of threads with the given state should be queried for.
          The worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].

          The `staged` thread state refers to registered tasks before they are
          converted to thread objects.
        ]
        [Returns the current number of __hpx__-threads having the given thread
         state on the given locality. If the instance
         name is `total` the counter returns the current number of __hpx__-threads
         of the given state for all worker threads (cores) on that locality. If
         the instance name is `worker-thread#*` the counter will return the
         current number of __hpx__-threads in the given state for all
         worker threads separately.]
        [None]
    ]
    [   [`/threads/wait-time/<thread-state>`

          where:[br] `<thread-state>` is one of the following:
          `pending`, `staged`
        ]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the
          average wait time of __hpx__-threads (pending) or thread descriptions
          (staged) with the given state should be queried for.  The locality
          id (given by `*`) is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          average wait time for the given state should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].

          The `staged` thread state refers to the wait time of registered tasks
          before they are converted into thread objects, while the `pending`
          thread state refers to the wait time of threads in any of the
          scheduling queues.
        ]
        [Returns the average wait time of __hpx__-threads (if the thread state
         is `pending`) or of task descriptions (if the thread state is `staged`)
         on the given locality since application start. If the instance
         name is `total` the counter returns the wait time of __hpx__-threads
         of the given state for all worker threads (cores) on that locality. If
         the instance name is `worker-thread#*` the counter will return the
         wait time of __hpx__-threads in the given state for all
         worker threads separately.

         These counters are available only if the compile time constant
         `HPX_WITH_THREAD_QUEUE_WAITTIME` was defined while compiling the
         __hpx__ core library (default: OFF).]
        [None]
    ]
    [   [`/threads/idle-rate`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average
          idle rate of all (or one) worker threads should be queried for. The
          locality id (given by `*`) is a (zero based) number identifying the
          locality

          `worker-thread#*` is defining the worker thread for which the
          averaged idle rate should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average idle rate for the given worker thread(s) on the
         given locality. The idle rate is defined as the ratio of the time
         spent on scheduling and management tasks and the overall time spent
         executing work since the application started.
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_IDLE_RATES` is set to `ON` (default: OFF)/.]
        [None]
    ]
    [   [`/threads/creation-idle-rate`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average
          creation idle rate of all (or one) worker threads should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          averaged idle rate should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average idle rate for the given worker thread(s) on the
         given locality which is caused by creating new threads. The creation
         idle rate is defined as the ratio of the time spent on creating new
         threads and the overall time spent executing work since the
         application started.
         This counter is available only if the configuration time constants
         `HPX_WITH_THREAD_IDLE_RATES` (default: OFF) and
         `HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES` are set to `ON`.]
        [None]
    ]
    [   [`/threads/cleanup-idle-rate`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the average
          cleanup idle rate of all (or one) worker threads should be queried
          for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          averaged cleanup idle rate should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the average idle rate for the given worker thread(s) on the
         given locality which is caused by cleaning up terminated threads. The
         cleanup idle rate is defined as the ratio of the time spent on
         cleaning up terminated thread objects and the overall time spent
         executing work since the application started.
         This counter is available only if the configuration time constants
         `HPX_WITH_THREAD_IDLE_RATES` (default: OFF) and
         `HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES` are set to `ON`.]
        [None]
    ]
    [   [`/threadqueue/length`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the current length
          of all thread queues in the scheduler for all (or one) worker threads
          should be queried for. The locality id (given by `*`) is a (zero
          based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          current length of all thread queues in the scheduler should be
          queried for. The worker thread number (given by the `*`) is a
          (zero based) number identifying the worker thread. The number of
          available worker threads is usually specified on the command line
          for the application using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the overall length of all queues for the given worker
         thread(s) on the given locality.]
        [None]
    ]
    [   [`/threads/count/stack-unbinds`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the unbind
          (madvise) operations should be queried for. The locality id is a
          (zero based) number identifying the locality.
        ]
        [Returns the total number of __hpx__-thread unbind (madvise) operations
         performed for the referenced locality. Note that this counter is not
         available on Windows based platforms.]
        [None]
    ]
    [   [`/threads/count/stack-recycles`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the recycling
          operations should be queried for. The locality id is a
          (zero based) number identifying the locality.
        ]
        [Returns the total number of __hpx__-thread recycling operations
         performed.]
        [None]
    ]
    [   [`/threads/count/stolen-from-pending`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          'stole' threads should be queried for. The locality id is a
          (zero based) number identifying the locality.
        ]
        [Returns the total number of __hpx__-threads 'stolen' from the pending
         thread queue by a neighboring thread worker thread (these threads are
         executed by a different worker thread than they were initially
         scheduled on).
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/pending-misses`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the number of pending queue
          misses of all (or one) worker threads should be queried for. The
          locality id (given by `*`) is a (zero based) number identifying the
          locality

          `worker-thread#*` is defining the worker thread for which the
          number of pending queue misses should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the total number of times that the referenced worker-thread
         on the referenced locality failed to find pending __hpx__-threads in its
         associated queue.
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/pending-accesses`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the number of pending queue
          accesses of all (or one) worker threads should be queried for. The
          locality id (given by `*`) is a (zero based) number identifying the
          locality

          `worker-thread#*` is defining the worker thread for which the
          number of pending queue accesses should be queried for. The
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the total number of times that the referenced worker-thread
         on the referenced locality looked for pending __hpx__-threads in its
         associated queue.
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/stolen-from-staged`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the number of
          __hpx__-threads stolen from the staged queue of all (or one) worker
          threads should be queried for. The locality id (given by `*`)
          is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          number of __hpx__-threads stolen from the staged queue should be queried
          for. The worker thread number (given by the `*`) is a (zero based)
          number identifying the worker thread. The number of available worker
          threads is usually specified on the command line for the application
          using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the total number of __hpx__-threads 'stolen' from the staged
         thread queue by a neighboring worker thread (these threads are
         executed by a different worker thread than they were initially
         scheduled on).
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/stolen-to-pending`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the number of
          __hpx__-threads stolen to the pending queue of all (or one) worker
          threads should be queried for. The locality id (given by `*`)
          is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          number of __hpx__-threads stolen to the pending queue should be queried
          for. The worker thread number (given by the `*`) is a (zero based)
          number identifying the worker thread. The number of available worker
          threads is usually specified on the command line for the application
          using the option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the total number of __hpx__-threads 'stolen' to the pending
         thread queue of the worker thread (these threads are
         executed by a different worker thread than they were initially
         scheduled on).
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/stolen-to-staged`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the number of
          __hpx__-threads stolen to the staged queue of all (or one) worker
          threads should be queried for. The locality id (given by `*`)
          is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          number of __hpx__-threads stolen to the staged queue should be queried
          for. The worker thread number (given by the `*`) is a (zero based)
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the total number of __hpx__-threads 'stolen' to the staged
         thread queue of a neighboring worker thread (these threads are
         executed by a different worker thread than they were initially
         scheduled on).
         This counter is available only if the configuration time constant
         `HPX_WITH_THREAD_STEALING_COUNTS` is set to `ON`
         (default: ON).]
        [None]
    ]
    [   [`/threads/count/objects`]
        [`locality#*/total` or[br]
         `locality#*/allocator#*`

          where:[br]
          `locality#*` is defining the locality for which the current
          (cumulative) number of all created __hpx__-thread objects should be
          queried for. The locality id (given by `*`) is a (zero based) number
          identifying the locality.

          `allocator#*` is defining the number of the allocator instance
          using which the threads have been created. __hpx__ uses a varying
          number of allocators to create (and recycle) __hpx__-thread objects,
          most likely these counters are of use for debugging purposes only.
          The allocator id (given by `*`) is a (zero based) number identifying
          the allocator to query.
        ]
        [Returns the total number of __hpx__-thread objects created. Note that
         thread objects are reused to improve system performance, thus this
         number does not reflect the number of actually executed (retired)
         __hpx__-threads.]
        [None]
    ]
    [   [`/scheduler/utilization/instantaneous`]
        [`locality#*/total`

          where:[br]
          `locality#*` is defining the locality for which the current
          (instantaneous) scheduler utilization queried for. The locality id
          (given by `*`) is a (zero based) number identifying the locality.
        ]
        [Returns the total scheduler (instantaneous) utilization. This is the
        current percentage of scheduler threads executing __hpx__ threads.]
        [Percent]
    ]
    [   [`/scheduler/idle-loop-count/instantaneous`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the current
          current accumulated value of all idle-loop counters of all worker
          threads should be queried. The locality id
          (given by `*`) is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          current value of the idle-loop counter should be queried
          for. The worker thread number (given by the `*`) is a (zero based)
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the current (instantaneous) idle-loop count for the given
         __hpx__- worker thread or the accumulated value for all worker threads.]
        [None]
    ]
    [   [`/scheduler/busy-loop-count/instantaneous`]
        [`locality#*/total` or[br]
         `locality#*/worker-thread#*`

          where:[br]
          `locality#*` is defining the locality for which the current
          current accumulated value of all busy-loop counters of all worker
          threads should be queried. The locality id
          (given by `*`) is a (zero based) number identifying the locality.

          `worker-thread#*` is defining the worker thread for which the
          current value of the busy-loop counter should be queried
          for. The worker thread number (given by the `*`) is a (zero based)
          worker thread number (given by the `*`) is a (zero based) number
          identifying the worker thread. The number of available worker threads
          is usually specified on the command line for the application using the
          option [hpx_cmdline `--hpx:threads`].
        ]
        [Returns the current (instantaneous) busy-loop count for the given
         __hpx__- worker thread or the accumulated value for all worker threads.]
        [None]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table General Performance Counters exposing Characteristics of Localities
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/runtime/count/component`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          components should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the overall number of currently active components of the
         specified type on the given locality.]
        [The type of the component. This is the string which has been used
         while registering the component with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_COMPONENT `HPX_REGISTER_COMPONENT`].
        ]
    ]
    [   [`/runtime/count/action-invocation`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          action invocations should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the overall (local) invocation count of the specified action
         type on the given locality.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`].
        ]
    ]
    [   [`/runtime/count/remote-action-invocation`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          action invocations should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the overall (remote) invocation count of the specified action
         type on the given locality.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`].
        ]
    ]
    [   [`/runtime/uptime`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the system uptime
          should be queried. The locality id is a (zero based) number
          identifying the locality.
        ]
        [Returns the overall time since application start on the given locality
         in nanoseconds.
        ]
        [None]
    ]
    [   [`/runtime/memory/virtual`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the allocated
          virtual memory should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the amount of virtual memory currently allocated by the
         referenced locality (in bytes).]
        [None]
    ]
    [   [`/runtime/memory/resident`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the allocated
          resident memory should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the amount of resident memory currently allocated by the
         referenced locality (in bytes).]
        [None]
    ]
    [   [`/runtime/memory/total`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the total available
          memory should be queried. The locality id is a (zero based) number
          identifying the locality.
          Note: only supported in Linux
        ]
        [Returns the total available memory for use by the referenced locality
         (in bytes). This counter is available on Linux and Windows systems only.]
        [None]
    ]
    [   [`/runtime/io/read_bytes_issued`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of bytes
          read should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of bytes read by the process (aggregate of count
         arguments passed to read() call or its analogues). This performance
         counter is available only on systems which expose the related data
         through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/write_bytes_issued`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of bytes
          written should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of bytes written by the process (aggregate of count
         arguments passed to write() call or its analogues). This performance
         counter is available only on systems which expose the related data
         through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/read_syscalls`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          system calls should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of system calls that perform I/O reads. This
         performance counter is available only on systems which expose the
         related data through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/write_syscalls`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          system calls should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of system calls that perform I/O writes. This
         performance counter is available only on systems which expose the
         related data through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/read_bytes_transferred`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of bytes
          transferred should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of bytes retrieved from storage by I/O operations.
         This performance counter is available only on systems which expose the
         related data through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/write_bytes_transferred`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of bytes
          transferred should be queried. The locality id is a (zero based)
          number identifying the locality.
        ]
        [Returns the number of bytes retrieved from storage by I/O operations.
         This performance counter is available only on systems which expose the
         related data through the /proc file system.]
        [None]
    ]
    [   [`/runtime/io/write_bytes_cancelled`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of bytes
          not being transferred should be queried. The locality id is a (zero
          based) number identifying the locality.
        ]
        [Returns the number of bytes accounted by write_bytes_transferred that
         has not been ultimately stored due to truncation or deletion.
         This performance counter is available only on systems which expose the
         related data through the /proc file system.]
        [None]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Performance Counters for General Statistics
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/statistics/average`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current average (mean) value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as a list of up to two comma separated
         (integer) values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value can be either `0` or `1` and specifies whether the
         underlying counter should be reset during evaluation (`1`) or not (`0`).
         The default value is `0`.]
    ]
    [   [`/statistics/rolling_average`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current rolling average (mean) value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as a list of up to three comma separated (integer)
         values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value will be interpreted as the size of the rolling window
         (the number of latest values to use to calculate the rolling average). The
         default value for this is `10`. The third value can be either `0` or `1`
         and specifies whether the underlying counter should be reset during
         evaluation (`1`) or not (`0`). The default value is `0`.]
    ]
    [   [`/statistics/stddev`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current standard deviation (stddev) value calculated based
         on the values queried from the underlying counter (the one specified
         as the instance name). Note that this counter will be available only
         for Boost V1.56 and newer.]
        [Any parameter will be interpreted as a list of up to two comma separated
         (integer) values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value can be either `0` or `1` and specifies whether the
         underlying counter should be reset during evaluation (`1`) or not (`0`).
         The default value is `0`.]
    ]
    [   [`/statistics/rolling_stddev`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current rolling variance (stddev) value calculated based on
         the values queried from the underlying counter (the one specified as
         the instance name).]
        [Any parameter will be interpreted as a list of up to three comma separated (integer)
         values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value will be interpreted as the size of the rolling window
         (the number of latest values to use to calculate the rolling average). The
         default value for this is `10`. The third value can be either `0` or `1`
         and specifies whether the underlying counter should be reset during
         evaluation (`1`) or not (`0`). The default value is `0`.]
    ]
    [   [`/statistics/median`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current (statistically estimated) median value calculated
         based on the values queried from the underlying counter (the one
         specified as the instance name).]
        [Any parameter will be interpreted as a list of up to two comma separated
         (integer) values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value can be either `0` or `1` and specifies whether the
         underlying counter should be reset during evaluation (`1`) or not (`0`).
         The default value is `0`.]
    ]
    [   [`/statistics/max`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current maximum value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as a list of up to two comma separated
         (integer) values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value can be either `0` or `1` and specifies whether the
         underlying counter should be reset during evaluation (`1`) or not (`0`).
         The default value is `0`.]
    ]
    [   [`/statistics/rolling_max`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current rolling maximum value calculated based on
         the values queried from the underlying counter (the one specified as
         the instance name).]
        [Any parameter will be interpreted as a list of up to three comma separated (integer)
         values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value will be interpreted as the size of the rolling window
         (the number of latest values to use to calculate the rolling average). The
         default value for this is `10`. The third value can be either `0` or `1`
         and specifies whether the underlying counter should be reset during
         evaluation (`1`) or not (`0`). The default value is `0`.]
    ]
    [   [`/statistics/min`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current minimum value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as a list of up to two comma separated
         (integer) values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value can be either `0` or `1` and specifies whether the
         underlying counter should be reset during evaluation (`1`) or not (`0`).
         The default value is `0`.]
    ]
    [   [`/statistics/rolling_min`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals as specified by the first parameter.]
        [Returns the current rolling minimum value calculated based on
         the values queried from the underlying counter (the one specified as
         the instance name).]
        [Any parameter will be interpreted as a list of up to three comma separated (integer)
         values, where the first is the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume `1000` \[ms\] as the default.
         The second value will be interpreted as the size of the rolling window
         (the number of latest values to use to calculate the rolling average). The
         default value for this is `10`. The third value can be either `0` or `1`
         and specifies whether the underlying counter should be reset during
         evaluation (`1`) or not (`0`). The default value is `0`.]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Performance Counters for Elementary Arithmetic Operations
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/arithmetics/add`]
        [None]
        [Returns the sum calculated based on the values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/subtract`]
        [None]
        [Returns the difference calculated based on the values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/multiply`]
        [None]
        [Returns the product calculated based on the values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/divide`]
        [None]
        [Returns the result of division of the values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/mean`]
        [None]
        [Returns the average value of all values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/variance`]
        [None]
        [Returns the standard deviation of all values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/median`]
        [None]
        [Returns the median value of all values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/min`]
        [None]
        [Returns the minimum value of all values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
    [   [`/arithmetics/max`]
        [None]
        [Returns the maximum value of all values queried from the
         underlying counters (the ones specified as the parameters).]
        [The parameter will be interpreted as a comma separated list of
         full performance counter names which are queried whenever
         this counter is accessed. Any wildcards in the counter names will
         be expanded.]
    ]
]

[note The /arithmetics counters can consume an arbitrary number of other counters.
    For this reason those have to be specified as parameters (a comma separated
    list of counters appended after a `'@'`). For instance:
    ```
        ./bin/hello_world -t2 \
            --hpx:print-counter=/threads{locality#0/worker-thread#*}/count/cumulative \
            --hpx:print-counter=/arithmetics/add@/threads{locality#0/worker-thread#*}/count/cumulative
        hello world from OS-thread 0 on locality 0
        hello world from OS-thread 1 on locality 0
        /threads{locality#0/worker-thread#0}/count/cumulative,1,0.515640,[s],25
        /threads{locality#0/worker-thread#1}/count/cumulative,1,0.515520,[s],36
        /arithmetics/add@/threads{locality#0/worker-thread#*}/count/cumulative,1,0.516445,[s],64
    ```
    Since all wildcards in the parameters are expanded, this example is fully equivalent to
    specifying both counters separately to `/arithmetics/add`:
    ```
        ./bin/hello_world -t2 \
            --hpx:print-counter=/threads{locality#0/worker-thread#*}/count/cumulative \
            --hpx:print-counter=/arithmetics/add@\
                /threads{locality#0/worker-thread#0}/count/cumulative,\
                /threads{locality#0/worker-thread#1}/count/cumulative
    ```
]

[/////////////////////////////////////////////////////////////////////////////]
[table Performance Counters Tracking Parcel Coalescing
    [[Counter Type] [Counter Instance Formatting] [Description] [Parameters]]
    [   [`/coalescing/count/parcels`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          parcels for the given action should be queried for. The
          locality id is a (zero based) number identifying the locality.]
        [Returns the number of parcels handled by the message handler
         associated with the action which is given by the counter parameter.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`]
        ]
    ]
    [   [`/coalescing/count/messages`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          messages for the given action should be queried for. The
          locality id is a (zero based) number identifying the locality.]
        [Returns the number of messages generated by the message handler
         associated with the action which is given by the counter parameter.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`]
        ]
    ]
    [   [`/coalescing/count/average-parcels-per-message`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the number of
          messages for the given action should be queried for. The
          locality id is a (zero based) number identifying the locality.]
        [Returns the average number of parcels sent in a message generated
         by the message handler associated with the action which is given by
         the counter parameter.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`]
        ]
    ]
    [   [`/coalescing/time/average-parcel-arrival`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the average time
          between parcels for the given action should be queried for. The
          locality id is a (zero based) number identifying the locality.]
        [Returns the average time between arriving parcels for the
         action which is given by the counter parameter.]
        [The action type. This is the string which has been used
         while registering the action with __hpx__, e.g. which has been
         passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`]
        ]
    ]
    [   [`/coalescing/time/parcel-arrival-histogram`]
        [`locality#*/total`

          where:[br] `*` is the locality id of the locality the average time
          between parcels for the given action should be queried for. The
          locality id is a (zero based) number identifying the locality.]
        [Returns a histogram representing the times between arriving parcels
         for the action which is given by the counter parameter.

         This counter returns an array of values, where the first three values
         represent the three parameters used for the histogram followed by
         one value for each of the histogram buckets.

         The first unit of measure displayed for this counter (`[ns]`) refers to
         the lower and upper boundary values in the returned histogram data only.
         The second unit of measure displayed (`[0.1%]`) refers to the actual
         histogram data.

         For each bucket the counter shows a value between `0` and `1000`,
         which corresponds to a percentage value between `0%` and `100%`.
        ]
        [The action type and optional histogram parameters. The action type is
         the string which has been used while registering the action with
         __hpx__, e.g. which has been passed as the second parameter to the macro
         [macroref HPX_REGISTER_ACTION `HPX_REGISTER_ACTION`] or
         [macroref HPX_REGISTER_ACTION_ID `HPX_REGISTER_ACTION_ID`].

         The action type may be followed by a comma separated list of up-to
         three numbers: the lower and upper boundaries for the collected
         histogram, and the number of buckets for the histogram to generate.
         By default these three numbers will be assumed to be `0` (`[ns]`,
         lower bound), `1000000` (`[ns]`, upper bound), and `20` (number of
         buckets to generate).
        ]
    ]
]

[note The performance counters related to parcel coalescing are available only
      if the configuration time constant `HPX_WITH_PARCEL_COALESCING` is set to
      `ON` (default: ON). However, even in this case it will be available only
      for those actions, which are enabled for parcel coalescing (see the macros
      [macroref HPX_ACTION_USES_MESSAGE_COALESCING `HPX_ACTION_USES_MESSAGE_COALESCING`] and
      [macroref HPX_ACTION_USES_MESSAGE_COALESCING_NOTHROW `HPX_ACTION_USES_MESSAGE_COALESCING_NOTHROW`]).
]

[c++]

[endsect] [/ Existing __hpx__ Performance Counters]
