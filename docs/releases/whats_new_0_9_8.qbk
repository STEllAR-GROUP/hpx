[/==============================================================================
    Copyright (C) 2007-2018 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_8 __hpx__ V0.9.8 (Mar 24, 2014)]

We have had over 800 commits since the last release and we have closed
over 65 tickets (bugs, feature requests, etc.).

With the changes below, __hpx__ is once again leading the charge of a whole
new era of computation. By intrinsically breaking down and synchronizing the
work to be done, __hpx__ insures that application developers will no longer
have to fret about where a segment of code executes. That allows coders to
focus their time and energy to understanding the data dependencies of their
algorithms and thereby the core obstacles to an efficient code. Here are some
of the advantages of using __hpx__:

* __hpx__ is solidly rooted in a sophisticated theoretical execution model --
  ParalleX
* __hpx__ exposes an API fully conforming to the C++11 and the draft C++14
  standards, extended and applied to distributed computing. Everything
  programmers know about the concurrency primitives of the standard C++ library
  is still valid in the context of __hpx__.
* It provides a competitive, high performance implementation of modern,
  future-proof ideas which gives an smooth migration path from todays
  mainstream techniques
* There is no need for the programmer to worry about lower level
  parallelization paradigms like threads or message passing; no need to
  understand pthreads, MPI, OpenMP, or Windows threads, etc.
* There is no need to think about different types of parallelism such as tasks,
  pipelines, or fork-join, task or data parallelism.
* The same source of your program compiles and runs on Linux, BlueGene/Q,
  Mac OS X, Windows, and Android.
* The same code runs on shared memory multi-core systems and supercomputers,
  on handheld devices and Intel[regmark] Xeon Phi[trademark] accelerators, or
  a heterogeneous mix of those.

[heading General Changes]

* A major API breaking change for this release was introduced by implementing
  `hpx::future` and `hpx::shared_future` fully in conformance with the
  __cpp11__. While `hpx::shared_future` is new and will not create any
  compatibility problems, we revised the interface and implementation of the
  existing `hpx::future`. For more details please see the
  [@http://mail.cct.lsu.edu/pipermail/hpx-users/2014-January/000141.html mailing list archive].
  To avoid any incompatibilities for existing code we named the type which
  implements the `std::future` interface as `hpx::unique_future`. For the next
  release this will be renamed to `hpx::future`, making it full conforming to
  __cpp11__.
* A large part of the code base of __hpx__ has been refactored and partially
  re-implemented. The main changes were related to
  * The threading subsystem: these changes significantly reduce the amount of
    overheads caused by the schedulers, improve the modularity of the code
    base, and extend the variety of available scheduling algorithms.
  * The parcel subsystem: these changes improve the performance of the __hpx__
    networking layer, modularize the structure of the parcelports, and
    simplify the creation of new parcelports for other underlying networking
    libraries.
  * The API subsystem: these changes improved the conformance of the API to
    __cpp11__, extend and unify the available API functionality, and decrease
    the overheads created by various elements of the API.
  * The robustness of the component loading subsystem has been improved
    significantly, allowing to more portably and more reliably register the
    components needed by an application as startup. This additionally speeds up
    general application initialization.
* We added new API functionality like `hpx::migrate` and `hpx::copy_component`
  which are the basic building blocks necessary for implementing higher level
  abstractions for system-wide load balancing, runtime-adaptive resource
  management, and object-oriented checkpointing and state-management.
* We removed the use of C++11 move emulation (using Boost.Move), replacing it
  with C++11 rvalue references. This is the first step towards using more and
  more native C++11 facilities which we plan to introduce in the future.
* We improved the reference counting scheme used by __hpx__ which helps
  managing distributed objects and memory. This improves the overall stability
  of __hpx__ and further simplifies writing real world applications.
* The minimal Boost version required to use __hpx__ is now V1.49.0.
* This release coincides with the first release of __hpxpi__ (V0.1.0), the
  first implementation of the __xpi_spec__.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [issue 1086] - Expose internal boost::shared_array to allow user management
                 of array lifetime
* [issue 1083] - Make shell examples copyable in docs
* [issue 1080] - /threads{locality#*/total}/count/cumulative broken
* [issue 1079] - Build problems on OS X
* [issue 1078] - Improve robustness of component loading
* [issue 1077] - Fix a missing enum definition for 'take' mode
* [issue 1076] - Merge Jb master
* [issue 1075] - Unknown CMake command "add_hpx_pseudo_target"
* [issue 1074] - Implement `apply_continue_callback` and `apply_colocated_callback`
* [issue 1073] - The new `apply_colocated` and `async_colocated` functions lead
                 to automatic registered functions
* [issue 1071] - Remove deferred_packaged_task
* [issue 1069] - serialize_buffer with allocator fails at destruction
* [issue 1068] - Coroutine include and forward declarations missing
* [issue 1067] - Add allocator support to util::serialize_buffer
* [issue 1066] - Allow for MPI_Init being called before HPX launches
* [issue 1065] - AGAS cache isn't used/populated on worker localities
* [issue 1064] - Reorder includes to ensure ws2 includes early
* [issue 1063] - Add `hpx::runtime::suspend` and `hpx::runtime::resume`
* [issue 1062] - Fix `async_continue` to propery handle return types
* [issue 1061] - Implement `async_colocated` and `apply_colocated`
* [issue 1060] - Implement minimal component migration
* [issue 1058] - Remove `HPX_UTIL_TUPLE` from code base
* [issue 1057] - Add performance counters for threading subsystem
* [issue 1055] - Thread allocation uses two memory pools
* [issue 1053] - Work stealing flawed
* [issue 1052] - Fix a number of warnings
* [issue 1049] - Fixes for TLS on OSX and more reliable test running
* [issue 1048] - Fixing after 588 hang
* [issue 1047] - Use port '0' for networking when using one locality
* [issue 1046] - `composable_guard` test is broken when having more than one
                 thread
* [issue 1045] - Security missing headers
* [issue 1044] - Native TLS on FreeBSD via __thread
* [issue 1043] - `async` et.al. compute the wrong result type
* [issue 1042] - `async` et.al. implicitly unwrap reference_wrappers
* [issue 1041] - Remove redundant costly Kleene stars from regex searches
* [issue 1040] - CMake script regex match patterns has unnecessary kleenes
* [issue 1039] - Remove use of Boost.Move and replace with std::move and real
                 rvalue refs
* [issue 1038] - Bump minimal required Boost to 1.49.0
* [issue 1037] - Implicit unwrapping of futures in async broken
* [issue 1036] - Scheduler hangs when user code attempts to "block" OS-threads
* [issue 1035] - Idle-rate counter always reports 100% idle rate
* [issue 1034] - Symbolic name registration causes application hangs
* [issue 1033] - Application options read in from an options file generate an
                 error message
* [issue 1032] - `hpx::id_type` local reference counting is wrong
* [issue 1031] - Negative entry in reference count table
* [issue 1030] - Implement condition_variable
* [issue 1029] - Deadlock in thread scheduling subsystem
* [issue 1028] - HPX-thread cumulative count performance counters report
                 incorrect value
* [issue 1027] - Expose `hpx::thread_interrupted` error code as a separate
                 exception type
* [issue 1026] - Exceptions thrown in asynchronous calls can be lost if the
                 value of the future is never queried
* [issue 1025] - `future::wait_for`/`wait_until` do not remove callback
* [issue 1024] - Remove dependence to boost assert and create hpx assert
* [issue 1023] - Segfaults with tcmalloc
* [issue 1022] - prerequisites link in readme is broken
* [issue 1020] - HPX Deadlock on external synchronization
* [issue 1019] - Convert using `BOOST_ASSERT` to `HPX_ASSERT`
* [issue 1018] - compiling bug with gcc 4.8.1
* [issue 1017] - Possible crash in io_pool executor
* [issue 1016] - Crash at startup
* [issue 1014] - Implement Increment/Decrement Merging
* [issue 1013] - Add more logging channels to enable greater control over
                 logging granularity
* [issue 1012] - `--hpx:debug-hpx-log` and `--hpx:debug-agas-log` lead to
                 non-thread safe writes
* [issue 1011] - After installation, running applications from the build/staging
                 directory no longer works
* [issue 1010] - Mergable decrement requests are not being merged
* [issue 1009] - `--hpx:list-symbolic-names` crashes
* [issue 1007] - Components are not properly destroyed
* [issue 1006] - Segfault/hang in set_data
* [issue 1003] - Performance counter naming issue
* [issue 982]  - Race condition during startup
* [issue 912]  - OS X: component type not found in map
* [issue 663]  - Create a buildbot slave based on Clang 3.2/OSX
* [issue 636]  - Expose `this_locality::apply<act>(p1, p2);` for local execution
* [issue 197]  - Add `--console=address` option for PBS runs
* [issue 175]  - Asynchronous AGAS API

[endsect]
