[/==============================================================================
    Copyright (C) 2007-2018 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_0 __hpx__ V0.9.0 (Jul 5, 2012)]

We have had roughly 800 commits since the last release and we have closed
approximately 80 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Significant improvements made to the usability of __hpx__ in large-scale,
  distributed environments.
* Renamed [classref hpx::lcos::packaged_task]`<>` to [classref hpx::lcos::packaged_action]`<>` to
  reflect the semantic differences to a packaged_task as defined by the
  __cpp11__.
* __hpx__ now exposes [classref hpx::thread] which is compliant to the C++11 std::thread
  type except that it (purely locally) represents an __hpx__ thread. This new type
  does not expose any of the remote capabilities of the underlying __hpx__-thread
  implementation.
* The type [classref hpx::lcos::future]`<>` is now compliant to the C++11 std::future<>
  type. This type can be used to synchronize both, local and remote operations.
  In both cases the control flow will 'return' to the future in order to
  trigger any continuation.
* The types [classref hpx::lcos::local::promise]`<>` and [classref hpx::lcos::local::packaged_task]`<>`
  are now compliant to the C++11 `std::promise<>`  and `std::packaged_task<>` types.
  These can be used to create a future representing local work only. Use the
  types [classref hpx::lcos::promise]`<>` and [classref hpx::lcos::packaged_action]`<>` to wrap any
  (possibly remote) action into a future.
* [classref hpx::thread] and [classref hpx::lcos::future]`<>` are now cancelable.
* Added support for sequential and logic composition of [classref hpx::lcos::future]`<>`'s.
  The member function [memberref hpx::lcos::future::when]`()` permits futures to
  be sequentially composed. The helper functions [funcref hpx::wait_all], [funcref hpx::wait_any],
  and [funcref hpx::wait_n] can be used to wait for more than one future at a time.
* __hpx__ now exposes [funcref hpx::apply]`()` and [funcref hpx::async]`()` as the preferred way of
  creating (or invoking) any deferred work. These functions are usable with
  various types of functions, function objects, and actions and provide a
  uniform way to spawn deferred tasks.
* __hpx__ now utilizes [funcref hpx::util::bind] to (partially) bind
  local functions and function objects, and also actions. Remote bound actions
  can have placeholders as well.
* __hpx__ continuations are now fully polymorphic. The class
  [classref hpx::actions::forwarding_continuation] is an example of how the user can
  write is own types of continuations. It can be used to execute any function
  as an continuation of a particular action.
* Reworked the action invocation API to be fully conformant to normal functions.
  Actions can now be invoked using [funcref hpx::apply]`()`, [funcref hpx::async]`()`, or using the
  `operator()` implemented on actions. Actions themselves can now be cheaply
  instantiated as they do not have any members anymore.
* Reworked the lazy action invocation API. Actions can now be directly bound
  using [funcref hpx::util::bind]`()` by passing an action instance as the first argument.
* A minimal __hpx__ program now looks like this:
``
      #include <hpx/hpx_init.hpp>

      int hpx_main()
      {
          return hpx::finalize();
      }

      int main()
      {
          return hpx::init();
      }
``
  This removes the immediate dependency on the __boost_program_options__ library.

[note This minimal version of an __hpx__ program does not support any of the
      default command line arguments (such as --help, or command line options
      related to PBS). It is suggested to always pass `argc` and `argv` to
      __hpx__ as shown in the example below.]

* In order to support those, but still not to depend on __boost_program_options__,
  the minimal program can be written as:
``
      #include <hpx/hpx_init.hpp>

      // The arguments for hpx_main can be left off, which very similar to the
      // behavior of `main()` as defined by C++.
      int hpx_main(int argc, char* argv[])
      {
          return hpx::finalize();
      }

      int main(int argc, char* argv[])
      {
          return hpx::init(argc, argv);
      }
``
* Added performance counters exposing the number of component instances which
  are alive on a given locality.
* Added performance counters exposing then number of messages sent and received,
  the number of parcels sent and received, the number of bytes sent and
  received, the overall time required to send and receive data, and the overall
  time required to serialize and deserialize the data.
* Added a new component: [classref hpx::components::binpacking_factory] which is equivalent to the existing
  [classref hpx::components::distributing_factory] component, except that it equalizes the overall
  population of the components to create. It exposes two factory methods, one
  based on the number of existing instances of the component type to create,
  and one based on an arbitrary performance counter which will be queried for
  all relevant localities.
* Added API functions allowing to access elements of the diagnostic information
  embedded in the given exception: [funcref hpx::get_locality_id]`()`, [funcref hpx::get_host_name]`()`,
  [funcref hpx::get_process_id]`()`, [funcref hpx::get_function_name]`()`, [funcref hpx::get_file_name]`()`,
  [funcref hpx::get_line_number]`()`, [funcref hpx::get_os_thread]`()`, [funcref hpx::get_thread_id]`()`, and
  [funcref hpx::get_thread_description]`()`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* [issue 71]  - GIDs that are not serialized via `handle_gid<>` should raise an exception
* [issue 105] - Allow for [classref hpx::util::function]s to be registered in the AGAS symbolic
                namespace
* [issue 107] - Nasty threadmanger race condition (reproducible in sheneos_test)
* [issue 108] - Add millisecond resolution to __hpx__ logs on Linux
* [issue 110] - Shutdown hang in distributed with release build
* [issue 116] - Don't use TSS for the applier and runtime pointers
* [issue 162] - Move local synchronous execution shortcut from hpx::function to the
                applier
* [issue 172] - Cache sources in CMake and check if they change manually
* [issue 178] - Add an INI option to turn off ranged-based AGAS caching
* [issue 187] - Support for disabling performance counter deployment
* [issue 202] - Support for sending performance counter data to a specific file
* [issue 218] - boost.coroutines allows different stack sizes, but stack pool is
                unaware of this
* [issue 231] - Implement movable `boost::bind`
* [issue 232] - Implement movable `boost::function`
* [issue 236] - Allow binding [classref hpx::util::function] to actions
* [issue 239] - Replace [^hpx::function] with [classref hpx::util::function]
* [issue 240] - Can't specify RemoteResult with lcos::async
* [issue 242] - REGISTER_TEMPLATE support for plain actions
* [issue 243] - `handle_gid<>` support for [classref hpx::util::function]
* [issue 245] - `*_c_cache code` throws an exception if the queried GID is not in the
                local cache
* [issue 246] - Undefined references in dataflow/adaptive1d example
* [issue 252] - Problems configuring sheneos with CMake
* [issue 254] - Lifetime of components doesn't end when client goes out of scope
* [issue 259] - CMake does not detect that MSVC10 has lambdas
* [issue 260] - io_service_pool segfault
* [issue 261] - Late parcel executed outside of pxthread
* [issue 263] - Cannot select allocator with CMake
* [issue 264] - Fix allocator select
* [issue 267] - Runtime error for hello_world
* [issue 269] - pthread_affinity_np test fails to compile
* [issue 270] - Compiler noise due to -Wcast-qual
* [issue 275] - Problem with configuration tests/include paths on Gentoo
* [issue 325] - Sheneos is 200-400 times slower than the fortran equivalent
* [issue 331] - [funcref hpx::init]`()` and hpx_main() should not depend on program_options
* [issue 333] - Add doxygen support to CMake for doc toolchain
* [issue 340] - Performance counters for parcels
* [issue 346] - Component loading error when running hello_world in distributed on
                MSVC2010
* [issue 362] - Missing initializer error
* [issue 363] - Parcel port serialization error
* [issue 366] - Parcel buffering leads to types incompatible exception
* [issue 368] - Scalable alternative to rand() needed for __hpx__
* [issue 369] - IB over IP is substantially slower than just using standard TCP/IP
* [issue 374] - [funcref hpx::lcos::wait] should work with dataflows and arbitrary classes
                meeting the future interface
* [issue 375] - Conflicting/ambiguous overloads of [funcref hpx::lcos::wait]
* [issue 376] - Find_HPX.cmake should set CMake variable HPX_FOUND for out of tree builds
* [issue 377] - ShenEOS interpolate bulk and interpolate_one_bulk are broken
* [issue 379] - Add support for distributed runs under SLURM
* [issue 382] - _Unwind_Word not declared in boost.backtrace
* [issue 387] - Doxygen should look only at list of specified files
* [issue 388] - Running `make install` on an out-of-tree application is broken
* [issue 391] - Out-of-tree application segfaults when running in qsub
* [issue 392] - Remove HPX_NO_INSTALL option from cmake build system
* [issue 396] - Pragma related warnings when compiling with older gcc versions
* [issue 399] - Out of tree component build problems
* [issue 400] - Out of source builds on Windows: linker should not receive compiler flags
* [issue 401] - Out of source builds on Windows: components need to be linked with
                hpx_serialization
* [issue 404] - gfortran fails to link automatically when fortran files are present
* [issue 405] - Inability to specify linking order for external libraries
* [issue 406] - Adapt action limits such that dataflow applications work without additional defines
* [issue 415] - `locality_results` is not a member of `hpx::components::server`
* [issue 425] - Breaking changes to `traits::*result` wrt `std::vector<id_type>`
* [issue 426] - AUTOGLOB needs to be updated to support fortran

[endsect]
