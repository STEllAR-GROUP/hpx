[/==============================================================================
    Copyright (C) 2007-2018 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_8_0 __hpx__ V0.8.0 (Mar 23, 2012)]

We have had roughly 1000 commits since the last release and we have closed
approximately 70 tickets (bugs, feature requests, etc.).

[heading General Changes]

* Improved PBS support, allowing for arbitrary naming schemes of node-hostnames.
* Finished verification of the reference counting framework.
* Implemented decrement merging logic to optimize the distributed reference
  counting system.
* Restructured the LCO framework. Renamed [^hpx::lcos::eager_future<>] and
  [^hpx::lcos::lazy_future<>] into [classref hpx::lcos::packaged_task]`<>` and
  [classref hpx::lcos::deferred_packaged_task]`<>`. Split
  [classref hpx::lcos::promise]`<>` into [classref hpx::lcos::packaged_task]`<>`
  and [classref hpx::lcos::future]`<>`. Added 'local' futures
  (in namespace [^hpx::lcos::local]).
* Improved the general performance of local and remote action invocations.
  This (under certain circumstances) drastically reduces the number of copies
  created for each of the parameters and return values.
* Reworked the performance counter framework. Performance counters are now
  created only when needed, which reduces the overall resource requirements.
  The new framework allows for much more flexible creation and management
  of performance counters. The new sine example application demonstrates some
  of the capabilities of the new infrastructure.
* Added a buildbot-based continuous build system which gives instant, automated
  feedback on each commit to SVN.
* Added more automated tests to verify proper functioning of __hpx__.
* Started to create documentation for __hpx__ and its API.
* Added documentation toolchain to the build system.
* Added dataflow LCO.
* Changed default __hpx__ command line options to have [^hpx:] prefix. For
  instance, the former option [^--threads] is now [hpx_cmdline [^--hpx:threads]].
  This has been done to make ambiguities with possible application specific
  command line options as unlikely as possible. See the section __commandline__
  for a full list of available options.
* Added the possibility to define command line aliases. The former short
  (one-letter) command line options have been predefined as aliases for
  backwards compatibility. See the section __commandline__ for a detailed
  description of command line option aliasing.
* Network connections are now cached based on the connected host. The number of
  simultaneous connections to a particular host is now limited. Parcels are
  buffered and bundled if all connections are in use.
* Added more refined thread affinity control. This is based on the external
  library __hwloc__.
* Improved support for Windows builds with CMake.
* Added support for components to register their own command line options.
* Added the possibility to register custom startup/shutdown functions for
  any component. These functions are guaranteed to be executed by an __hpx__
  thread.
* Added two new experimental thread schedulers: hierarchy_scheduler and
  periodic_priority_scheduler. These can be activated by using the command line
  options [hpx_cmdline [^--hpx:queueing=hierarchy]] or
  [hpx_cmdline [^--hpx:queueing=periodic]].

[heading Example Applications]

* [@http://www.graph500.org/ Graph500 performance benchmark] (thanks to Matthew
  Anderson for contributing this application).
* [@http://www.nersc.gov/research-and-development/benchmarking-and-workload-characterization/nersc-6-benchmarks/gtc/ GTC (Gyrokinetic Toroidal Code)]:
  a skeleton for particle in cell type codes.
* Random Memory Access: an example demonstrating random memory accesses in a
  large array
* [@http://stellarcollapse.org/equationofstate ShenEOS example], demonstrating
  partitioning of large read-only data structures and exposing an interpolation
  API.
* Sine performance counter demo.
* Accumulator examples demonstrating how to write and use __hpx__ components.
* Quickstart examples (like hello_world, fibonacci, quicksort, factorial, etc.)
  demonstrating simple __hpx__ concepts which introduce some of the concepts in
  __hpx__.
* Load balancing and work stealing demos.

[heading API Changes]

* Moved all local LCOs into a separate namespace `hpx::lcos::local` (for
  instance, `hpx::lcos::local_mutex` is now [classref hpx::lcos::local::mutex]).
* Replaced `hpx::actions::function` with [classref hpx::util::function]. Cleaned
  up related code.
* Removed `hpx::traits::handle_gid` and moved handling of global reference
  counts into the corresponding serialization code.
* Changed terminology: `prefix` is now called `locality_id`, renamed the
  corresponding API functions (such as `hpx::get_prefix`, which is now called
  `hpx::get_locality_id`).
* Adding [funcref hpx::find_remote_localities]`()`,
  and [funcref hpx::get_num_localities]`()`.
* Changed performance counter naming scheme to make it more bash friendly.
  The new performance counter naming scheme is now

[teletype]
``
    /object{parentname#parentindex/instance#index}/counter#parameters
``
[c++]

* Added `hpx::get_worker_thread_num` replacing `hpx::threadmanager_base::get_thread_num`.
* Renamed `hpx::get_num_os_threads` to `hpx::get_os_threads_count`.
* Added `hpx::threads::get_thread_count`.
* Restructured the Futures sub-system, renaming types in accordance with the
  terminology used by the C++11 ISO standard.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release:

* [issue 31]  - Specialize handle_gid<> for examples and tests
* [issue 72]  - Fix AGAS reference counting
* [issue 104] - heartbeat throws an exception when decrefing the performance counter it's watching
* [issue 111] - throttle causes an exception on the target application
* [issue 142] - One failed component loading causes an unrelated component to fail
* [issue 165] - Remote exception propagation bug in AGAS reference counting test
* [issue 186] - Test credit exhaustion/splitting (e.g. prepare_gid and symbol NS)
* [issue 188] - Implement remaining AGAS reference counting test cases
* [issue 258] - No type checking of GIDs in stubs classes
* [issue 271] - Seg fault/shared pointer assertion in distributed code
* [issue 281] - CMake options need descriptive text
* [issue 283] - AGAS caching broken (gva_cache needs to be rewritten with ICL)
* [issue 285] - HPX_INSTALL root directory not the same as CMAKE_INSTALL_PREFIX
* [issue 286] - New segfault in dataflow applications
* [issue 289] - Exceptions should only be logged if not handled
* [issue 290] - c++11 tests failure
* [issue 293] - Build target for component libraries
* [issue 296] - Compilation error with Boost V1.49rc1
* [issue 298] - Illegal instructions on termination
* [issue 299] - gravity aborts with multiple threads
* [issue 301] - Build error with Boost trunk
* [issue 303] - Logging assertion failure in distributed runs
* [issue 304] - Exception 'what' strings are lost when exceptions from decode_parcel are reported
* [issue 306] - Performance counter user interface issues
* [issue 307] - Logging exception in distributed runs
* [issue 308] - Logging deadlocks in distributed
* [issue 309] - Reference counting test failures and exceptions
* [issue 311] - Merge AGAS remote_interface with the runtime_support object
* [issue 314] - Object tracking for id_types
* [issue 315] - Remove handle_gid and handle credit splitting in id_type serialization
* [issue 320] - applier::get_locality_id() should return an error value (or throw an exception)
* [issue 321] - Optimization for id_types which are never split should be restored
* [issue 322] - Command line processing ignored with Boost 1.47.0
* [issue 323] - Credit exhaustion causes object to stay alive
* [issue 324] - Duplicate exception messages
* [issue 326] - Integrate Quickbook with CMake
* [issue 329] - --help and --version should still work
* [issue 330] - Create pkg-config files
* [issue 337] - Improve usability of performance counter timestamps
* [issue 338] - Non-std exceptions deriving from std::exceptions in tfunc may be sliced
* [issue 339] - Decrease the number of send_pending_parcels threads
* [issue 343] - Dynamically setting the stack size doesn't work
* [issue 351] - 'make install' does not update documents
* [issue 353] - Disable FIXMEs in the docs by default; add a doc developer CMake option to enable FIXMEs
* [issue 355] - 'make' doesn't do anything after correct configuration
* [issue 356] - Don't use hpx::util::static_ in topology code
* [issue 359] - Infinite recursion in hpx::tuple serialization
* [issue 361] - Add compile time option to disable logging completely
* [issue 364] - Installation seriously broken in r7443

[endsect]

[/Proofread by:]
[/Adrian Serio 3-13-12]
