[/==============================================================================
    Copyright (C) 2007-2018 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:hpx_0_9_5 __hpx__ V0.9.5 (Jan 16, 2013)]

We have had over 1000 commits since the last release and we have closed
roughly 150 tickets (bugs, feature requests, etc.).

[heading General Changes]

This release is continuing along the lines of code and API consolidation, and
overall usability inprovements. We dedicated much attention to performance and
we were able to significantly improve the threading and networking subsystems.

We successfully ported __hpx__ to the Android platform. __hpx__ applications now not
only can run on mobile devices, but we support heterogeneous applications running
across architecture boundaries. At the Supercomputing Conference 2012 we
demonstrated connecting Android tablets to simulations running on a Linux cluster.
The Android tablet was used to query performance counters from the Linux simulation
and to steer its parameters.

We successfully ported __hpx__ to Mac OSX (using the Clang compiler). Thanks to
Pyry Jahkola for contributing the corresponding patches. Please see the section
__macos_installation__ for more details.

We made a special effort to make HPX usable in highly concurrent use cases. Many
of the HPX API functions which possibly take longer than 100 microseconds to
execute now can be invoked asynchronously. We added uniform support for composing
futures which simplifies to write asynchronous code. HPX actions (function objects
encapsulating possibly concurrent remote function invocations) are now well
integrated with all other API facilities such like `hpx::bind`.

All of the API has been aligned as much as possible with established paradigms.
HPX now mirrors many of the facilities as defined in the __cpp11__, such
as `hpx::thread`, `hpx::function`, `hpx::future`, etc.

A lot of work has been put into improving the documentation. Many of the API
functions are documented now, concepts are explained in detail, and examples
are better described than before. The new documentation index
enables finding information with lesser effort.

This is the first release of HPX we perform after the move to __stellar_hpx_github__.
This step has enabled a wider participation from the community and further encourages
us in our decision to release HPX as a true open source library (HPX is licensed
under the very liberal __boost_license__).

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release. This is by
far the longest list of newly implemented features and fixed issues for any of
HPX' releases so far.

* [issue 666] - Segfault on calling hpx::finalize twice
* [issue 665] - Adding declaration num_of_cores
* [issue 662] - pkgconfig is building wrong
* [issue 660] - Need uninterrupt function
* [issue 659] - Move our logging library into a different namespace
* [issue 658] - Dynamic performance counter types are broken
* [issue 657] - HPX v0.9.5 (RC1) hello_world example segfaulting
* [issue 656] - Define the affinity of parcel-pool, io-pool, and timer-pool
                threads
* [issue 654] - Integrate the Boost auto_index tool with documentation
* [issue 653] - Make HPX build on OS X + Clang + libc++
* [issue 651] - Add fine-grained control for thread pinning
* [issue 650] - Command line no error message when using -hpx:(anything)
* [issue 645] - Command line aliases don't work in [teletype]`@file`[c++]
* [issue 644] - Terminated threads are not always properly cleaned up
* [issue 640] - `future_data<T>::set_on_completed_` used without locks
* [issue 638] - hpx build with intel compilers fails on linux
* [issue 637] - --copy-dt-needed-entries breaks with gold
* [issue 635] - Boost V1.53 will add Boost.Lockfree and Boost.Atomic
* [issue 633] - Re-add examples to final 0.9.5 release
* [issue 632] - Example `thread_aware_timer` is broken
* [issue 631] - FFT application throws error in parcellayer
* [issue 630] - Event synchronization example is broken
* [issue 629] - Waiting on futures hangs
* [issue 628] - Add an `HPX_ALWAYS_ASSERT` macro
* [issue 625] - Port coroutines context switch benchmark
* [issue 621] - New INI section for stack sizes
* [issue 618] - pkg_config support does not work with a HPX debug build
* [issue 617] - hpx/external/logging/boost/logging/detail/cache_before_init.hpp:139:67:
                error: 'get_thread_id' was not declared in this scope
* [issue 616] - Change wait_xxx not to use locking
* [issue 615] - Revert visibility 'fix' (fb0b6b8245dad1127b0c25ebafd9386b3945cca9)
* [issue 614] - Fix Dataflow linker error
* [issue 613] - find_here should throw an exception on failure
* [issue 612] - Thread phase doesn't show up in debug mode
* [issue 611] - Make stack guard pages configurable at runtime (initialization time)
* [issue 610] - Co-Locate Components
* [issue 609] - future_overhead
* [issue 608] - `--hpx:list-counter-infos` problem
* [issue 607] - Update Boost.Context based backend for coroutines
* [issue 606] - 1d_wave_equation is not working
* [issue 605] - Any C++ function that has serializable arguments and a
                serializable return type should be remotable
* [issue 604] - Connecting localities isn't working anymore
* [issue 603] - Do not verify any ini entries read from a file
* [issue 602] - Rename argument_size to type_size/ added implementation to get
                parcel size
* [issue 599] - Enable locality specific command line options
* [issue 598] - Need an API that accesses the performance counter reporting the
                system uptime
* [issue 597] - compiling on ranger
* [issue 595] - I need a place to store data in a thread self pointer
* [issue 594] - 32/64 interoperability
* [issue 593] - Warn if logging is disabled at compile time but requested at runtime
* [issue 592] - Add optional argument value to `--hpx:list-counters` and
                `--hpx:list-counter-infos`
* [issue 591] - Allow for wildcards in performance counter names specified with
                `--hpx:print-counter`
* [issue 590] - Local promise semantic differences
* [issue 589] - Create API to query performance counter names
* [issue 587] - Add get_num_localities and get_num_threads to AGAS API
* [issue 586] - Adjust local AGAS cache size based on number of localities
* [issue 585] - Error while using counters in HPX
* [issue 584] - counting argument size of actions, initial pass.
* [issue 581] - Remove `RemoteResult` template parameter for `future<>`
* [issue 580] - Add possibility to hook into actions
* [issue 578] - Use angle brackets in HPX error dumps
* [issue 576] - Exception incorrectly thrown when `--help` is used
* [issue 575] - HPX(bad_component_type) with gcc 4.7.2 and boost 1.51
* [issue 574] - `--hpx:connect` command line parameter not working correctly
* [issue 571] - `hpx::wait()` (callback version) should pass the future to the
                callback function
* [issue 570] - `hpx::wait` should operate on `boost::arrays` and `std::lists`
* [issue 569] - Add a logging sink for Android
* [issue 568] - 2-argument version of `HPX_DEFINE_COMPONENT_ACTION`
* [issue 567] - Connecting to a running HPX application works only once
* [issue 565] - HPX doesn't shutdown properly
* [issue 564] - Partial preprocessing of new component creation interface
* [issue 563] - Add `hpx::start`/`hpx::stop` to avoid blocking main thread
* [issue 562] - All command line arguments swallowed by hpx
* [issue 561] - Boost.Tuple is not move aware
* [issue 558] - `boost::shared_ptr<>` style semantics/syntax for client classes
* [issue 556] - Creation of partially preprocessed headers should be enabled for
                Boost newer than V1.50
* [issue 555] - `BOOST_FORCEINLINE` does not name a type
* [issue 554] - Possible race condition in thread `get_id()`
* [issue 552] - Move enable client_base
* [issue 550] - Add stack size category 'huge'
* [issue 549] - ShenEOS run seg-faults on single or distributed runs
* [issue 545] - `AUTOGLOB` broken for add_hpx_component
* [issue 542] - FindHPX_HDF5 still searches multiple times
* [issue 541] - Quotes around application name in hpx::init
* [issue 539] - Race conditition occuring with new lightweight threads
* [issue 535] - hpx_run_tests.py exits with no error code when tests are missing
* [issue 530] - Thread description(<unknown>) in logs
* [issue 523] - Make thread objects more lightweight
* [issue 521] - `hpx::error_code` is not usable for lightweight error handling
* [issue 520] - Add full user environment to HPX logs
* [issue 519] - Build succeeds, running fails
* [issue 517] - Add a guard page to linux coroutine stacks
* [issue 516] - hpx::thread::detach suspends while holding locks, leads to hang in debug
* [issue 514] - Preprocessed headers for <hpx/apply.hpp> don't compile
* [issue 513] - Buildbot configuration problem
* [issue 512] - Implement action based stack size customization
* [issue 511] - Move action priority into a separate type trait
* [issue 510] - trunk broken
* [issue 507] - no matching function for call to
                `boost::scoped_ptr<hpx::threads::topology>::scoped_ptr(hpx::threads::linux_topology*)`
* [issue 505] - undefined_symbol regression test currently failing
* [issue 502] - Adding OpenCL and OCLM support to HPX for Windows and Linux
* [issue 501] - find_package(HPX) sets cmake output variables
* [issue 500] - wait_any/wait_all are badly named
* [issue 499] - Add support for disabling pbs support in pbs runs
* [issue 498] - Error during no-cache runs
* [issue 496] - Add partial preprocessing support to cmake
* [issue 495] - Support HPX modules exporting startup/shutdown functions only
* [issue 494] - Allow modules to specify when to run startup/shutdown functions
* [issue 493] - Avoid constructing a string in make_success_code
* [issue 492] - Performance counter creation is no longer synchronized at startup
* [issue 491] - Performance counter creation is no longer synchronized at startup
* [issue 490] - Sheneos on_completed_bulk seg fault in distributed
* [issue 489] - compiling issue with g++44
* [issue 488] - Adding OpenCL and OCLM support to HPX for the MSVC platform
* [issue 487] - FindHPX.cmake problems
* [issue 485] - Change distributing_factory and binpacking_factory to use bulk creation
* [issue 484] - Change `HPX_DONT_USE_PREPROCESSED_FILES` to `HPX_USE_PREPROCESSED_FILES`
* [issue 483] - Memory counter for Windows
* [issue 479] - strange errors appear when requesting performance counters on
                multiple nodes
* [issue 477] - Create (global) timer for multi-threaded measurements
* [issue 472] - Add partial preprocessing using Wave
* [issue 471] - Segfault stack traces don't show up in release
* [issue 468] - External projects need to link with internal components
* [issue 462] - Startup/shutdown functions are called more than once
* [issue 458] - Consolidate hpx::util::high_resolution_timer and
                `hpx::util::high_resolution_clock`
* [issue 457] - index out of bounds in `allgather_and_gate` on 4 cores or more
* [issue 448] - Make HPX compile with clang
* [issue 447] - 'make tests' should execute tests on local installation
* [issue 446] - Remove SVN-related code from the codebase
* [issue 444] - race condition in smp
* [issue 441] - Patched Boost.Serialization headers should only be installed if needed
* [issue 439] - Components using `HPX_REGISTER_STARTUP_MODULE` fail to compile with MSVC
* [issue 436] - Verify that no locks are being held while threads are suspended
* [issue 435] - Installing HPX should not clobber existing Boost installation
* [issue 434] - Logging external component failed (Boost 1.50)
* [issue 433] - Runtime crash when building all examples
* [issue 432] - Dataflow hangs on 512 cores/64 nodes
* [issue 430] - Problem with distributing factory
* [issue 424] - File paths referring to XSL-files need to be properly escaped
* [issue 417] - Make dataflow LCOs work out of the box by using partial preprocessing
* [issue 413] - hpx_svnversion.py fails on Windows
* [issue 412] - Make hpx::error_code equivalent to hpx::exception
* [issue 398] - HPX clobbers out-of-tree application specific CMake variables
                (specifically `CMAKE_BUILD_TYPE`)
* [issue 394] - Remove code generating random port numbers for network
* [issue 378] - ShenEOS scaling issues
* [issue 354] - Create a coroutines wrapper for Boost.Context
* [issue 349] - Commandline option `--localities=N/-lN` should be necessary
                only on AGAS locality
* [issue 334] - Add auto_index support to cmake based documentation toolchain
* [issue 318] - Network benchmarks
* [issue 317] - Implement network performance counters
* [issue 310] - Duplicate logging entries
* [issue 230] - Add compile time option to disable thread debugging info
* [issue 171] - Add an INI option to turn off deadlock detection independently of
                logging
* [issue 170] - OSHL internal counters are incorrect
* [issue 103] - Better diagnostics for multiple component/action registerations
                under the same name
* [issue 48]  - Support for Darwin (Xcode + Clang)
* [issue 21]  - Build fails with GCC 4.6

[endsect]
