[/==============================================================================
    Copyright (C) 2007-2018 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[//////////////////////////////////////////////////////////////////////////////]
[section:hpx_1_0_0 __hpx__ V1.0 (Apr 24, 2017)]

[heading General Changes]

Here are some of the main highlights and changes for this release (in no
particular order):

* Added the facility `hpx::split_future` which allows to convert a
  `future<tuple<Ts...>>` into a `tuple<future<Ts>...>`. This functionality is
  not available when compiling __hpx__ with VS2012.
* Added a new type of performance counter which allows to return a list of
  values for each invocation. We also added a first counter of this type which
  collects a histogram of the times between parcels being created.
* Added new LCOs: `hpx::lcos::channel` and `hpx::lcos::local::channel` which
  are very similar to the well known channel constructs used in the Go language.
* Added new performance counters reporting the amount of data handled by the
  networking layer on a action-by-action basis (please see [pr 2289] for more
  details).
* Added a new facility `hpx::lcos::barrier`, replacing the equally named older
  one. The new facility has a slightly changed API and is much more efficient.
  Most notable, the new facility exposes a (global) function
  `hpx::lcos::barrier::synchronize()` which represents a global barrier across
  all localities.
* We have started to add support for vectorization to our parallel algorithm
  implementations. This support depends on using an external library, currently
  either __vc__ or __boost_simd__. Please see [issue 2333] for a list of
  currently supported algorithms. This is an experimental feature and its
  implementation and/or API might change in the future. Please see this
  [@http://stellar-group.org/2016/09/vectorized-cpp-parallel-algorithms-with-hpx/ blog-post]
  for more information.
* The parameter sequence for the `hpx::parallel::transform_reduce` overload
  taking one iterator range has changed to match the changes this algorithm has
  undergone while being moved to C++17. The old overload can be still enabled
  at configure time by specifying `-DHPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY=On`
  to __cmake__.
* The algorithm `hpx::parallel::inner_product` has been renamed to
  `hpx::parallel::transform_reduce` to match the changes this algorithm has
  undergone while being moved to C++17. The old inner_product names can be
  still enabled at configure time by specifying
  `-DHPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY=On` to __cmake__.
* Added versions of `hpx::get_ptr` taking client side representations for
  component instances as their parameter (instead of a global id).
* Added the helper utility `hpx::performance_counters::performance_counter_set`
  helping to encapsulate a set of performance counters to be managed concurrently.
* All execution policies and related classes have been renamed to be consistent
  with the naming changes applied for C++17. All policies now live in the
  namespace `hpx::parallel::execution`. The ols names can be still enabled
  at configure time by specifying `-DHPX_WITH_EXECUTION_POLICY_COMPATIBILITY=On`
  to __cmake__.
* The thread scheduling subsystem has undergone a major refactoring which results
  in significant performance improvements. We have also imroved the performance
  of creating `hpx::future` and of various facilities handling those.
* We have consolidated all of the code in HPX.Compute related to the integration
  of CUDA. `hpx::partitioned_vector` has been enabled to be usable with
  `hpx::compute::vector` which allows to place the partitions on one or more
  GPU devices.
* Added new performance counters exposing various internals of the thread
  scheduling subsystem, such as the current idle- and busy-loop counters and
  instantaneous scheduler utilization.
* Extended and improved the use of the ITTNotify hooks allowing to collect
  performance counter data and function annotation information from within the
  Intel Amplifier tool.

[heading Breaking Changes]

* We have dropped support for the gcc compiler versions V4.6 and 4.7. The
  minimal gcc version we now test on is gcc V4.8.
* We have removed (default) support for `boost::chrono` in interfaces, uses of
  it have been replaced with `std::chrono`. This facility can be still enabled
  at configure time by specifying `-DHPX_WITH_BOOST_CHRONO_COMPATIBILITY=On`
  to __cmake__.
* The parameter sequence for the `hpx::parallel::transform_reduce` overload
  taking one iterator range has changed to match the changes this algorithm has
  undergone while being moved to C++17.
* The algorithm `hpx::parallel::inner_product` has been renamed to
  `hpx::parallel::transform_reduce` to match the changes this algorithm has
  undergone while being moved to C++17.
* the build options `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` and
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY` are now disabled by default. Please
  change your code still depending on the deprecated interfaces.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    2596] - Adding apex data
* [pr    2595] - Remove obsolete file
* [issue 2594] - FindOpenCL.cmake mismatch with the official cmake module
* [pr    2592] - First attempt to introduce spmd_block in hpx
* [issue 2591] - Feature request: continuation (then) which does not require
                 the callable object to take a future<R> as parameter
* [pr    2588] - Daint fixes
* [pr    2587] - Fixing transfer_(continuation)_action::schedule
* [pr    2585] - Work around MSVC having an ICE when compiling with -Ob2
* [pr    2583] - chaning 7zip command to 7za in roll_release.sh
* [pr    2582] - First attempt to introduce spmd_block in hpx
* [pr    2581] - Enable annotated function for parallel algorithms
* [pr    2580] - First attempt to introduce spmd_block in hpx
* [pr    2579] - Make thread NICE level setting an option
* [pr    2578] - Implementing enqueue instead of busy wait when no sender is
                 available
* [pr    2577] - Retrieve -std=c++11 consistent nvcc flag
* [pr    2576] - Add missing dependencies of cuda based tests
* [pr    2575] - Remove warnings due to some captured variables
* [pr    2573] - Attempt to resolve resolve_locality
* [pr    2572] - Adding APEX hooks to background thread
* [pr    2571] - Pick up hpx.ignore_batch_env from config map
* [pr    2570] - Add commandline options --hpx:print-counters-locally
* [pr    2569] - Fix computeapi unit tests
* [pr    2567] - This adds another barrier::synchronize before registering
                 performance counters
* [pr    2564] - Cray static toolchain support
* [pr    2563] - Fixed unhandled exception during startup
* [pr    2562] - Remove partitioned_vector.cu from build tree when nvcc is used
* [issue 2561] - octo-tiger crash with commit 6e921495ff6c26f125d62629cbaad0525f14f7ab
* [pr    2560] - Prevent -Wundef warnings on Vc version checks
* [pr    2559] - Allowing CUDA callback to set the future directly from an OS
                 thread
* [pr    2558] - Remove warnings due to float precisions
* [pr    2557] - Removing bogus handling of compile flags for CUDA
* [pr    2556] - Fixing scan partitioner
* [pr    2554] - Add more diagnostics to error thrown from find_appropriate_destination
* [issue 2555] - No valid parcelport configured
* [pr    2553] - Add cmake cuda_arch option
* [pr    2552] - Remove incomplete datapar bindings to libflatarray
* [pr    2551] - Rename hwloc_topology to hwloc_topology_info
* [pr    2550] - Apex api updates
* [pr    2549] - Pre-include defines.hpp to get the macro HPX_HAVE_CUDA value
* [pr    2548] - Fixing issue with disconnect
* [pr    2546] - Some fixes around cuda clang partitioned_vector example
* [pr    2545] - Fix uses of the Vc2 datapar flags; the value, not the type,
                 should be passed to functions
* [pr    2542] - Make HPX_WITH_MALLOC easier to use
* [pr    2541] - avoid recompiles when enabling/disabling examples
* [pr    2540] - Fixing usage of target_link_libraries()
* [pr    2539] - fix RPATH behaviour
* [issue 2538] - HPX_WITH_CUDA corrupts compilation flags
* [pr    2537] - Add output of a Bazel Skylark extension for paths and compile
                 options
* [pr    2536] - Add counter exposing total available memory to Windows as well
* [pr    2535] - Remove obsolete support for security
* [issue 2534] - Remove command line option `--hpx:run-agas-server`
* [pr    2533] - Pre-cache locality endpoints during bootstrap
* [pr    2532] - Fixing handling of GIDs during serialization preprocessing
* [pr    2531] - Amend uses of the term "functor"
* [pr    2529] - added counter for reading available memory
* [pr    2527] - Facilities to create actions from lambdas
* [pr    2526] - Updated docs: HPX_WITH_EXAMPLES
* [pr    2525] - Remove warnings related to unused captured variables
* [issue 2524] - CMAKE failed because it is missing:
                 TCMALLOC_LIBRARY TCMALLOC_INCLUDE_DIR
* [pr    2523] - Fixing compose_cb stack overflow
* [pr    2522] - Instead of unlocking, ignore the lock while creating the
                 message handler
* [pr    2521] - Create LPROGRESS_ logging macro to simplify progress tracking
                 and timings
* [pr    2520] - Intel 17 support
* [pr    2519] - Fix components example
* [pr    2518] - Fixing parcel scheduling
* [issue 2517] - Race condition during Parcel Coalescing Handler creation
* [issue 2516] - HPX locks up when using at least 256 localities
* [issue 2515] - error: Install cannot find "/lib/hpx/libparcel_coalescing.so.0.9.99"
                 but I can see that file
* [pr    2514] - Making sure that all continuations of a shared_future are
                 invoked in order
* [pr    2513] - Fixing locks held during suspension
* [pr    2512] - MPI Parcelport improvements and fixes related to the background
                 work changes
* [pr    2511] - Fixing bit-wise (zero-copy) serialization
* [issue 2509] - Linking errors in hwloc_topology
* [pr    2508] - Added documentation for debugging with core files
* [pr    2506] - Fixing background work invocations
* [pr    2505] - Fix tuple serialization
* [issue 2504] - Ensure continuations are called in the order they have been
                 attached
* [pr    2503] - Adding serialization support for Vc v2 (datapar)
* [pr    2502] - Resolve various, minor compiler warnings
* [pr    2501] - Some other fixes around cuda examples
* [issue 2500] - nvcc / cuda clang issue due to a missing -DHPX_WITH_CUDA flag
* [pr    2499] - Adding support for std::array to wait_all and friends
* [pr    2498] - Execute background work as HPX thread
* [pr    2497] - Fixing configuration options for spinlock-deadlock detection
* [pr    2496] - Accounting for different compilers in CrayKNL toolchain file
* [pr    2494] - Adding component base class which ties a component instance to
                 a given executor
* [pr    2493] - Enable controlling amount of pending threads which must be
                 available to allow thread stealing
* [pr    2492] - Adding new command line option --hpx:print-counter-reset
* [pr    2491] - Resolve ambiguities when compiling with APEX
* [pr    2490] - Resuming threads waiting on future with higher priority
* [issue 2489] - nvcc issue because -std=c++11 appears twice
* [pr    2488] - Adding performance counters exposing the internal idle and
                 busy-loop counters
* [pr    2487] - Allowing for plain suspend to reschedule thread right away
* [pr    2486] - Only flag HPX code for CUDA if HPX_WITH_CUDA is set
* [pr    2485] - Making thread-queue parameters runtime-configurable
* [pr    2484] - Added atomic counter for parcel-destinations
* [pr    2483] - Added priority-queue lifo scheduler
* [pr    2482] - Changing scheduler to steal only if more than a minimal number
                 of tasks are available
* [pr    2481] - Extending command line option --hpx:print-counter-destination
                 to support value 'none'
* [pr    2479] - Added option to disable signal handler
* [pr    2478] - Making sure the sine performance counter module gets loaded
                 only for the corresponding example
* [issue 2477] - Breaking at a throw statement
* [pr    2476] - Annotated function
* [pr    2475] - Ensure that using %osthread% during logging will not throw for
                 non-hpx threads
* [pr    2474] - Remove now superficial non_direct actions from base_lco and
                 friends
* [pr    2473] - Refining support for ITTNotify
* [pr    2472] - Some fixes around hpx compute
* [issue 2470] - redefinition of boost::detail::spinlock
* [issue 2469] - Dataflow performance issue
* [pr    2468] - Perf docs update
* [pr    2466] - Guarantee to execute remote direct actions on HPX-thread
* [pr    2465] - Improve demo : Async copy and fixed device handling
* [pr    2464] - Adding performance counter exposing instantaneous scheduler
                 utilization
* [pr    2463] - Downcast to future<void>
* [pr    2462] - Fixed usage of ITT-Notify API with Intel Amplifier
* [pr    2461] - Cublas demo
* [pr    2460] - Fixing thread bindings
* [pr    2459] - Make -std=c++11 nvcc flag consistent for in-build and
                 installed versions
* [issue 2457] - Segmentation fault when registering a partitioned vector
* [pr    2452] - Properly releasing global barrier for unhandled exceptions
* [pr    2451] - Fixing long shutdown times
* [pr    2450] - Attempting to fix initialization errors on newer platforms
                 (Boost V1.63)
* [pr    2449] - Replace BOOST_COMPILER_FENCE with an HPX version
* [pr    2448] - This fixes a possible race in the migration code
* [pr    2445] - Fixing dataflow et.al. for futures or future-ranges wrapped
                 into ref()
* [pr    2444] - Fix segfaults
* [pr    2443] - Issue 2442
* [issue 2442] - Mismatch between #if/#endif and namespace scope brackets in
                 this_thread_executers.hpp
* [issue 2441] - undeclared identifier BOOST_COMPILER_FENCE
* [pr    2440] - Knl build
* [pr    2438] - Datapar backend
* [pr    2437] - Adapt algorithm parameter sequence changes from C++17
* [pr    2436] - Adapt execution policy name changes from C++17
* [issue 2435] - Trunk broken, undefined reference to
                 hpx::thread::interrupt(hpx::thread::id, bool)
* [pr    2434] - More fixes to resource manager
* [pr    2433] - Added versions of `hpx::get_ptr` taking client side representations
* [pr    2432] - Warning fixes
* [pr    2431] - Adding facility representing set of performance counters
* [pr    2430] - Fix parallel_executor thread spawning
* [pr    2429] - Fix attribute warning for gcc
* [issue 2427] - Seg fault running octo-tiger with latest HPX commit
* [issue 2426] - Bug in 9592f5c0bc29806fce0dbe73f35b6ca7e027edcb causes
                 immediate crash in Octo-tiger
* [pr    2425] - Fix nvcc errors due to constexpr specifier
* [issue 2424] - Async action on component present on hpx::find_here is executing
                 synchronously
* [pr    2423] - Fix nvcc errors due to constexpr specifier
* [pr    2422] - Implementing hpx::this_thread thread data functions
* [pr    2421] - Adding benchmark for wait_all
* [issue 2420] - Returning object of a component client from another component
                 action fails
* [pr    2419] - Infiniband parcelport
* [issue 2418] - gcc + nvcc fails to compile code that uses partitioned_vector
* [pr    2417] - Fixing context switching
* [pr    2416] - Adding fixes and workarounds to allow compilation with nvcc/msvc
                 (VS2015up3)
* [pr    2415] - Fix errors coming from hpx compute examples
* [pr    2414] - Fixing msvc12
* [pr    2413] - Enable cuda/nvcc or cuda/clang when using add_hpx_executable()
* [pr    2412] - Fix issue in HPX_SetupTarget.cmake when cuda is used
* [pr    2411] - This fixes the core compilation issues with MSVC12
* [issue 2410] - undefined reference to opal_hwloc191_hwloc_.....
* [pr    2409] - Fixing locking for channel and receive_buffer
* [pr    2407] - Solving #2402 and #2403
* [pr    2406] - Improve guards
* [pr    2405] - Enable parallel::for_each for iterators returning proxy types
* [pr    2404] - Forward the explicitly given result_type in the hpx invoke
* [issue 2403] - datapar_execution + zip iterator: lambda arguments aren't
                 references
* [issue 2402] - datapar algorithm instantiated with wrong type #2402
* [pr    2401] - Added support for imported libraries to HPX_Libraries.cmake
* [pr    2400] - Use CMake policy CMP0060
* [issue 2399] - Error trying to push back vector of futures to vector
* [pr    2398] - Allow config #defines to be written out to custom config/defines.hpp
* [issue 2397] - CMake generated config defines can cause tedious rebuilds
                 category
* [issue 2396] - BOOST_ROOT paths are not used at link time
* [pr    2395] - Fix target_link_libraries() issue when HPX Cuda is enabled
* [issue 2394] - Template compilation error using HPX_WITH_DATAPAR_LIBFLATARRAY
* [pr    2393] - Fixing lock registration for recursive mutex
* [pr    2392] - Add keywords in target_link_libraries in hpx_setup_target
* [pr    2391] - Clang goroutines
* [issue 2390] - Adapt execution policy name changes from C++17
* [pr    2389] - Chunk allocator and pool are not used and are obsolete
* [pr    2388] - Adding functionalities to datapar needed by octotiger
* [pr    2387] - Fixing race condition for early parcels
* [issue 2386] - Lock registration broken for recursive_mutex
* [pr    2385] - Datapar zip iterator
* [pr    2384] - Fixing race condition in for_loop_reduction
* [pr    2383] - Continuations
* [pr    2382] - add LibFlatArray-based backend for datapar
* [pr    2381] - remove unused typedef to get rid of compiler warnings
* [pr    2380] - Tau cleanup
* [pr    2379] - Can send immediate
* [pr    2378] - Renaming copy_helper/copy_n_helper/move_helper/move_n_helper
* [issue 2376] - Boost trunk's spinlock initializer fails to compile
* [pr    2375] - Add support for minimal thread local data
* [pr    2374] - Adding API functions set_config_entry_callback
* [pr    2373] - Add a simple utility for debugging that gives supended task
                 backtraces
* [pr    2372] - Barrier Fixes
* [issue 2370] - Can't wait on a wrapped future
* [pr    2369] - Fixing stable_partition
* [pr    2367] - Fixing find_prefixes for Windows platforms
* [pr    2366] - Testing for experimental/optional only in C++14 mode
* [pr    2364] - Adding set_config_entry
* [pr    2363] - Fix papi
* [pr    2362] - Adding missing macros for new non-direct actions
* [pr    2361] - Improve cmake output to help debug compiler incompatibility check
* [pr    2360] - Fixing race condition in condition_variable
* [pr    2359] - Fixing shutdown when parcels are still in flight
* [issue 2357] - failed to insert console_print_action into typename_to_id_t registry
* [pr    2356] - Fixing return type of get_iterator_tuple
* [pr    2355] - Fixing compilation against Boost 1 62
* [pr    2354] - Adding serialization for mask_type if CPU_COUNT > 64
* [pr    2353] - Adding hooks to tie in APEX into the parcel layer
* [issue 2352] - Compile errors when using intel 17 beta (for KNL) on edison
* [pr    2351] - Fix function vtable get_function_address implementation
* [issue 2350] - Build failure - master branch (4de09f5) with Intel Compiler v17
* [pr    2349] - Enabling zero-copy serialization support for std::vector<>
* [pr    2348] - Adding test to verify #2334 is fixed
* [pr    2347] - Bug fixes for hpx.compute and hpx::lcos::channel
* [pr    2346] - Removing cmake "find" files that are in the APEX cmake Modules
* [pr    2345] - Implemented parallel::stable_partition
* [pr    2344] - Making hpx::lcos::channel usable with basename registration
* [pr    2343] - Fix a couple of examples that failed to compile after recent
                 api changes
* [issue 2342] - Enabling APEX causes link errors
* [pr    2341] - Removing cmake "find" files that are in the APEX cmake Modules
* [pr    2340] - Implemented all existing datapar algorithms using Boost.SIMD
* [pr    2339] - Fixing 2338
* [pr    2338] - Possible race in sliding semaphore
* [pr    2337] - Adjust osu_latency test to measure window_size parcels in flight at once
* [pr    2336] - Allowing remote direct actions to be executed without spawning a task
* [pr    2335] - Making sure multiple components are properly initialized from
                 arguments
* [issue 2334] - Cannot construct component with large vector on a remote
                 locality
* [pr    2332] - Fixing hpx::lcos::local::barrier
* [pr    2331] - Updating APEX support to include OTF2
* [pr    2330] - Support for data-parallelism for parallel algorithms
* [issue 2329] - Coordinate settings in cmake
* [pr    2328] - fix LibGeoDecomp builds with HPX + GCC 5.3.0 + CUDA 8RC
* [pr    2326] - Making scan_partitioner work (for now)
* [issue 2323] - Constructing a vector of components only correctly initializes
                 the first component
* [pr    2322] - Fix problems that bubbled up after merging #2278
* [pr    2321] - Scalable barrier
* [pr    2320] - Std flag fixes
* [issue 2319] - -std=c++14 and -std=c++1y with Intel can't build recent Boost
                 builds due to insufficient C++14 support; don't enable these
                 flags by default for Intel
* [pr    2318] - Improve handling of --hpx:bind=<bind-spec>
* [pr    2317] - Making sure command line warnings are printed once only
* [pr    2316] - Fixing command line handling for default bind mode
* [pr    2315] - Set id_retrieved if set_id is present
* [issue 2314] - Warning for requested/allocated thread discrepancy is printed
                 twice
* [issue 2313] - --hpx:print-bind doesn't work with --hpx:pu-step
* [issue 2312] - --hpx:bind range specifier restrictions are overly restrictive
* [issue 2311] - hpx_0.9.99 out of project build fails
* [pr    2310] - Simplify function registration
* [pr    2309] - Spelling and grammar revisions in documentation (and some code)
* [pr    2306] - Correct minor typo in the documentation
* [pr    2305] - Cleaning up and fixing parcel coalescing
* [pr    2304] - Inspect checks for stream related includes
* [pr    2303] - Add functionality allowing to enumerate threads of given state
* [pr    2301] - Algorithm overloads fix for VS2013
* [pr    2300] - Use <cstdint>, add inspect checks
* [pr    2299] - Replace boost::[c]ref with std::[c]ref, add inspect checks
* [pr    2297] - Fixing compilation with no hw_loc
* [pr    2296] - Hpx compute
* [pr    2295] - Making sure for_loop(execution::par, 0, N, ...) is actually executed in
                 parallel
* [pr    2294] - Throwing exceptions if the runtime is not up and running
* [pr    2293] - Removing unused parcel port code
* [pr    2292] - Refactor function vtables
* [pr    2291] - Fixing 2286
* [pr    2290] - Simplify algorithm overloads
* [pr    2289] - Adding performance counters reporting parcel related data on a
                 per-action basis
* [issue 2288] - Remove dormant parcelports
* [issue 2286] - adjustments to parcel handling to support parcelports that do
                 not need a connection cache
* [pr    2285] - add CMake option to disable package export
* [pr    2283] - Add more inspect checks for use of deprecated components
* [issue 2282] - Arithmetic exception in executor static chunker
* [issue 2281] - For loop doesn't parallelize
* [pr    2280] - Fixing 2277: build failure with PAPI
* [pr    2279] - Child vs parent stealing
* [issue 2277] - master branch build failure (53c5b4f) with papi
* [pr    2276] - Compile time launch policies
* [pr    2275] - Replace boost::chrono with std::chrono in interfaces
* [pr    2274] - Replace most uses of Boost.Assign with initializer list
* [pr    2273] - Fixed typos
* [pr    2272] - Inspect checks
* [pr    2270] - Adding test verifying -Ihpx.os_threads=all
* [pr    2269] - Added inspect check for now obsolete boost type traits
* [pr    2268] - Moving more code into source files
* [issue 2267] - Add inspect support to deprecate Boost.TypeTraits
* [pr    2265] - Adding channel LCO
* [pr    2264] - Make support for std::ref mandatory
* [pr    2263] - Constrain tuple_member forwarding constructor
* [issue 2262] - Test hpx.os_threads=all
* [issue 2261] - OS X: Error: no matching constructor for initialization of
                 'hpx::lcos::local::condition_variable_any'
* [issue 2260] - Make support for std::ref mandatory
* [pr    2259] - Remove most of Boost.MPL, Boost.EnableIf and Boost.TypeTraits
* [pr    2258] - Fixing #2256
* [pr    2257] - Fixing launch process
* [issue 2256] - Actions are not registered if not invoked
* [pr    2255] - Coalescing histogram
* [pr    2254] - Silence explicit initialization in copy-constructor warnings
* [pr    2253] - Drop support for GCC 4.6 and 4.7
* [pr    2252] - Prepare V1.0
* [pr    2251] - Convert to 0.9.99
* [pr    2249] - Adding iterator_facade and iterator_adaptor
* [issue 2248] - Need a feature to yield to a new task immediately
* [pr    2246] - Adding split_future
* [pr    2245] - Add an example for handing over a component instance to
                 a dynamically launched locality
* [issue 2243] - Add example demonstrating AGAS symbolic name registration
* [issue 2242] - pkgconfig test broken on CentOS 7 / Boost 1.61
* [issue 2241] - Compilation error for partitioned vector in hpx_compute branch
* [pr    2240] - Fixing termination detection on one locality
* [issue 2239] - Create a new facility lcos::split_all
* [issue 2236] - hpx::cout vs. std::cout
* [pr    2232] - Implement local-only primary namespace service
* [issue 2147] - would like to know how much data is being routed by particular
                 actions
* [issue 2109] - Warning while compiling hpx
* [issue 1973] - Setting INTERFACE_COMPILE_OPTIONS for hpx_init in CMake taints
                 Fortran_FLAGS
* [issue 1864] - run_guarded using bound function ignores reference
* [issue 1754] - Running with TCP parcelport causes immediate crash or freeze
* [issue 1655] - Enable zip_iterator to be used with Boost traversal iterator
                 categories
* [issue 1591] - Optimize AGAS for shared memory only operation
* [issue 1401] - Need an efficient infiniband parcelport
* [issue 1125] - Fix the IPC parcelport
* [issue  839] - Refactor ibverbs and shmem parcelport
* [issue  702] - Add instrumentation of parcel layer
* [issue  668] - Implement ispc task interface
* [issue  533] - Thread queue/deque internal parameters should be runtime
                 configurable
* [issue  475] - Create a means of combining performance counters into querysets

[endsect]
